# Consolidated on /Users/michaelking/Documents/projects/king-walk-week/api/gathered_code.txt
# Script version: 1.1.0



# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/index.html =====

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta http-equiv="refresh" content="0; url=/site/">
  <title>Redirecting…</title>
  <script>
    (function() {
      var target = "/site/";
      if (location.pathname !== "/" && !location.pathname.startsWith("/site/")) {
        // If served from a subpath, build absolute to /site/
        target = "/site/";
      }
      try { window.location.replace(target); } catch (e) { window.location.href = target; }
    })();
  </script>
  <style>
    html, body { height: 100%; margin: 0; background: #0b1020; color: #e6ecff; display: grid; place-items: center; font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; }
    a { color: #9ecbff; }
    .card { padding: 1rem 1.25rem; background: #0f1530; border: 1px solid rgba(255,255,255,0.08); border-radius: 12px; }
  </style>
</head>
<body>
  <div class="card">
    Redirecting to <a href="/site/">/site/</a> …
  </div>
</body>
</html>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/scripts/twilio_sign.py =====

#!/usr/bin/env python3
import os, base64, hmac, hashlib

# Environment inputs
URL  = os.environ["URL"]
AUTH = os.environ["AUTH"]

# Use the exact POST values the server will see after form decoding.
# curl --data with '+' in number becomes a leading space when decoded.
POST = {
  "From": " 18015550123",
  "MessageSid": "SM_test123",
  "MessageStatus": "delivered",
  "To": " 13855032310",
}

joined = URL + "".join(k + POST[k] for k in sorted(POST))
sig = base64.b64encode(hmac.new(AUTH.encode(), joined.encode(), hashlib.sha1).digest()).decode()
print(sig)


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/site/index.html =====

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Kings Walk Week</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
  <link rel="stylesheet" href="app.css" />
</head>
<body class="min-h-screen">
  <header class="px-4 py-4 sm:px-6 sm:py-5 sticky top-0 backdrop-blur supports-[backdrop-filter]:bg-[#0b1020]/80 z-30 border-b border-white/10">
    <div class="max-w-6xl mx-auto flex items-center justify-between gap-3">
      <div>
        <div class="kicker">Kings Walk Week</div>
        <h1 class="text-2xl sm:text-3xl font-extrabold leading-tight">Walk together. Win today.</h1>
        <p class="text-xs sm:text-sm text-white/70 mt-1">Data comes from a SQLite database. Weeks are finalized by admin; snapshots freeze awards.</p>
      </div>
      <div class="hidden sm:flex items-center gap-2">
        <span id="loadStatus" class="badge">Loading…</span>
      </div>
    </div>
  </header>

  <main class="max-w-6xl mx-auto px-4 sm:px-6 py-4 sm:py-6 space-y-4 sm:space-y-6">
    <!-- Week Selector -->
    <section class="card p-3 sm:p-4 shadow-soft">
      <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3">
        <div class="space-y-1">
          <div class="kicker">Week</div>
          <h2 class="text-lg sm:text-xl font-bold">Select a week</h2>
          <p class="text-white/70 text-sm">Finalized weeks are read-only (snapshot).</p>
        </div>
        <div class="flex items-center gap-3 w-full sm:w-auto">
          <select id="weekSelector" class="px-2 py-2 rounded bg-white/5 text-sm w-full sm:w-auto"></select>
        </div>
      </div>
    </section>

    <!-- Summary + Awards Row -->
    <section class="grid-auto-fit">
      <div class="card p-4 space-y-3">
        <div class="kicker">Summary</div>
        <h3 class="text-xl font-bold">Live Leaderboard</h3>
        <div id="leaderboardPosition" class="text-xs text-white/60 mb-1"></div>
        <div class="overflow-x-auto">
          <table id="leaderboard" class="w-full text-sm">
            <thead class="text-white/70">
              <tr>
                <th class="text-left py-2">Rank</th>
                <th class="text-left py-2 cursor-pointer" data-sort="name">Name</th>
                <th class="text-right py-2 px-3 cursor-pointer" data-sort="total">Total</th>
                <th class="text-right py-2 px-3">Avg</th>
                <th class="text-right py-2 px-3">Best Day</th>
                <th class="text-right py-2">Days ≥30k</th>
                <th class="text-right py-2">Days ≥20k</th>
                <th class="text-right py-2">Days ≥15k</th>
                <th class="text-right py-2">Days ≥10k</th>
                <th class="text-right py-2">Days ≥2.5k</th>
                <th class="text-right py-2">Days ≥1k</th>
              </tr>
            </thead>
            <tbody></tbody>
          </table>
        </div>
      </div>

      <div class="card p-4 space-y-3">
        <div class="kicker">Awards</div>
        <h3 class="text-xl font-bold">Badges and Bragging Rights</h3>
        <ul id="awardsList" class="space-y-2 text-sm"></ul>
      </div>
    </section>

    <!-- Charts -->
    <section class="grid-auto-fit">
      <div class="card p-4 space-y-3">
        <div class="kicker">Chart</div>
        <h3 class="text-xl font-bold">Steps by Day</h3>
        <canvas id="perDayChart" height="220"></canvas>
      </div>
      <div class="card p-4 space-y-3">
        <div class="kicker">Chart</div>
        <h3 class="text-xl font-bold">Family Total by Day</h3>
        <canvas id="stackedTotalChart" height="220"></canvas>
      </div>
      <div class="card p-4 space-y-3">
        <div class="kicker">Chart</div>
        <h3 class="text-xl font-bold">Trajectories</h3>
        <canvas id="linesChart" height="220"></canvas>
      </div>
    </section>

    <!-- Personal Cards -->
    <section id="cards" class="grid-auto-fit"></section>

    <!-- Missing Data Callouts -->
    <section class="card p-4 space-y-3">
      <div class="kicker">Accountability</div>
      <h3 class="text-xl font-bold">Missing Check-ins</h3>
      <ul id="missingList" class="space-y-2 text-sm"></ul>
      <p class="text-xs text-white/60">Blank = no report. Nudge each other kindly.</p>
    </section>

    <footer class="py-6 text-center text-xs text-white/60">
      Built for the King family. Tutu approved.
    </footer>
  </main>

  <script type="module" src="app/main.js" defer></script>
</body>
</html>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/site/lifetime.html =====

<!DOCTYPE html><html lang="en"><head>
<meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Lifetime Steps</title>
<script src="https://cdn.tailwindcss.com"></script>
<link rel="stylesheet" href="app.css"/>
</head><body class="min-h-screen">
<header class="px-4 py-4 border-b border-white/10">
  <div class="max-w-6xl mx-auto flex items-center justify-between">
    <h1 class="text-2xl font-bold">Lifetime Totals</h1>
    <a class="text-sm text-blue-300" href="./">← Back to Dashboard</a>
  </div>
</header>
<main class="max-w-6xl mx-auto px-4 py-6">
  <div id="status" class="text-white/70 mb-3">Loading…</div>
  <div class="card p-4">
    <div class="overflow-x-auto">
      <table class="w-full text-sm" id="lifeTable">
        <thead class="text-white/70">
          <tr><th class="text-left py-2">#</th><th class="text-left py-2">Name</th>
              <th class="text-left py-2">Tag</th><th class="text-left py-2">Sex</th>
              <th class="text-right py-2">Age</th><th class="text-right py-2">Weeks</th>
              <th class="text-right py-2">Total Steps</th></tr>
        </thead><tbody></tbody>
      </table>
    </div>
  </div>
</main>
<script>
(async () => {
  const base = location.pathname.replace(/site\\/lifetime\\.html$/, '');
  const res = await fetch(base + 'api/lifetime.php', { cache: 'no-store' });
  if (!res.ok) { document.getElementById('status').textContent = 'Failed to load'; return; }
  const json = await res.json();
  const rows = Array.isArray(json.lifetime) ? json.lifetime : [];
  document.getElementById('status').textContent = `${rows.length} users`;
  const tbody = document.querySelector('#lifeTable tbody');
  tbody.innerHTML = rows.map((r,i)=>`
    <tr class="border-t border-white/5">
      <td class="py-2 pr-2">${i+1}</td>
      <td class="py-2 pr-2">${(r.name||'').replace(/[&<>]/g,c=>({ '&':'&', '<':'<', '>':'>' }[c]))}</td>
      <td class="py-2 pr-2 text-white/60">${(r.tag||'').replace(/[&<>]/g,c=>({ '&':'&', '<':'<', '>':'>' }[c]))}</td>
      <td class="py-2 pr-2">${r.sex||''}</td>
      <td class="py-2 text-right">${r.age??''}</td>
      <td class="py-2 text-right">${r.weeks_with_data??0}</td>
      <td class="py-2 text-right">${(r.total_steps||0).toLocaleString()}</td>
    </tr>`).join('');
})();
</script>
</body></html>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/site/config.json =====

{
  "DAY_ORDER": ["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],
  "GOALS": {
    "DAILY_GOAL_10K": 10000,
    "DAILY_GOAL_15K": 15000,
    "DAILY_GOAL_2_5K": 2500,
    "DAILY_GOAL_1K": 1000
  },
  "THRESHOLDS": {
    "CHERYL_THRESHOLD": 20000,
    "THIRTY_K_THRESHOLD": 30000
  },
  "AWARD_LIMIT": 1,
  "DISPLAY_NAME_OVERRIDES": {
    "Tutu": "Tutu"
  },
  "NUDGES": [
    "Your shoes miss you.",
    "Take a lap and report back.",
    "Screenshot the counter tonight.",
    "Walk-n-talk with the fam, then log it.",
    "30 minutes. No debate."
  ],
  "LEVELS": {
    "K": 1500,
    "P": 1.6,
    "LABEL": "Level"
  },
  "CUSTOM_AWARD_LABELS": {
    "FIRST_30K": "Megan Award",
    "FIRST_20K": "Cheryl Award",
    "FIRST_15K": "Dean Award"
  },
  "LIFETIME_STEP_MILESTONES": [100000, 250000, 500000, 1000000],
  "LIFETIME_ATTENDANCE_MILESTONES": [25, 50, 100]
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/site/app.js =====

// Lightweight shim — real app moved to ES modules under site/app/
// index.html now loads "app/main.js" as a module. This file remains for legacy references.
if (typeof document !== 'undefined') {
  try {
    const s = document.createElement('script');
    s.type = 'module';
    s.src = 'app/main.js';
    s.defer = true;
    document.head.appendChild(s);
  } catch (e) {
    /* no-op */
  }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/site/app/normalize.js =====

import { DAY_ORDER, DISPLAY_NAME_OVERRIDES } from './config.js';
import { toNum } from './utils.js';

// Normalize incoming rows into canonical objects.
// Returns an array of rows like: { Name, Tag, Sex, Age, Monday..Saturday, "Total Steps" }
export function ingestRows(rows) {
  return (rows || []).map(r => {
    const out = {
      Name: DISPLAY_NAME_OVERRIDES[(r.name || "").trim()] || (r.name || "").trim(),
      Tag: (r.tag || "").toString().trim(),
      Sex: (r.sex || "").toString().trim(),
      Age: r.age != null ? Number(r.age) : null,
    };
    DAY_ORDER.forEach(d => out[d] = toNum(r[d.toLowerCase()]));
    out["Total Steps"] = DAY_ORDER.reduce((a,d)=> a + (Number.isFinite(out[d]) ? out[d] : 0), 0);
    return out;
  });
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/site/app/render.js =====

import { DAY_ORDER, THIRTY_K_THRESHOLD, CHERYL_THRESHOLD, DAILY_GOAL_15K, DAILY_GOAL_10K, DAILY_GOAL_2_5K, DAILY_GOAL_1K, AWARD_LIMIT, LEVEL_K, LEVEL_P, LEVEL_LABEL, APP_VERSION } from './config.js';
import { fmt, safe, pickNudge, setStatus } from './utils.js';
import { fetchFamilyWeekdayAverages } from './api.js';

// Module scope state: visibility, colors, persistence version
const VISIBLE_STORAGE_KEY = 'trajVisible_v1';
const visibleDatasets = new Map();
const colorByName = new Map();
const palette = [
  '#0ea5e9','#06b6d4','#34d399','#86efac','#facc15','#f97316','#fb7185','#f472b6',
  '#a78bfa','#60a5fa','#7dd3fc','#64748b','#fda4af','#fde68a','#bbf7d0','#e9d5ff'
];

let stackedChartRef = null;
let renderGen = 0;

function hydrateVisibility() {
  try {
    const raw = localStorage.getItem(VISIBLE_STORAGE_KEY);
    if (!raw) return;
    const obj = JSON.parse(raw);
    if (obj && typeof obj === 'object') {
      Object.entries(obj).forEach(([k,v]) => visibleDatasets.set(k, !!v));
    }
  } catch (e) { /* ignore */ }
}
function persistVisibility() {
  try {
    const obj = {};
    visibleDatasets.forEach((v,k) => { obj[k] = !!v; });
    localStorage.setItem(VISIBLE_STORAGE_KEY, JSON.stringify(obj));
  } catch (e) { /* ignore */ }
}
function getColorForName(name, idx = 0) {
  if (!name) return palette[0];
  if (colorByName.has(name)) return colorByName.get(name);
  const color = palette[idx % palette.length];
  colorByName.set(name, color);
  return color;
}

// hydrate on module load
hydrateVisibility();

// Render helpers expect callers to pass the computed stats and a mutable charts array
export function renderAll(stats, dataRows, charts) {
  // destroy existing charts
  charts.forEach(c => { try { c.destroy(); } catch(e){} });
  charts.length = 0;

  renderLeaderboard(stats.people);
  renderAwards(stats);
  renderCharts(stats.people, charts);
  renderCards(stats.people);
  renderMissing(stats.missing);

  // show app version in the footer
  try {
    document.querySelector('footer').textContent = `Built for the King family. Tutu approved. - v ${APP_VERSION}`;
  } catch (e) { /* ignore if footer missing */ }
}

export function renderLeaderboard(people) {
  const tbody = document.querySelector('#leaderboard tbody');
  const sorted = [...people].sort((a,b) => b.total - a.total);

  document.getElementById('leaderboardPosition').textContent = "";

  tbody.innerHTML = sorted.map((p, idx) => {
    const dash = '<span class="text-white/40">—</span>';
    const total = fmt(p.total) || dash;
    const avg = fmt(p.avg) || dash;
    const best = fmt(p.best) || dash;
    const thirtyK = p.thirtyK ?? dash;
    const cherylCount = p.cherylCount ?? dash;
    const fifteenK = p.fifteenK ?? dash;
    const tenK = p.tenK ?? dash;
    const two5K = p.two5K ?? dash;
    const oneK = p.oneK ?? dash;
    return `
    <tr class="border-t border-white/5">
      <td class="py-2 pr-2">${idx+1}</td>
      <td class="py-2 pr-2">${safe(p.name)}</td>
      <td class="py-2 text-right stat">${total}</td>
      <td class="py-2 text-right stat">${avg}</td>
      <td class="py-2 text-right stat">${best}</td>
      <td class="py-2 text-right stat">${thirtyK}</td>
      <td class="py-2 text-right stat">${cherylCount}</td>
      <td class="py-2 text-right stat">${fifteenK}</td>
      <td class="py-2 text-right stat">${tenK}</td>
      <td class="py-2 text-right stat">${two5K}</td>
      <td class="py-2 text-right stat">${oneK}</td>
    </tr>`;
  }).join("");

  document.querySelectorAll('#leaderboard thead th[data-sort]').forEach(th => {
    th.onclick = () => {
      const key = th.dataset.sort;
      const by = key === 'name' ? (a,b) => a.name.localeCompare(b.name) : (a,b)=> b.total - a.total;
      const arr = [...people].sort(by);
      tbody.innerHTML = arr.map((p, idx) => {
    return `<tr class="border-t border-white/5">
          <td class="py-2 pr-2">${idx+1}</td>
          <td class="py-2 pr-2">${safe(p.name)}</td>
          <td class="py-2 text-right stat">${fmt(p.total)}</td>
          <td class="py-2 text-right stat">${fmt(p.avg)}</td>
          <td class="py-2 text-right stat">${fmt(p.best)}</td>
          <td class="py-2 text-right stat">${p.thirtyK}</td>
          <td class="py-2 text-right stat">${p.cherylCount}</td>
          <td class="py-2 text-right stat">${p.fifteenK}</td>
          <td class="py-2 text-right stat">${p.tenK}</td>
          <td class="py-2 text-right stat">${p.two5K}</td>
          <td class="py-2 text-right stat">${p.oneK}</td>
        </tr>`;
      }).join('');
    };
  });
}

function allocateAwards() {
  const taken = new Map();
  function pick(list) {
    for (const p of list) {
      const id = p.name || p.person;
      const count = taken.get(id) || 0;
      if (count < AWARD_LIMIT) { // keep fair; AWARD_LIMIT configurable
        taken.set(id, count + 1);
        return p;
      }
    }
    return null;
  }
  return { pick, taken };
}

export function renderAwards(payload) {
  const { leader, highestSingle, biggestJump, mostConsistent, earlyMomentum, closer } = payload;
  const el = document.getElementById('awardsList');
  const items = [];
  const A = allocateAwards();

  function stat(value, fmtFn = v => fmt(v)) {
    return `<span class="stat">${fmtFn(value)}</span>`;
  }

  function label(code, fallback) {
    try {
      const txt = (typeof CUSTOM_AWARD_LABELS !== 'undefined' && CUSTOM_AWARD_LABELS[code]) ? CUSTOM_AWARD_LABELS[code] : null;
      return txt || fallback || code;
    } catch (e) {
      return fallback || code;
    }
  }

  if (leader) items.push(`<li><span class="accent font-semibold">Overall Leader:</span> ${safe(leader.name)} with ${stat(leader.total)} steps.</li>`);
  if (highestSingle) items.push(`<li><span class="accent-2 font-semibold">Highest Single Day:</span> ${safe(highestSingle.person)} with ${stat(highestSingle.value)} on ${highestSingle.day}.</li>`);

  const t30 = A.pick(payload.most30kList.filter(p=>p.thirtyK>0));
  if (t30) items.push(`<li><span class="text-emerald-300 font-semibold">Ultra Day Hunter:</span> ${safe(t30.name)} with ${stat(t30.thirtyK, v=>v)} day(s) ≥ 30k.</li>`);

  const t20 = A.pick(payload.most20kList.filter(p=>p.cherylCount>0));
  if (t20) items.push(`<li><span class="text-yellow-300 font-semibold">Cheryl Champ:</span> ${safe(t20.name)} with ${stat(t20.cherylCount, v=>v)} day(s) ≥ 20k.</li>`);

  const t15 = A.pick(payload.most15kList.filter(p=>p.fifteenK>0));
  if (t15) items.push(`<li><span class="text-lime-300 font-semibold">15k Achiever:</span> ${safe(t15.name)} with ${stat(t15.fifteenK, v=>v)} day(s) ≥ 15k.</li>`);

  const t10 = A.pick(payload.most10kList.filter(p=>p.tenK>0));
  if (t10) items.push(`<li><span class="text-green-300 font-semibold">Ten-K Streaker:</span> ${safe(t10.name)} with ${stat(t10.tenK, v=>v)} day(s) ≥ 10k.</li>`);

  const t25 = A.pick(payload.most2_5kList.filter(p=>p.two5K>0));
  if (t25) items.push(`<li><span class="text-cyan-300 font-semibold">Showing Up Award:</span> ${safe(t25.name)} with ${stat(t25.two5K, v=>v)} day(s) ≥ 2.5k.</li>`);

  const t1k = A.pick(payload.most1kList.filter(p=>p.oneK>0));
  if (t1k) items.push(`<li><span class="text-blue-300 font-semibold">Participation Ribbon:</span> ${safe(t1k.name)} with ${stat(t1k.oneK, v=>v)} day(s) ≥ 1k.</li>`);

  if (biggestJump && biggestJump.amount > 0 && A.pick([biggestJump])) {
    items.push(`<li><span class="text-rose-300 font-semibold">Biggest Jump:</span> ${safe(biggestJump.person)} jumped ${stat(biggestJump.amount)} from ${biggestJump.from} to ${biggestJump.to}.</li>`);
  }
  if (mostConsistent && A.pick([mostConsistent])) {
    items.push(`<li><span class="text-purple-300 font-semibold">Consistency Star:</span> ${safe(mostConsistent.name)} lowest day-to-day variation (${stat(mostConsistent.stddev)}).</li>`);
  }
  if (earlyMomentum && A.pick([earlyMomentum])) {
    items.push(`<li><span class="text-orange-300 font-semibold">Early Momentum:</span> ${safe(earlyMomentum.name)} strongest Mon–Wed (${stat(earlyMomentum.firstHalfSum)}).</li>`);
  }
  if (closer && A.pick([closer])) {
    items.push(`<li><span class="text-pink-300 font-semibold">Closer Award:</span> ${safe(closer.name)} strongest Thu–Sat (${stat(closer.secondHalfSum)}).</li>`);
  }

  const imp = A.pick(payload.mostImprovedList.filter(p=>p.firstHalfSum>0 || p.secondHalfSum>0));
  if (imp) items.push(`<li><span class="text-orange-300 font-semibold">Most Improved:</span> ${safe(imp.name)} ${stat(Math.round(imp.pctImprovement*100), v=>v + '%')} improvement Thu–Sat vs Mon–Wed.</li>`);

  const med = A.pick(payload.medianMasterList.filter(p=>p.medianCapped>0));
  if (med) items.push(`<li><span class="text-fuchsia-300 font-semibold">Median Master:</span> ${safe(med.name)} capped median ${stat(med.medianCapped)}.</li>`);

  const rep = A.pick(payload.reportingChampList);
  if (rep) items.push(`<li><span class="text-teal-300 font-semibold">Reporting Champ:</span> ${safe(rep.name)} fewest missing check-ins (${stat(rep.missingCount, v=>v)}).</li>`);

  const stk = A.pick(payload.streakBossList.filter(p=>p.longestStreak1k>0));
  if (stk) items.push(`<li><span class="text-stone-300 font-semibold">Streak Boss:</span> ${safe(stk.name)} longest ≥1k streak (${stat(stk.longestStreak1k, v=>v)}).</li>`);

  // New awards: First to Report per day
  if (Array.isArray(payload.firstToReportPerDay)) {
    payload.firstToReportPerDay.forEach(fr => {
      if (!fr) return;
      // allocate fairly
      const picked = A.pick([{ name: fr.name }]);
      if (picked) {
        const day = DAY_ORDER[fr.dayIdx] || `Day ${fr.dayIdx}`;
        items.push(`<li><span class="accent font-semibold">First to Report:</span> ${safe(fr.name)} reported ${stat(fr.value)} first on ${day}.</li>`);
      }
    });
  }

  // Day level-ups: x2+ then x1
  if (Array.isArray(payload.dayLevelUps2List) && payload.dayLevelUps2List.length) {
    const d2 = A.pick(payload.dayLevelUps2List.map(e=>({ name: e.name, gained: e.gained, dayIdx: e.dayIdx })));
    if (d2) {
      items.push(`<li><span class="text-amber-300 font-semibold">Day Level-Up x2+:</span> ${safe(d2.name)} gained ${d2.gained} level(s) on ${DAY_ORDER[d2.dayIdx]}.</li>`);
    }
  }
  if (Array.isArray(payload.dayLevelUps1List) && payload.dayLevelUps1List.length) {
    const d1 = A.pick(payload.dayLevelUps1List.map(e=>({ name: e.name, gained: e.gained, dayIdx: e.dayIdx })));
    if (d1) {
      items.push(`<li><span class="text-amber-200 font-semibold">Day Level-Up x1:</span> ${safe(d1.name)} gained ${d1.gained} level(s) on ${DAY_ORDER[d1.dayIdx]}.</li>`);
    }
  }

  // Week level-up
  if (Array.isArray(payload.weekLevelUpsList) && payload.weekLevelUpsList.length) {
    const w = A.pick(payload.weekLevelUpsList.map(e=>({ name: e.name, gained: e.gained })));
    if (w) {
      const tier = w.gained >= 3 ? 'x3' : (w.gained >= 2 ? 'x2' : 'x1');
      items.push(`<li><span class="text-sky-300 font-semibold">Week Level-Up ${tier}:</span> ${safe(w.name)} gained ${w.gained} level(s) this week.</li>`);
    }
  }

  // Lifetime step clubs
  if (Array.isArray(payload.lifetimeStepClubs) && payload.lifetimeStepClubs.length) {
    payload.lifetimeStepClubs.forEach(club => {
      const picked = A.pick([{ name: club.name }]);
      if (picked) {
        items.push(`<li><span class="text-emerald-200 font-semibold">Lifetime ${fmt(club.mark)} Club:</span> ${safe(club.name)} crossed ${fmt(club.mark)} total steps.</li>`);
      }
    });
  }

  // Lifetime level milestones
  if (Array.isArray(payload.lifetimeLevelMilestones) && payload.lifetimeLevelMilestones.length) {
    payload.lifetimeLevelMilestones.forEach(lm => {
      const picked = A.pick([{ name: lm.name }]);
      if (picked) {
        items.push(`<li><span class="text-rose-200 font-semibold">Lifetime Level ${lm.level}:</span> ${safe(lm.name)} reached Level ${lm.level}.</li>`);
      }
    });
  }

  // First threshold awards (custom labels)
  if (Array.isArray(payload.firstThresholds) && payload.firstThresholds.length) {
    payload.firstThresholds.forEach(t => {
      const picked = A.pick([{ name: t.name }]);
      if (picked) {
        const lbl = label(t.code, `First ${t.value} Day`);
        const day = DAY_ORDER[t.dayIdx] || `Day ${t.dayIdx}`;
        items.push(`<li><span class="text-yellow-200 font-semibold">${safe(lbl)}:</span> ${safe(t.name)} first reached ${fmt(t.value)} on ${day}.</li>`);
      }
    });
  }

  el.innerHTML = items.length ? items.join('') : '<li>No awards yet. Add some steps.</li>';
}

export function renderCharts(people, charts) {
  const labels = DAY_ORDER;
  const gen = ++renderGen;
  const perDayCanvas = document.getElementById('perDayChart');
  const stackedCanvas = document.getElementById('stackedTotalChart');
  const linesCanvas = document.getElementById('linesChart');
  const perDayCtx = perDayCanvas.getContext('2d');
  const stackedCtx = stackedCanvas.getContext('2d');
  const linesCtx = linesCanvas.getContext('2d');

  // Helper: attach fullscreen button to the chart's card and ensure chart resizes on fullscreen changes.
  function attachFullscreenButton(canvasEl, chartInstance) {
    if (!canvasEl) return;
    const card = canvasEl.closest('.card') || canvasEl.parentElement;
    if (!card) return;

    // ensure card positioned for absolute placement
    card.classList.add('relative');

    // avoid adding duplicate buttons
    if (card.querySelector('.chart-fullscreen-btn')) return;

    const btn = document.createElement('button');
    btn.type = 'button';
    btn.title = 'Toggle fullscreen';
    btn.setAttribute('aria-label', 'Toggle fullscreen');
    btn.innerHTML = '⤢';
    btn.className = 'chart-fullscreen-btn absolute top-2 right-2 text-xs px-2 py-1 bg-white/5 rounded hover:bg-white/10';

    btn.onclick = async (ev) => {
      ev.stopPropagation();
      try {
        if (document.fullscreenElement) {
          await document.exitFullscreen();
        } else {
          await (card.requestFullscreen ? card.requestFullscreen() : card.webkitRequestFullscreen && card.webkitRequestFullscreen());
        }
        // let layout settle and then force chart resize
        requestAnimationFrame(() => {
          try { chartInstance.resize(); } catch (e) { /* ignore */ }
        });
      } catch (e) {
        console.error('Fullscreen toggle failed', e);
      }
    };

    card.appendChild(btn);
  }

  // Ensure all charts are resized when fullscreen changes (enter or exit)
  function onGlobalFullscreenChange() {
    charts.forEach(c => { try { c.resize(); } catch (e) {} });
  }
  // add listener once
  if (!document._chartsFullscreenHandlerAdded) {
    document.addEventListener('fullscreenchange', onGlobalFullscreenChange);
    document._chartsFullscreenHandlerAdded = true;
  }

  // Build deterministic colors, merge visibility state, and prepare datasets
  // Ensure visibility map contains all names (preserve prior values)
  people.forEach((p) => {
    if (!visibleDatasets.has(p.name)) visibleDatasets.set(p.name, true);
  });

  // helper: small rgba for bar backgrounds
  const toRgba = (hex, alpha = 0.12) => {
    // simple hex -> rgba converter for #rrggbb
    try {
      const h = hex.replace('#','');
      const r = parseInt(h.substring(0,2),16);
      const g = parseInt(h.substring(2,4),16);
      const b = parseInt(h.substring(4,6),16);
      return `rgba(${r},${g},${b},${alpha})`;
    } catch(e) { return hex; }
  };

  const datasets = people.map((p, i) => {
    const name = p.name;
    const color = getColorForName(name, i);
    return {
      label: name,
      data: p.days.map(v => Number.isFinite(v) ? v : 0),
      borderWidth: 1,
      borderColor: color,
      backgroundColor: toRgba(color, 0.12),
      // bar stacking will still work; visibility controlled by dataset.hidden
      hidden: visibleDatasets.has(name) ? !visibleDatasets.get(name) : false
    };
  });

  // create per-day stacked bar chart
  const perDayChart = new Chart(perDayCtx, {
    type: 'bar',
    data: { labels, datasets },
    options: { responsive: true, scales: { y: { beginAtZero: true } }, plugins: { legend: { display: false } } }
  });
  charts.push(perDayChart);
  attachFullscreenButton(perDayCanvas, perDayChart);

  // family totals chart – build once with bars, then overlay line when data arrives
  const familyTotals = labels.map((_, idx) =>
    people.reduce((sum, p) => sum + (Number.isFinite(p.days[idx]) ? p.days[idx] : 0), 0)
  );

  // destroy any prior instance deterministically
  if (stackedChartRef) { try { stackedChartRef.destroy(); } catch (e){} }
  const familyColor = getColorForName('Family Total', 0);

  stackedChartRef = new Chart(stackedCtx, {
    data: {
      labels,
      datasets: [{
        type: 'bar',
        label: 'Family Total',
        data: familyTotals,
        borderWidth: 1,
        borderColor: familyColor,
        backgroundColor: toRgba(familyColor, 0.12),
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: true,
      scales: { y: { beginAtZero: true, ticks: { callback: v => v.toLocaleString() } } },
      plugins: {
        legend: { display: true },
        tooltip: { callbacks: { label: ctx => {
          const v = (ctx.parsed && ctx.parsed.y != null) ? ctx.parsed.y : ctx.raw;
          return `${ctx.dataset.label}: ${Math.round(v).toLocaleString()}`;
        } } }
      },
      spanGaps: true,
      animation: { duration: 600 }
    }
  });
  charts.push(stackedChartRef);
  attachFullscreenButton(stackedCanvas, stackedChartRef);

  // fetch and overlay averages; ignore stale responses
  fetchFamilyWeekdayAverages()
    .then(({ averages }) => {
      if (gen !== renderGen || !Array.isArray(averages) || averages.length !== labels.length || !stackedChartRef) return;

      const lineColor = getColorForName('Historical Avg', 1);
      const lineDs = {
        type: 'line',
        label: 'Historical Avg',
        data: averages,
        borderWidth: 2,
        borderDash: [6,3],
        pointRadius: 0,
        fill: false,
        borderColor: lineColor,
      };

      const i = stackedChartRef.data.datasets.findIndex(d => d.label === 'Historical Avg');
      if (i >= 0) stackedChartRef.data.datasets[i] = lineDs;
      else stackedChartRef.data.datasets.push(lineDs);

      stackedChartRef.update();
    })
    .catch(() => { /* no-op */ });

  // line trajectories - use deterministic colors, visibility map, spanGaps, devicePixelRatio and animation guard
  const lineDatasets = people.map((p, i) => {
    const name = p.name;
    const color = getColorForName(name, i);
    return {
      label: name,
      data: p.days.map(v => Number.isFinite(v) ? v : null),
      spanGaps: true,
      borderWidth: 2,
      borderColor: color,
      backgroundColor: toRgba(color, 0.08),
      hidden: visibleDatasets.has(name) ? !visibleDatasets.get(name) : false,
      tension: 0.15,
    };
  });

  const animationsDisabled = lineDatasets.length > 18;
  const linesChart = new Chart(linesCtx, {
    type: 'line',
    data: { labels, datasets: lineDatasets },
    options: {
      responsive: true,
      devicePixelRatio: Math.min(window.devicePixelRatio || 1, 2),
      animation: animationsDisabled ? false : { duration: 600 },
      plugins: { legend: { display: false } },
      scales: { y: { beginAtZero: true } }
    }
  });
  charts.push(linesChart);
  attachFullscreenButton(linesCanvas, linesChart);

  // ensure crisp rendering on high-DPI and force a resize once mounted
  try { linesChart.resize(); } catch(e) {}
  
  // Build or inject wrapper + legend UI adjacent to the lines canvas
  (function buildTrajLegend() {
    if (!linesCanvas) return;

    // Find or create wrapper
    let wrapper = document.getElementById('trajWrapper');
    if (!wrapper) {
      wrapper = document.createElement('div');
      wrapper.id = 'trajWrapper';
      wrapper.className = 'flex flex-col md:flex-row gap-4';
      linesCanvas.parentElement.insertBefore(wrapper, linesCanvas);
      wrapper.appendChild(linesCanvas);
    } else {
      // ensure canvas is a direct child (avoid duplicates)
      if (linesCanvas.parentElement !== wrapper) wrapper.appendChild(linesCanvas);
    }

    // legend container
    let legendContainer = document.getElementById('linesLegendContainer');
    if (!legendContainer) {
      legendContainer = document.createElement('div');
      legendContainer.id = 'linesLegendContainer';
      legendContainer.className = 'w-full md:w-56';
      wrapper.appendChild(legendContainer);
    }

    // toggle-all button area
    let toggleWrap = legendContainer.querySelector('.lines-toggle-wrap');
    if (!toggleWrap) {
      toggleWrap = document.createElement('div');
      toggleWrap.className = 'px-2 py-1 lines-toggle-wrap';
      const btn = document.createElement('button');
      btn.type = 'button';
      btn.id = 'linesToggleAll';
      btn.className = 'w-full md:w-auto rounded-lg px-3 py-2 text-sm bg-white/10 focus:outline-none focus:ring-2';
      btn.setAttribute('aria-pressed', 'false');
      btn.textContent = 'Hide All';
      toggleWrap.appendChild(btn);

      // sr-only status
      const status = document.createElement('span');
      status.id = 'trajStatus';
      status.className = 'sr-only';
      legendContainer.appendChild(status);

      legendContainer.appendChild(toggleWrap);
    }

    // legend strip
    let legendEl = document.getElementById('linesLegend');
    if (!legendEl) {
      legendEl = document.createElement('div');
      legendEl.id = 'linesLegend';
      legendEl.className = 'flex md:flex-col overflow-x-auto gap-2 snap-x snap-mandatory p-2 rounded-lg bg-[#071133] text-white';
      legendEl.style.touchAction = 'pan-x';
      legendContainer.appendChild(legendEl);
    } else {
      // preserve container but clear children for rebuild
      legendEl.replaceChildren();
    }

    // helper to update Toggle All label and status
    const toggleBtn = document.getElementById('linesToggleAll');
    const statusEl = document.getElementById('trajStatus');
    function updateToggleAllLabel() {
      const anyVisible = Array.from(visibleDatasets.values()).some(Boolean);
      toggleBtn.textContent = anyVisible ? 'Hide All' : 'Show All';
      toggleBtn.setAttribute('aria-pressed', anyVisible ? 'true' : 'false');
      if (statusEl) statusEl.textContent = anyVisible ? 'Some lines are visible' : 'All lines hidden';
    }

    // create legend buttons for each dataset (use chart data to stay in sync)
    function createLegendButtons() {
      const datasetsRef = linesChart.data && linesChart.data.datasets ? linesChart.data.datasets : [];
      datasetsRef.forEach((ds, idx) => {
        const name = ds.label || `Series ${idx+1}`;
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.className = 'cursor-pointer rounded-lg px-2 py-1 h-11 flex items-center gap-2 shrink-0 snap-center focus:outline-none focus:ring-2';
        btn.setAttribute('data-name', name);
        btn.setAttribute('title', `Toggle ${name}`);
        btn.setAttribute('aria-label', `Toggle ${name} in Trajectories`);
        const pressed = !(ds.hidden === true);
        btn.setAttribute('aria-pressed', pressed ? 'true' : 'false');
        if (!pressed) btn.classList.add('opacity-50');

        const dot = document.createElement('span');
        dot.className = 'w-3 h-3 rounded-full';
        dot.style.background = ds.borderColor || getColorForName(name, idx);
        btn.appendChild(dot);

        const label = document.createElement('span');
        label.className = 'truncate';
        label.textContent = name;
        btn.appendChild(label);

        // Interaction state for touch vs scroll and long-press
        let touchStartX = 0;
        let touchMoveX = 0;
        let pressTimer = null;
        const LONG_PRESS_MS = 500;

        function clearPressTimer() {
          if (pressTimer) { clearTimeout(pressTimer); pressTimer = null; }
        }

        function setPressedState(isPressed) {
          btn.setAttribute('aria-pressed', isPressed ? 'true' : 'false');
          if (isPressed) btn.classList.remove('opacity-50'); else btn.classList.add('opacity-50');
        }

        // toggle single
        function toggleSingle() {
          const name = btn.getAttribute('data-name');
          const current = !!visibleDatasets.get(name);
          visibleDatasets.set(name, !current);
          persistVisibility();

          // find dataset index in chart by label
          const di = linesChart.data.datasets.findIndex(d => d.label === name);
          if (di >= 0) {
            linesChart.data.datasets[di].hidden = !!(visibleDatasets.get(name) === false);
          }
          // update button state
          setPressedState(!current);
          updateToggleAllLabel();
          try { linesChart.update(animationsDisabled ? undefined : { duration: 600 }); } catch(e){ try{ linesChart.update(); }catch(e){} }
        }

        // solo: hide all others, show this one
        function solo() {
          const name = btn.getAttribute('data-name');
          linesChart.data.datasets.forEach(d => {
            const n = d.label;
            const show = (n === name);
            visibleDatasets.set(n, !!show);
            d.hidden = !show;
          });
          persistVisibility();
          // refresh buttons states after change
          Array.from(legendEl.children).forEach(c => {
            const n = c.getAttribute('data-name');
            setButtonState(c, !!visibleDatasets.get(n));
          });
          updateToggleAllLabel();
          try { linesChart.update(animationsDisabled ? undefined : { duration: 600 }); } catch(e){ try{ linesChart.update(); }catch(e){} }
        }

        function setButtonState(buttonEl, isPressed) {
          buttonEl.setAttribute('aria-pressed', isPressed ? 'true' : 'false');
          if (isPressed) buttonEl.classList.remove('opacity-50'); else buttonEl.classList.add('opacity-50');
        }

        // Mouse handlers (desktop)
        btn.addEventListener('mousedown', (ev) => {
          ev.preventDefault();
          pressTimer = setTimeout(() => {
            // long press via mouse -> solo
            solo();
          }, LONG_PRESS_MS);
        });
        btn.addEventListener('mouseup', (ev) => {
          clearPressTimer();
        });
        btn.addEventListener('mouseleave', (ev) => {
          clearPressTimer();
        });

        // Click handler (short tap/click)
        btn.addEventListener('click', (ev) => {
          ev.preventDefault();
          // if we detected movement, ignore
          if (Math.abs(touchMoveX) > 8) { touchMoveX = 0; return; }
          toggleSingle();
        });

        // Touch handlers for mobile taps vs scroll and long-press
        btn.addEventListener('touchstart', (ev) => {
          const t = ev.touches && ev.touches[0];
          touchStartX = t ? t.clientX : 0;
          touchMoveX = 0;
          pressTimer = setTimeout(() => { solo(); }, LONG_PRESS_MS);
        }, { passive: true });
        btn.addEventListener('touchmove', (ev) => {
          const t = ev.touches && ev.touches[0];
          const cx = t ? t.clientX : 0;
          touchMoveX = cx - touchStartX;
          if (Math.abs(touchMoveX) > 8) clearPressTimer();
        }, { passive: true });
        btn.addEventListener('touchend', (ev) => {
          clearPressTimer();
          // if significant move then it was a scroll, ignore
          if (Math.abs(touchMoveX) > 8) { touchMoveX = 0; return; }
          // otherwise treat as tap (click already handled on click event)
        });

        legendEl.appendChild(btn);
      });
    }

    // helper to update button states given visibleDatasets
    function refreshLegendButtons() {
      Array.from(legendEl.children).forEach(btn => {
        const name = btn.getAttribute('data-name');
        const pressed = !!visibleDatasets.get(name);
        btn.setAttribute('aria-pressed', pressed ? 'true' : 'false');
        if (pressed) btn.classList.remove('opacity-50'); else btn.classList.add('opacity-50');
      });
    }

    // Toggle All implementation
    toggleBtn.onclick = (ev) => {
      ev.preventDefault();
      const anyVisible = Array.from(visibleDatasets.values()).some(Boolean);
      const setTo = !anyVisible ? true : false;
      linesChart.data.datasets.forEach(d => {
        visibleDatasets.set(d.label, setTo);
        d.hidden = !setTo;
      });
      persistVisibility();
      refreshLegendButtons();
      updateToggleAllLabel();
      try { linesChart.update(animationsDisabled ? undefined : { duration: 600 }); } catch(e){ try{ linesChart.update(); }catch(e){} }
    };

    createLegendButtons();
    updateToggleAllLabel();
  })();
}

export function renderCards(people) {
  const container = document.getElementById('cards');
  container.innerHTML = people.map(p => {
    const badges = [];
    p.days.forEach((v, idx) => {
      if (!Number.isFinite(v)) return;
      const day = DAY_ORDER[idx];
      if (v >= THIRTY_K_THRESHOLD) badges.push(`<span class="chip bg-emerald-500/15 text-emerald-300" title="${day}">30k</span>`);
      if (v >= CHERYL_THRESHOLD)   badges.push(`<span class="chip bg-yellow-500/15 text-yellow-300" title="${day}">Cheryl</span>`);
      if (v >= DAILY_GOAL_15K)     badges.push(`<span class="chip bg-lime-500/15 text-lime-300" title="${day}">15k</span>`);
      if (v >= DAILY_GOAL_10K)     badges.push(`<span class="chip bg-green-500/15 text-green-300" title="${day}">10k</span>`);
      if (v >= DAILY_GOAL_2_5K)    badges.push(`<span class="chip bg-cyan-500/15 text-cyan-300" title="${day}">2.5k</span>`);
      if (v >= DAILY_GOAL_1K)      badges.push(`<span class="chip bg-blue-500/15 text-blue-300" title="${day}">1k</span>`);
    });
    const tag = p.tag ? `<span class="ml-2 text-xs text-white/60">(${safe(p.tag)})</span>` : '';
    const levelRow = (Number.isFinite(p.lifetimeTotal) && p.lifetimeTotal > 0)
      ? (() => {
          // compute progress percent for current level using same formula as levels.js
          const curr = Math.round(LEVEL_K * Math.pow(p.level, LEVEL_P));
          const next = Math.round(LEVEL_K * Math.pow(p.level + 1, LEVEL_P));
          const size = Math.max(1, next - curr);
          const stepsLeft = Math.max(0, Number(p.toNext) || 0);
          const progress = Math.max(0, Math.min(100, Math.round((size - stepsLeft) / size * 100)));

          // derive fill color from first badge text color (e.g. "text-emerald-300" -> "bg-emerald-300")
          const badgeTextMatch = badges.join(' ').match(/text-([a-z0-9-]+)/);
          const fillClass = badgeTextMatch ? 'bg-' + badgeTextMatch[1] : 'bg-sky-400';

          return `<div class="pt-2 border-t border-white/10 text-xs">
            <div class="flex items-center justify-between">
              <div><span class="text-white/60">${safe(LEVEL_LABEL)}:</span> <span class="font-semibold ml-1">${p.level}</span></div>
              <div class="text-white/60">${fmt(stepsLeft)} / ${fmt(size)}</div>
            </div>
            <div class="mt-1 h-[2px] w-full bg-white/5 rounded overflow-hidden">
              <div class="${fillClass} h-[2px]" style="width: ${progress}%;"></div>
            </div>
          </div>`;
        })()
      : '';

    return `
    <article class="card p-4 space-y-2">
      <div class="flex items-center justify-between">
        <h4 class="text-lg font-bold">${safe(p.name)} ${tag}</h4>
        <div class="flex flex-wrap gap-1">${badges.join('')}</div>
      </div>
      <div class="grid grid-cols-3 gap-2 text-center">
        <div class="bg-white/5 rounded-lg p-2">
          <div class="text-xs text-white/60">Total</div>
          <div class="text-xl font-extrabold stat">${fmt(p.total)}</div>
        </div>
        <div class="bg-white/5 rounded-lg p-2">
          <div class="text-xs text-white/60">Average</div>
          <div class="text-xl font-extrabold stat">${fmt(p.avg)}</div>
        </div>
        <div class="bg-white/5 rounded-lg p-2">
          <div class="text-xs text-white/60">Best Day</div>
          <div class="text-xl font-extrabold stat">${fmt(p.best)}</div>
        </div>
      </div>
      <div class="text-xs text-white/70">
        ${DAY_ORDER.map((d, i) => {
          const v = p.days[i];
          const val = Number.isFinite(v) ? fmt(v) : '<span class="text-white/40">—</span>';
          return `<span class="mr-2">${d.slice(0,3)}: <span class="stat">${val}</span></span>`;
        }).join(' ')}
      </div>
      <div class="text-[11px] text-white/50">
        lifetime: <span class="stat">${fmt(p.lifetimeTotal)}</span>
        &nbsp; avg: <span class="stat">${fmt(p.lifetimeAvg)}</span>
        &nbsp; best: <span class="stat">${p.lifetimeBest ? fmt(p.lifetimeBest) : '<span class="text-white/40">—</span>'}</span>
      </div>
      ${levelRow}
    </article>`;
  }).join('');
}

export function renderMissing(missing) {
  const el = document.getElementById('missingList');
  const items = [];
  missing.forEach(m => {
    if (m.blanks.length) {
      const nudge = pickNudge();
      items.push(
        `<li class="flex items-start justify-between gap-2">
          <div>
            <span class="font-semibold">${safe(m.name)}</span> missing: ${m.blanks.join(', ')}.
            <span class="text-white/60 italic ml-1">Nudge: ${safe(nudge)}</span>
          </div>
        </li>`
      );
    }
  });
  el.innerHTML = items.length ? items.join('') : '<li>Everyone has reported for all days so far.</li>';
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/site/app/config.js =====

export let DAY_ORDER = ["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
export let DAILY_GOAL_10K = 10000;
export let APP_VERSION = "0.1.3";
export let DAILY_GOAL_15K = 15000;
export let DAILY_GOAL_2_5K = 2500;
export let DAILY_GOAL_1K = 1000;
export let CHERYL_THRESHOLD = 20000;
export let THIRTY_K_THRESHOLD = 30000;
export let AWARD_LIMIT = 2;
export let DISPLAY_NAME_OVERRIDES = { "Tutu": "Tutu" };

export let LEVEL_K = 1500;
export let LEVEL_P = 1.6;
export let LEVEL_LABEL = "Level";

export let NUDGES = [
  "Your shoes miss you.",
  "Take a lap and report back.",
  "Screenshot the counter tonight.",
  "Walk-n-talk with the fam, then log it.",
  "30 minutes. No debate."
];

export let CUSTOM_AWARD_LABELS = {};
export let LIFETIME_STEP_MILESTONES = [100000,250000,500000,1000000];
export let LIFETIME_ATTENDANCE_MILESTONES = [25,50,100];

// Compute base URL like: /dev/html/walk/
export const BASE = (() => {
  const m = location.pathname.match(/^(.*\/)site\/(?:$|)/);
  return m ? m[1] : '/';
})();

export async function loadConfig() {
  try {
    const res = await fetch(`${BASE}site/config.json`, { cache: "no-store" });
    if (!res.ok) return;
    const cfg = await res.json();
    DAY_ORDER = cfg.DAY_ORDER || DAY_ORDER;
    DAILY_GOAL_10K = cfg.GOALS?.DAILY_GOAL_10K ?? DAILY_GOAL_10K;
    DAILY_GOAL_15K = cfg.GOALS?.DAILY_GOAL_15K ?? DAILY_GOAL_15K;
    DAILY_GOAL_2_5K = cfg.GOALS?.DAILY_GOAL_2_5K ?? DAILY_GOAL_2_5K;
    DAILY_GOAL_1K = cfg.GOALS?.DAILY_GOAL_1K ?? DAILY_GOAL_1K;
    CHERYL_THRESHOLD = cfg.THRESHOLDS?.CHERYL_THRESHOLD ?? CHERYL_THRESHOLD;
    THIRTY_K_THRESHOLD = cfg.THRESHOLDS?.THIRTY_K_THRESHOLD ?? THIRTY_K_THRESHOLD;
    // allow overriding how many awards a single person can win
    AWARD_LIMIT = Number.isFinite(Number(cfg.AWARD_LIMIT)) ? Number(cfg.AWARD_LIMIT) : AWARD_LIMIT;
    DISPLAY_NAME_OVERRIDES = cfg.DISPLAY_NAME_OVERRIDES || DISPLAY_NAME_OVERRIDES;
    NUDGES = cfg.NUDGES || NUDGES;
    APP_VERSION = cfg.APP_VERSION || APP_VERSION;
    CUSTOM_AWARD_LABELS = cfg.CUSTOM_AWARD_LABELS || CUSTOM_AWARD_LABELS;
    LIFETIME_STEP_MILESTONES = cfg.LIFETIME_STEP_MILESTONES || LIFETIME_STEP_MILESTONES;
    LIFETIME_ATTENDANCE_MILESTONES = cfg.LIFETIME_ATTENDANCE_MILESTONES || LIFETIME_ATTENDANCE_MILESTONES;
  LEVEL_K = cfg.LEVELS?.K ?? LEVEL_K;
  LEVEL_P = cfg.LEVELS?.P ?? LEVEL_P;
  LEVEL_LABEL = cfg.LEVELS?.LABEL ?? LEVEL_LABEL;
  } catch (e) {
    console.warn('Failed to load config, using defaults', e);
  }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/site/app/main.js =====

import { loadConfig } from './config.js';
import { fetchWeeks, fetchWeekData, fetchLifetime } from './api.js';
import { ingestRows } from './normalize.js';
import { computeStats } from './stats.js';
import { renderAll } from './render.js';
import { setStatus, safe } from './utils.js';

let charts = [];
let globalData = [];
let currentWeek = null;
let weeksList = [];
let lifetimeMap = new Map();

export async function buildWeekSelector() {
  weeksList = await fetchWeeks();
  const sel = document.getElementById('weekSelector');
  sel.innerHTML = weeksList.map(w => {
    const label = w.label || w.week;
    return `<option value="${safe(w.week)}">${safe(label)} ${w.finalized ? '— finalized' : ''}</option>`;
  }).join('');
  sel.onchange = () => loadWeek(sel.value);
  if (weeksList.length) {
    currentWeek = weeksList[0].week;
    sel.value = currentWeek;
    await loadWeek(currentWeek);
  } else {
    setStatus('No weeks yet. Ask admin to create one.', 'warn');
  }
}

export async function loadWeek(week) {
  setStatus(`Loading ${week}…`);
  const data = await fetchWeekData(week);
  currentWeek = data.week;
  globalData = ingestRows(data.rows || []);
  const stats = computeStats(globalData, lifetimeMap, data.todayIdx, data);
  renderAll(stats, globalData, charts);
  setStatus(`Loaded ${data.label || data.week} (${data.source})`, 'ok');
}

window.addEventListener('DOMContentLoaded', async () => {
  try {
    await loadConfig();
    try { lifetimeMap = await fetchLifetime(); } catch (e) { lifetimeMap = new Map(); }
    await buildWeekSelector();
  } catch (e) {
    console.error(e);
    setStatus('Failed to load weeks', 'err');
  }
});


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/site/app/levels.js =====

import { LEVEL_K, LEVEL_P } from './config.js';

function threshold(n, K = LEVEL_K, P = LEVEL_P) {
  if (n <= 0) return 0;
  return Math.round(K * Math.pow(n, P));
}

// Fast approximate inverse then correct by local search.
// Works for all totals, grows to infinity.
export function computeLevel(total, K = LEVEL_K, P = LEVEL_P) {
  const t = Math.max(0, Number(total) || 0);
  if (t <= 0) return { level: 0, toNext: threshold(1, K, P) };

  // initial guess
  let n = Math.max(1, Math.floor(Math.pow(t / K, 1 / P)));

  // adjust down or up to find correct n with threshold(n) <= t < threshold(n+1)
  while (n > 0 && threshold(n, K, P) > t) n--;
  while (threshold(n + 1, K, P) <= t) n++;

  const next = threshold(n + 1, K, P);
  return { level: n, toNext: Math.max(0, next - t) };
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/site/app/utils.js =====

import { NUDGES } from './config.js';

export function setStatus(msg, type = "info") {
  const el = document.getElementById("loadStatus");
  if (!el) return;
  el.textContent = msg;
  el.className = "badge";
  // remove any prior state classes
  el.classList.remove("bg-green-500/10","text-green-300","bg-yellow-500/10","text-yellow-300","bg-rose-500/10","text-rose-300");
  if (type === "ok") el.classList.add("bg-green-500/10","text-green-300");
  if (type === "warn") el.classList.add("bg-yellow-500/10","text-yellow-300");
  if (type === "err") el.classList.add("bg-rose-500/10","text-rose-300");
}

export function fmt(n) { return Number.isFinite(n) ? n.toLocaleString() : ""; }

export function safe(s) {
  return String(s ?? '').replace(/[&<>]/g, c => ({'&':'&','<':'<','>':'>'}[c]));
}

export function toNum(v) {
  if (v == null) return null;
  const s = String(v).trim();
  if (s === "") return null;
  const n = Number(s.replace(/[^0-9.-]/g, ""));
  return Number.isFinite(n) ? n : null;
}

export function pickNudge() {
  return NUDGES[Math.floor(Math.random() * NUDGES.length)];
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/site/app/api.js =====

import { BASE } from './config.js';

export async function fetchWeeks() {
  const res = await fetch(`${BASE}api/weeks.php`, { cache: "no-store" });
  if (!res.ok) throw new Error("weeks fetch failed");
  const json = await res.json();
  return Array.isArray(json.weeks) ? json.weeks : [];
}

export async function fetchWeekData(week) {
  const url = new URL(`${BASE}api/data.php`, location.origin);
  if (week) url.searchParams.set("week", week);
  const res = await fetch(url.toString(), { cache: "no-store" });
  if (!res.ok) throw new Error("data fetch failed");
  return await res.json();
}

export async function fetchLifetime() {
  const res = await fetch(`${BASE}api/lifetime.php`, { cache: 'no-store' });
  if (!res.ok) throw new Error('lifetime fetch failed');
  const json = await res.json();
  const rows = Array.isArray(json.lifetime) ? json.lifetime : [];
  const map = new Map();
  rows.forEach(r => {
    const name = (r.name || '').trim();
    if (!name) return;
    map.set(name, {
      total: Number(r.total_steps) || 0,
      weeks: Number(r.weeks_with_data) || 0,
      days: Number(r.total_days) || 0,
      avg: Number(r.lifetime_avg) || 0,
      best: Number(r.lifetime_best) || 0
    });
  });
  return map;
}

export async function fetchFamilyWeekdayAverages() {
  const res = await fetch(`${BASE}api/family_weekday_avg.php`, { cache: "no-store" });
  if (!res.ok) throw new Error("failed to load family weekday averages");
  return await res.json();
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/site/app/stats.js =====

import { DAY_ORDER, DAILY_GOAL_10K, DAILY_GOAL_15K, DAILY_GOAL_2_5K, DAILY_GOAL_1K, CHERYL_THRESHOLD, THIRTY_K_THRESHOLD, LIFETIME_STEP_MILESTONES } from './config.js';
import { computeLevel } from './levels.js';

// Small helper used by computeStats
function presentDaysByIndex(days, idxs) {
  return idxs.map(i => days[i]).filter(v => Number.isFinite(v));
}
function dayName(idx){ return DAY_ORDER[idx] || `Day${idx}`; }

export function computeStats(data, lifetimeMap = new Map(), serverTodayIdx = undefined, rawData = {}) {
  const todayIdx = (typeof serverTodayIdx === 'number') ? serverTodayIdx : -1;
  // rawData.rows contains original DB rows (with reported_at columns) when present
  const rawRowsByName = new Map();
  (rawData.rows || []).forEach(r => {
    const n = (r.name || r.Name || '').trim();
    if (n) rawRowsByName.set(n, r);
  });

  const lifetimeStartMap = rawData.lifetimeStart || {};

  const people = data.map(row => {
    const days = DAY_ORDER.map(d => row[d] ?? null);
    const presentDays = days.filter(v => Number.isFinite(v));
    const reportedDaysCount = presentDays.length;
    const blanksBefore = DAY_ORDER.filter((d, idx) => idx < todayIdx && !Number.isFinite(row[d]));
    const missingCount = blanksBefore.length;

    // Longest streak of days >= 1k
    let longestStreak1k = 0, curStreak = 0;
    for (let i = 0; i < DAY_ORDER.length; i++) {
      const v = row[DAY_ORDER[i]];
      if (Number.isFinite(v) && v >= DAILY_GOAL_1K) { curStreak++; longestStreak1k = Math.max(longestStreak1k, curStreak); }
      else { curStreak = 0; }
    }

    // Median with 20k cap
    const capped = presentDays.map(v => Math.min(v, 20000)).sort((a,b)=>a-b);
    const medianCapped = capped.length
      ? (capped.length % 2 ? capped[(capped.length-1)/2] : Math.round((capped[capped.length/2-1] + capped[capped.length/2]) / 2))
      : 0;
    const total = presentDays.reduce((a,b) => a + b, 0);
    const avg = presentDays.length ? Math.round(total / presentDays.length) : 0;
    const best = Math.max(0, ...presentDays);
    const thirtyK = presentDays.filter(v => v >= THIRTY_K_THRESHOLD).length;
    const cherylCount = presentDays.filter(v => v >= CHERYL_THRESHOLD).length;
    const fifteenK = presentDays.filter(v => v >= DAILY_GOAL_15K).length;
    const tenK = presentDays.filter(v => v >= DAILY_GOAL_10K).length;
    const two5K = presentDays.filter(v => v >= DAILY_GOAL_2_5K).length;
    const oneK = presentDays.filter(v => v >= DAILY_GOAL_1K).length;

    // Day over day jumps
    let biggestJump = { amount: 0, from: null, to: null };
    for (let i = 1; i < DAY_ORDER.length; i++) {
      const a = row[DAY_ORDER[i-1]];
      const b = row[DAY_ORDER[i]];
      if (Number.isFinite(a) && Number.isFinite(b)) {
        const diff = b - a;
        if (diff > biggestJump.amount) biggestJump = { amount: diff, from: DAY_ORDER[i-1], to: DAY_ORDER[i] };
      }
    }

    // Consistency
    const variance = presentDays.length > 1 ? presentDays.reduce((acc, v) => acc + Math.pow(v - avg, 2), 0) / presentDays.length : 0;
    const stddev = Math.round(Math.sqrt(variance));

    // Momentum
    const firstHalf = presentDaysByIndex(days, [0,1,2]);
    const secondHalf = presentDaysByIndex(days, [3,4,5]);
    const firstHalfSum = firstHalf.reduce((a,b)=>a+b,0);
    const secondHalfSum = secondHalf.reduce((a,b)=>a+b,0);
    const pctImprovement = firstHalfSum > 0 ? (secondHalfSum - firstHalfSum) / firstHalfSum
                     : (secondHalfSum > 0 ? 1 : 0);

    const life = lifetimeMap.get(row.Name) || { total: 0, weeks: 0, days: 0, avg: 0, best: 0 };
    const lifetimeTotal = Number(life.total) || 0;
    const lifetimeDays  = Number(life.days)  || 0;
    const lifetimeAvg   = Number(life.avg)   || (lifetimeDays > 0 ? Math.round(lifetimeTotal / lifetimeDays) : 0);
    const lifetimeBest  = Number(life.best)  || 0;
    const { level, toNext } = computeLevel(lifetimeTotal);

    return {
      name: row.Name,
      tag: row.Tag,
      days, total, avg, best,
      thirtyK, cherylCount, fifteenK, tenK, two5K, oneK,
      biggestJump, stddev,
      firstHalfSum, secondHalfSum, pctImprovement,
      reportedDaysCount, missingCount, longestStreak1k, medianCapped,
      level, toNext, lifetimeTotal, lifetimeDays, lifetimeAvg, lifetimeBest,
      // placeholders for computed week-level info
      startTotal: 0,
      cumTotals: [],
      levelAt: [],
      dayLevelGains: []
    };
  });

  // Compute start totals, cumulative totals and level changes per person
  const dayLevelUps1List = []; // entries { name, dayIdx, gained }
  const dayLevelUps2List = [];
  const weekLevelUpsList = []; // { name, gained }
  const lifetimeStepClubs = []; // { name, mark }
  const lifetimeLevelMilestones = []; // { name, level }
  const firstToReportPerDay = []; // length 6, may contain nulls
  const firstThresholds = []; // e.g. FIRST_30K etc

  // Prepare firstReports from rawData if available
  if (Array.isArray(rawData.firstReports)) {
    for (let i = 0; i < rawData.firstReports.length; i++) {
      const fr = rawData.firstReports[i];
      if (fr) firstToReportPerDay[i] = { dayIdx: fr.dayIdx, name: fr.name, value: fr.value, reported_at: fr.reported_at };
      else firstToReportPerDay[i] = null;
    }
  } else {
    for (let i=0;i<6;i++) firstToReportPerDay[i] = null;
  }

  // thresholds for FIRST_* awards (config driven labels exist client-side)
  const firstThresholdDefs = [
    { code: 'FIRST_30K', value: THIRTY_K_THRESHOLD },
    { code: 'FIRST_20K', value: CHERYL_THRESHOLD },
    { code: 'FIRST_15K', value: DAILY_GOAL_15K }
  ];

  // Helper: lookup raw reported_at and value for a person/day
  function rawReportedFor(name, dayIdx) {
    const r = rawRowsByName.get(name);
    if (!r) return { value: null, reported_at: null };
    const dayKey = DAY_ORDER[dayIdx].toLowerCase();
    const repKey = ['mon_reported_at','tue_reported_at','wed_reported_at','thu_reported_at','fri_reported_at','sat_reported_at'][dayIdx];
    return { value: r[dayKey] != null ? Number(r[dayKey]) : null, reported_at: r[repKey] ? Number(r[repKey]) : null };
  }

  people.forEach(p => {
    const name = p.name;
    const startTotal = (lifetimeStartMap[name] !== undefined) ? Number(lifetimeStartMap[name]) : (p.lifetimeTotal - p.total);
    if (lifetimeStartMap[name] === undefined) {
      // best-effort fallback
      console.warn(`lifetimeStart missing for ${name}; using fallback lifetimeTotal - weekTotal`);
    }
    p.startTotal = Number(startTotal) || 0;

    // cumulative totals and level per day
    let cum = p.startTotal;
    const levelAt = [];
    const cumTotals = [];
    const startLevel = computeLevel(p.startTotal).level;
    levelAt.push(startLevel); // level before any new day
    for (let i = 0; i < DAY_ORDER.length; i++) {
      const v = Number.isFinite(p.days[i]) ? p.days[i] : 0;
      cum += v;
      cumTotals[i] = cum;
      const lv = computeLevel(cum).level;
      levelAt[i] = lv;
    }
    // rewrite levelAt to be per-day (level after that day's steps)
    p.cumTotals = cumTotals;
    p.levelAt = levelAt;

    // day-level gains: compare level after day i vs level before that day
    for (let i = 0; i < DAY_ORDER.length; i++) {
      const before = (i === 0) ? startLevel : p.levelAt[i-1];
      const after = p.levelAt[i];
      const gained = Math.max(0, after - before);
      if (gained >= 1) {
        const entry = { name, dayIdx: i, gained };
        dayLevelUps1List.push(entry);
        if (gained >= 2) dayLevelUps2List.push(entry);
      }
    }

    // week level-ups
    const endLevel = p.levelAt[DAY_ORDER.length-1] || startLevel;
    const weekGained = Math.max(0, endLevel - startLevel);
    if (weekGained > 0) weekLevelUpsList.push({ name, gained: weekGained, startLevel, endLevel });

    // lifetime step clubs: for configured milestones, check crossing in this week
    (LIFETIME_STEP_MILESTONES || []).forEach(mark => {
      const endTotal = p.startTotal + p.total;
      if (p.startTotal < mark && endTotal >= mark) {
        lifetimeStepClubs.push({ name, mark });
      }
    });

    // lifetime level milestones: common milestones
    const levelMilestones = [5,10,25,50,75,100];
    levelMilestones.forEach(lm => {
      if (startLevel < lm && endLevel >= lm) {
        lifetimeLevelMilestones.push({ name, level: lm });
      }
    });
  });

  // sort day-level lists to prefer higher gain and earlier day
  dayLevelUps2List.sort((a,b) => (b.gained - a.gained) || (a.dayIdx - b.dayIdx));
  dayLevelUps1List.sort((a,b) => (b.gained - a.gained) || (a.dayIdx - b.dayIdx));
  weekLevelUpsList.sort((a,b) => b.gained - a.gained);

  // compute first-threshold winners using raw reported_at timestamps if available
  firstThresholdDefs.forEach(def => {
    let best = null;
    rawRowsByName.forEach((r, name) => {
      // r may include day values and reported_at columns
      for (let i = 0; i < DAY_ORDER.length; i++) {
        const dayKey = DAY_ORDER[i].toLowerCase();
        const repKey = ['mon_reported_at','tue_reported_at','wed_reported_at','thu_reported_at','fri_reported_at','sat_reported_at'][i];
        const val = r[dayKey] != null ? Number(r[dayKey]) : null;
        const rep = r[repKey] ? Number(r[repKey]) : null;
        if (val !== null && rep !== null && val >= def.value) {
          if (!best || rep < best.reported_at) {
            best = { code: def.code, name, value: val, reported_at: rep, dayIdx: i };
          }
        }
      }
    });
    if (best) firstThresholds.push(best);
  });

  // dedupe winners lists and prepare returned payload fields
  // Keep fairness/allocator on render side; here just provide candidate lists.
  const payload = {
    people,
    leader: people.slice().sort((a,b)=>b.total-a.total)[0] || null,
    highestSingle: null,
    biggestJump: null,
    mostConsistent: null,
    missing: data.map(r => {
      const blanks = DAY_ORDER.filter((d, idx) =>
        idx < todayIdx && !Number.isFinite(r[d])
      );
      return { name: r.Name, blanks };
    }),
    most30k: null, most20k: null, most15k: null, most10k: null, most2_5k: null, most1k: null,
    earlyMomentum: null, closer: null,
    most30kList: [], most20kList: [], most15kList: [], most10kList: [], most2_5kList: [], most1kList: [],
    mostImprovedList: [], medianMasterList: [], reportingChampList: [], streakBossList: [],
    // new awards data
    firstToReportPerDay,
    dayLevelUps1List,
    dayLevelUps2List,
    weekLevelUpsList,
    lifetimeStepClubs,
    lifetimeLevelMilestones,
    firstThresholds
  };

  // preserve some previously computed quick stats for compatibility
  // highestSingle
  let highestSingle = null;
  people.forEach(p => {
    p.days.forEach((v, idx) => {
      if (Number.isFinite(v)) {
        if (!highestSingle || v > highestSingle.value) {
          highestSingle = { person: p.name, value: v, day: DAY_ORDER[idx] };
        }
      }
    })
  });
  payload.highestSingle = highestSingle;

  const biggestJump = people.reduce((best, p) => {
    if (p.biggestJump.amount > (best?.amount || 0)) return { ...p.biggestJump, person: p.name };
    return best;
  }, null);
  payload.biggestJump = biggestJump;

  payload.mostConsistent = [...people].filter(p => p.days.filter(x => Number.isFinite(x)).length >= 2).sort((a,b) => a.stddev - b.stddev)[0] || null;

  // lists (simple reuse of existing sorts)
  function sortedBy(field, dir='desc') {
    return [...people].sort((a,b)=> dir==='desc' ? (b[field]-a[field]) : (a[field]-b[field]));
  }
  payload.most30kList = sortedBy('thirtyK');
  payload.most20kList = sortedBy('cherylCount');
  payload.most15kList = sortedBy('fifteenK');
  payload.most10kList = sortedBy('tenK');
  payload.most2_5kList = sortedBy('two5K');
  payload.most1kList = sortedBy('oneK');

  payload.most30k = payload.most30kList[0] || null;
  payload.most20k = payload.most20kList[0] || null;
  payload.most15k = payload.most15kList[0] || null;
  payload.most10k = payload.most10kList[0] || null;
  payload.most2_5k = payload.most2_5kList[0] || null;
  payload.most1k = payload.most1kList[0] || null;

  payload.mostImprovedList = [...people].sort((a,b)=> b.pctImprovement - a.pctImprovement);
  payload.medianMasterList = sortedBy('medianCapped');
  payload.reportingChampList = [...people].sort((a,b)=> (a.missingCount - b.missingCount) || (b.total - a.total));
  payload.streakBossList = sortedBy('longestStreak1k');
  payload.earlyMomentum = [...people].sort((a,b)=> b.firstHalfSum - a.firstHalfSum)[0] || null;
  payload.closer = [...people].sort((a,b)=> b.secondHalfSum - a.secondHalfSum)[0] || null;

  return payload;
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/site/_bak/index.html =====

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Kings Walk Week</title>
  <!-- Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
  <!-- PapaParse for CSV -->
  <script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>
  <!-- App styles -->
  <link rel="stylesheet" href="app.css" />
</head>
<body class="min-h-screen">
  <header class="px-4 py-4 sm:px-6 sm:py-5 sticky top-0 backdrop-blur supports-[backdrop-filter]:bg-[#0b1020]/80 z-30 border-b border-white/10">
    <div class="max-w-6xl mx-auto flex items-center justify-between gap-3">
      <div>
        <div class="kicker">Kings Walk Week</div>
        <h1 class="text-2xl sm:text-3xl font-extrabold leading-tight">
          Walk together. Win today.
        </h1>
        <p class="text-xs sm:text-sm text-white/70 mt-1">Single-page dashboard. Mobile first. Auto-loads <code>kings_walk_week.csv</code>. If that fails, use the upload below.</p>
      </div>
      <div class="hidden sm:flex items-center gap-2">
        <span id="loadStatus" class="badge">Loading CSV…</span>
        <a id="switchUserLink" class="hidden text-xs underline cursor-pointer">Switch user</a>
      </div>
    </div>
  </header>

  <main class="max-w-6xl mx-auto px-4 sm:px-6 py-4 sm:py-6 space-y-4 sm:space-y-6">
    <!-- Controls -->
    <section class="card p-3 sm:p-4 shadow-soft">
      <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3">
        <div class="space-y-1">
          <div class="kicker">Data</div>
          <h2 class="text-lg sm:text-xl font-bold">Load or replace your CSV</h2>
          <p class="text-white/70 text-sm">Expected columns: Name, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Total Steps.</p>
        </div>
        <div class="flex items-center gap-3 w-full sm:w-auto">
          <input id="fileInput" type="file" accept=".csv" class="block w-full sm:w-auto text-sm file:mr-3 file:py-2 file:px-3 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-white/10 file:text-white hover:file:bg-white/20" />
          <button id="reloadBtn" class="px-3 py-2 rounded-lg bg-white/10 hover:bg-white/20 text-sm font-semibold">Reload default CSV</button>
        </div>
      </div>
    </section>

    <!-- Summary + Awards Row -->
    <section class="grid-auto-fit">
      <div class="card p-4 space-y-3">
        <div class="kicker">Summary</div>
        <h3 class="text-xl font-bold">Live Leaderboard</h3>
        <div id="leaderboardPosition" class="text-xs text-white/60 mb-1"></div>
        <div class="overflow-x-auto">
          <table id="leaderboard" class="w-full text-sm">
            <thead class="text-white/70">
              <tr>
                <th class="text-left py-2">Rank</th>
                <th class="text-left py-2 cursor-pointer" data-sort="name">Name</th>
                <th class="text-right py-2 cursor-pointer" data-sort="total">Total</th>
                <th class="text-right py-2">Avg</th>
                <th class="text-right py-2">Best Day</th>
                <th class="text-right py-2">Days ≥30k</th>
                <th class="text-right py-2">Days ≥20k</th>
                <th class="text-right py-2">Days ≥15k</th>
                <th class="text-right py-2">Days ≥10k</th>
                <th class="text-right py-2">Days ≥2.5k</th>
                <th class="text-right py-2">Days ≥1k</th>
              </tr>
            </thead>
            <tbody></tbody>
          </table>
        </div>
        <div class="text-xs text-white/60">Tip: tap the headers to sort.</div>
      </div>

      <div class="card p-4 space-y-3">
        <div class="kicker">Awards</div>
        <h3 class="text-xl font-bold">Badges and Bragging Rights</h3>
        <ul id="awardsList" class="space-y-2 text-sm"></ul>
        <div class="border-t border-white/10 pt-3">
          <div class="flex flex-wrap gap-2 text-xs">
            <span class="chip bg-emerald-500/15 text-emerald-300">30k Day</span>
            <span class="chip bg-yellow-500/15 text-yellow-300">Cheryl Award ≥ 20k</span>
            <span class="chip bg-lime-500/15 text-lime-300">15k Day</span>
            <span class="chip bg-green-500/15 text-green-300">10k Day</span>
            <span class="chip bg-cyan-500/15 text-cyan-300">2.5k Day</span>
            <span class="chip bg-blue-500/15 text-blue-300">1k Day</span>
            <span class="chip bg-purple-500/15 text-purple-300">Consistency Star</span>
            <span class="chip bg-rose-500/15 text-rose-300">Biggest Jump</span>
            <span class="chip bg-orange-500/15 text-orange-300">Most Improved</span>
            <span class="chip bg-fuchsia-500/15 text-fuchsia-300">Median Master</span>
            <span class="chip bg-teal-500/15 text-teal-300">Reporting Champ</span>
            <span class="chip bg-stone-500/15 text-stone-300">Streak Boss</span>
          </div>
        </div>
      </div>
    </section>

    <!-- Charts -->
    <section class="grid-auto-fit">
      <div class="card p-4 space-y-3">
        <div class="kicker">Chart</div>
        <h3 class="text-xl font-bold">Steps by Day</h3>
        <canvas id="perDayChart" height="220"></canvas>
      </div>
      <div class="card p-4 space-y-3">
        <div class="kicker">Chart</div>
        <h3 class="text-xl font-bold">Family Total by Day</h3>
        <canvas id="stackedTotalChart" height="220"></canvas>
      </div>
      <div class="card p-4 space-y-3">
        <div class="kicker">Chart</div>
        <h3 class="text-xl font-bold">Trajectories</h3>
        <canvas id="linesChart" height="220"></canvas>
      </div>
    </section>

    <!-- Personal Cards -->
    <section id="cards" class="grid-auto-fit"></section>

    <!-- Missing Data Callouts -->
    <section class="card p-4 space-y-3">
      <div class="kicker">Accountability</div>
      <h3 class="text-xl font-bold">Missing Check-ins</h3>
      <ul id="missingList" class="space-y-2 text-sm"></ul>
      <p class="text-xs text-white/60">If a day is blank, we assume no report. Nudge each other. Be kind, but keep it honest.</p>
    </section>

    <footer class="py-6 text-center text-xs text-white/60">
      Built for the King family. Tutu approved.
    </footer>
  </main>

  <!-- App logic -->
  <script defer src="app.js"></script>
</body>
</html>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/site/_bak/app.js =====

// -------- Config Loader --------
let APP_CONFIG = null;
let DISABLE_LOGIN = false;
let DISABLE_CSV_UPLOAD = false;

async function loadConfig() {
  try {
    const res = await fetch("config.json", { cache: "no-store" });
    if (!res.ok) throw new Error("config fetch failed");
    const cfg = await res.json();
    APP_CONFIG = cfg;
    DISABLE_LOGIN = !!(cfg.ui && cfg.ui.disableLogin);
    DISABLE_CSV_UPLOAD = !!(cfg.ui && cfg.ui.disableCsvUpload);
    return cfg;
  } catch (e) {
    // Safe defaults if missing
    APP_CONFIG = { ui: { disableLogin: false, disableCsvUpload: false } };
    DISABLE_LOGIN = false;
    DISABLE_CSV_UPLOAD = false;
    return APP_CONFIG;
  }
}

// ------- Config-independent constants (original) -------
const DAY_ORDER = ["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]; // displayed order
const DAILY_GOAL_10K = 10000;
const DAILY_GOAL_15K = 15000;
const DAILY_GOAL_5K = 5000; // kept for reference, still counted
const DAILY_GOAL_2_5K = 2500;
const DAILY_GOAL_1K = 1000;
const CHERYL_THRESHOLD = 20000; // Cheryl Award
const THIRTY_K_THRESHOLD = 30000; // 30k Award
// Award fairness controls
const UNIQUE_WINNERS = true;     // prevent one person from sweeping
const MAX_AWARDS_PER_PERSON = 2; // cap per person when UNIQUE_WINNERS is true
const DISPLAY_NAME_OVERRIDES = { "Tutu": "Tutu" }; // keep as Tutu

// Friendly nudge lines when missing data
const NUDGES = [
  "Your shoes miss you.",
  "Take a lap and report back.",
  "Screenshot the counter tonight.",
  "Walk-n-talk with the fam, then log it.",
  "30 minutes. No debate."
];

// ------- CSV Loading -------
let globalData = [];
let charts = [];
let weeksManifest = [];
let currentWeekFile = null;
let currentWeekLabel = null;

function setStatus(msg, type = "info") {
  const el = document.getElementById("loadStatus");
  if (!el) return;
  el.textContent = msg;
  el.className = "badge";
  if (type === "ok") el.classList.add("bg-green-500/10","text-green-300");
  if (type === "warn") el.classList.add("bg-yellow-500/10","text-yellow-300");
  if (type === "err") el.classList.add("bg-rose-500/10","text-rose-300");
}

async function tryFetchDefault() {
  setStatus("Loading kings_walk_week.csv…");
  const candidates = ["/kings_walk_week.csv", "../kings_walk_week.csv"];
  for (let i = 0; i < candidates.length; i++) {
    try {
      const url = candidates[i];
      const res = await fetch(url, { cache: "no-store" });
      if (!res.ok) throw new Error("Fetch failed");
      const text = await res.text();
      parseCSV(text);
      setStatus(`Loaded ${url}`, "ok");
      return;
    } catch (e) {
      // try next
    }
  }
  setStatus("Default CSV not found. Use Upload.", "warn");
}

/*
  Weeks manifest / selector support
  - loadWeeksManifest() loads /data/weeks/manifest.json and populates weeksManifest
  - buildWeekSelector(weeks) inserts a selector above the leaderboard
  - loadCsvForFile(file, label) fetches the CSV and delegates to parseCSV
*/
async function loadWeeksManifest() {
  try {
    const res = await fetch("/data/weeks/manifest.json", { cache: "no-store" });
    if (!res.ok) throw new Error("manifest fetch failed");
    const json = await res.json();
    weeksManifest = Array.isArray(json.weeks) ? json.weeks : [];
    console.log('Loaded weeks manifest:', weeksManifest);
    weeksManifest.forEach((w, i) => {
      if (!w || !w.label || !w.file) console.warn(`weeks manifest entry #${i} missing label or file`, w);
    });
    return weeksManifest;
  } catch (e) {
    weeksManifest = [];
    return weeksManifest;
  }
}

function buildWeekSelector(weeks) {
  console.log('Building week selector with', weeks);
  const leaderboard = document.getElementById('leaderboard');
  if (!leaderboard) {
    console.warn('No #leaderboard element found; skipping week selector.');
    return;
  }
  if (!leaderboard.parentNode) {
    console.warn('#leaderboard has no parentNode; cannot insert week selector.');
    return;
  }
  // Avoid creating the selector twice
  if (document.getElementById('weekSelectorContainer')) return;

  const container = document.createElement('div');
  container.id = 'weekSelectorContainer';
  container.className = 'mb-4 flex items-center gap-3';

  const label = document.createElement('label');
  label.className = 'text-sm text-white/70';
  label.htmlFor = 'weekSelector';
  label.textContent = 'Week:';

  const select = document.createElement('select');
  select.id = 'weekSelector';
  select.className = 'px-2 py-1 rounded bg-white/5 text-sm';

  weeks.forEach((w, idx) => {
    const opt = document.createElement('option');
    opt.value = w.file || '';
    opt.textContent = w.label || w.file || `Week ${idx+1}`;
    // Mark archived visually in option text (optional)
    if ((w.file || '').indexOf('kings_walk_week.csv') === -1 && (w.file || '') !== '') {
      opt.textContent += ' — archived';
    }
    select.appendChild(opt);
  });

  const hint = document.createElement('span');
  hint.id = 'weekArchivedHint';
  hint.className = 'text-xs text-white/60';
  hint.style.minWidth = '160px';

  container.appendChild(label);
  container.appendChild(select);
  container.appendChild(hint);

  try {
    leaderboard.parentNode.insertBefore(container, leaderboard);
  } catch (err) {
    console.error('Failed to insert weekSelectorContainer:', err);
    return;
  }

  select.addEventListener('change', () => {
    const sel = weeks.find(w => w.file === select.value) || { file: select.value, label: select.options[select.selectedIndex]?.text || select.value };
    loadCsvForFile(sel.file, sel.label);
  });
}

async function loadCsvForFile(file, label) {
  if (!file) {
    setStatus('No file specified for selected week', 'warn');
    return;
  }
  setStatus(`Loading ${label || file}…`);
  try {
    const res = await fetch(file, { cache: 'no-store' });
    if (!res.ok) throw new Error('CSV fetch failed');
    const text = await res.text();
    currentWeekFile = file;
    currentWeekLabel = label || file;
    const statusEl = document.getElementById('loadStatus');
    if (statusEl) statusEl.title = currentWeekFile || '';
    parseCSV(text);
    setStatus(`Loaded ${currentWeekLabel} (${currentWeekFile})`, 'ok');
    const hint = document.getElementById('weekArchivedHint');
    if (hint) {
      if (currentWeekFile.indexOf('kings_walk_week.csv') === -1) {
        hint.textContent = 'Archived (read-only)';
      } else {
        hint.textContent = '';
      }
    }
  } catch (e) {
    console.error(e);
    setStatus(`Failed to load ${file}`, 'err');
    // If manifest is empty, fallback to original default fetch behavior
    if (!weeksManifest || !weeksManifest.length) {
      await tryFetchDefault();
    }
  }
}

function parseCSV(text) {
  const raw = text || '';
  const parsed = Papa.parse(raw.trim(), { header: true, skipEmptyLines: true, relaxColumnCount: true });
  if (parsed.errors?.length) {
    setStatus("CSV parse warnings", "warn");
    console.warn('PapaParse errors:', parsed.errors);
    // Attempt to log the raw CSV lines for context when available
    try {
      const rawLines = raw.split(/\r?\n/);
      parsed.errors.forEach(err => {
        const rowIndex = (typeof err.row === 'number') ? err.row : null;
        const maybeLine = rowIndex != null ? (rawLines[rowIndex] ?? rawLines[rowIndex - 1]) : undefined;
        console.warn('Problematic CSV row:', { row: err.row, type: err.type, message: err.message, line: maybeLine });
      });
    } catch (e) {
      console.warn('Failed to extract raw CSV lines for error context', e);
    }
  }
  const rows = parsed.data;
  globalData = sanitizeRows(rows);
  // Gate rendering by login
  ensureUserSelected(() => renderAll());
}

function sanitizeRows(rows) {
  // Normalize headers and retain privacy fields
  const norm = rows.map(r => {
    const out = {};
    for (const k in r) {
      const key = normalizeHeader(k);
      out[key] = r[k];
    }
    // Standardize person name
    const nameKey = Object.keys(out).find(k => /^name$/i.test(k)) || "Name";
    const name = (out[nameKey] || "").toString().trim();
    out.Name = DISPLAY_NAME_OVERRIDES[name] || name;

    // Ensure numeric values
    DAY_ORDER.forEach(d => { out[d] = toNum(out[d]); });
    out["Total Steps"] = toNum(out["Total Steps"]);

    // Privacy fields (string trimmed)
    out.PIN = (out.PIN ?? "").toString().trim();
    out.ShareMode = (out.ShareMode ?? "").toString().trim();
    out.ShareWith = (out.ShareWith ?? "").toString().trim();

    return pick(out, ["Name", ...DAY_ORDER, "Total Steps", "PIN", "ShareMode", "ShareWith"]);
  });
  return norm;
}

function normalizeHeader(h) {
  const s = (h || "").toString().trim();
  const m = s.toLowerCase();
  if (m === "wednessday" || m === "wednesday") return "Wednesday";
  if (m === "monday") return "Monday";
  if (m === "tuesday") return "Tuesday";
  if (m === "thursday") return "Thursday";
  if (m === "friday") return "Friday";
  if (m === "saturday") return "Saturday";
  if (m === "total" || m === "total steps") return "Total Steps";
  if (m === "name" || m === "person" || m === "names") return "Name"; // tolerate "Names"
  if (m === "pin") return "PIN";
  if (m === "sharemode" || m === "share mode") return "ShareMode";
  if (m === "sharewith" || m === "share with") return "ShareWith";
  return s; // keep unknowns
}

function toNum(v) {
  if (v == null) return null;
  const s = String(v).trim();
  if (s === "") return null; // treat empty as missing, not 0
  const n = Number(s.replace(/[^0-9.-]/g, ""));
  return Number.isFinite(n) ? n : null;
}

function pick(obj, keys) { const o = {}; keys.forEach(k => o[k] = obj[k]); return o; }

// ------- Stats and Awards -------
function computeStats(data) {
  const people = data.map(row => {
    const days = DAY_ORDER.map(d => row[d] ?? null);
    const presentDays = days.filter(v => Number.isFinite(v));
    const reportedDaysCount = presentDays.length;
    const missingCount = DAY_ORDER.length - reportedDaysCount;

    // Longest streak of days >= 1k
    let longestStreak1k = 0, curStreak = 0;
    for (let i = 0; i < DAY_ORDER.length; i++) {
      const v = row[DAY_ORDER[i]];
      if (Number.isFinite(v) && v >= DAILY_GOAL_1K) { curStreak++; longestStreak1k = Math.max(longestStreak1k, curStreak); }
      else { curStreak = 0; }
    }

    // Median with 20k cap to blunt outliers
    const capped = presentDays.map(v => Math.min(v, 20000)).sort((a,b)=>a-b);
    const medianCapped = capped.length
      ? (capped.length % 2 ? capped[(capped.length-1)/2] : Math.round((capped[capped.length/2-1] + capped[capped.length/2]) / 2))
      : 0;
    const total = presentDays.reduce((a,b) => a + b, 0);
    const avg = presentDays.length ? Math.round(total / presentDays.length) : 0;
    const best = Math.max(0, ...presentDays);
    const thirtyK = presentDays.filter(v => v >= THIRTY_K_THRESHOLD).length;
    const cherylCount = presentDays.filter(v => v >= CHERYL_THRESHOLD).length;
    const fifteenK = presentDays.filter(v => v >= DAILY_GOAL_15K).length;
    const tenK = presentDays.filter(v => v >= DAILY_GOAL_10K).length;
    const fiveK = presentDays.filter(v => v >= DAILY_GOAL_5K).length;
    const two5K = presentDays.filter(v => v >= DAILY_GOAL_2_5K).length;
    const oneK = presentDays.filter(v => v >= DAILY_GOAL_1K).length;

    // Day over day jumps
    let biggestJump = { amount: 0, from: null, to: null };
    for (let i = 1; i < DAY_ORDER.length; i++) {
      const a = row[DAY_ORDER[i-1]];
      const b = row[DAY_ORDER[i]];
      if (Number.isFinite(a) && Number.isFinite(b)) {
        const diff = b - a;
        if (diff > biggestJump.amount) biggestJump = { amount: diff, from: DAY_ORDER[i-1], to: DAY_ORDER[i] };
      }
    }

    // Consistency: standard deviation of present days
    const variance = presentDays.length > 1 ? presentDays.reduce((acc, v) => acc + Math.pow(v - avg, 2), 0) / presentDays.length : 0;
    const stddev = Math.round(Math.sqrt(variance));

    // Momentum awards: first 3 vs last 3 days
    const firstHalf = presentDaysByIndex(days, [0,1,2]);
    const secondHalf = presentDaysByIndex(days, [3,4,5]);
    const firstHalfSum = firstHalf.reduce((a,b)=>a+b,0);
    const secondHalfSum = secondHalf.reduce((a,b)=>a+b,0);
    const pctImprovement = firstHalfSum > 0 ? (secondHalfSum - firstHalfSum) / firstHalfSum
                     : (secondHalfSum > 0 ? 1 : 0);

    return {
    name: row.Name, days, total, avg, best,
    thirtyK, cherylCount, fifteenK, tenK, fiveK, two5K, oneK,
    biggestJump, stddev,
    firstHalfSum, secondHalfSum, pctImprovement,
    reportedDaysCount, missingCount, longestStreak1k, medianCapped
  };
  });

  // Awards summarization
  const byTotal = [...people].sort((a,b) => b.total - a.total);
  const leader = byTotal[0];

  let highestSingle = null;
  people.forEach(p => {
    p.days.forEach((v, idx) => {
      if (Number.isFinite(v)) {
        if (!highestSingle || v > highestSingle.value) {
          highestSingle = { person: p.name, value: v, day: DAY_ORDER[idx] };
        }
      }
    })
  });

  const biggestJump = people.reduce((best, p) => {
    if (p.biggestJump.amount > (best?.amount || 0)) return { ...p.biggestJump, person: p.name };
    return best;
  }, null);

  const mostConsistent = [...people].filter(p => p.days.filter(x => Number.isFinite(x)).length >= 2).sort((a,b) => a.stddev - b.stddev)[0] || null;

    // Prepare sorted lists (runner-ups aware)
  function sortedBy(field, dir='desc') {
    return [...people].sort((a,b)=> dir==='desc' ? (b[field]-a[field]) : (a[field]-b[field]));
  }
  const most30kList = sortedBy('thirtyK');
  const most20kList = sortedBy('cherylCount');
  const most15kList = sortedBy('fifteenK');
  const most10kList = sortedBy('tenK');
  const most2_5kList = sortedBy('two5K');
  const most1kList = sortedBy('oneK');

  const most30k = most30kList[0];
  const most20k = most20kList[0];
  const most15k = most15kList[0];
  const most10k = most10kList[0];
  const most2_5k = most2_5kList[0];
  const most1k = most1kList[0];

  // New award candidate lists
  const mostImprovedList   = [...people].sort((a,b)=> b.pctImprovement - a.pctImprovement);
  const medianMasterList   = sortedBy('medianCapped');
  const reportingChampList = [...people].sort((a,b)=> (a.missingCount - b.missingCount) || (b.total - a.total));
  const streakBossList     = sortedBy('longestStreak1k');

  // Momentum split awards
  const earlyMomentum = [...people].sort((a,b)=> b.firstHalfSum - a.firstHalfSum)[0] || null;
  const closer = [...people].sort((a,b)=> b.secondHalfSum - a.secondHalfSum)[0] || null;

  // Missing days
  const missing = data.map(r => {
    const blanks = DAY_ORDER.filter(d => !Number.isFinite(r[d]));
    return { name: r.Name, blanks };
  });

  return {
    people, leader, highestSingle, biggestJump, mostConsistent, missing,
    most30k, most20k, most15k, most10k, most2_5k, most1k,
    earlyMomentum, closer,
    // candidate lists for fair allocation
    most30kList, most20kList, most15kList, most10kList, most2_5kList, most1kList,
    mostImprovedList, medianMasterList, reportingChampList, streakBossList
  };
}

function presentDaysByIndex(days, idxs) {
  return idxs.map(i => days[i]).filter(v => Number.isFinite(v));
}

// ------- Renderers -------
function renderAll() {
  // Clean
  charts.forEach(c => c.destroy());
  charts = [];

  const stats = computeStats(globalData);
  renderLeaderboard(stats);
  renderAwards(stats);
  renderCharts(stats);
  renderCards(stats);
  renderMissing(stats);
}

function renderLeaderboard({ people }) {
  const tbody = document.querySelector('#leaderboard tbody');
  const sorted = [...people].sort((a,b) => b.total - a.total);
  const viewer = getCurrentUser();
  const viewerRow = globalData.find(r => r.Name === viewer);
  // Position chip
  const posEl = document.getElementById('leaderboardPosition');
  if (posEl) {
    const rankIdx = sorted.findIndex(p => p.name === viewer);
    if (viewer && rankIdx >= 0) {
      posEl.innerHTML = `<span class="chip bg-white/10">${safe(viewer)}: You are in position #${rankIdx+1} of ${sorted.length}</span>`;
    } else {
      posEl.textContent = "";
    }
  }
  tbody.innerHTML = sorted.map((p, idx) => {
    const subjectRow = globalData.find(r => r.Name === p.name) || {};
    const canSee = maySeeNumbers(viewer, subjectRow, globalData);
    const dash = '<span class="text-white/40">—</span>';
    const total = canSee ? fmt(p.total) : dash;
    const avg = canSee ? fmt(p.avg) : dash;
    const best = canSee ? fmt(p.best) : dash;
    const thirtyK = canSee ? p.thirtyK : dash;
    const cherylCount = canSee ? p.cherylCount : dash;
    const fifteenK = canSee ? p.fifteenK : dash;
    const tenK = canSee ? p.tenK : dash;
    const two5K = canSee ? p.two5K : dash;
    const oneK = canSee ? p.oneK : dash;
    return `
    <tr class="border-t border-white/5">
      <td class="py-2 pr-2">${idx+1}</td>
      <td class="py-2 pr-2">${safe(p.name)}</td>
      <td class="py-2 text-right stat">${total}</td>
      <td class="py-2 text-right stat">${avg}</td>
      <td class="py-2 text-right stat">${best}</td>
      <td class="py-2 text-right stat">${thirtyK}</td>
      <td class="py-2 text-right stat">${cherylCount}</td>
      <td class="py-2 text-right stat">${fifteenK}</td>
      <td class="py-2 text-right stat">${tenK}</td>
      <td class="py-2 text-right stat">${two5K}</td>
      <td class="py-2 text-right stat">${oneK}</td>
    </tr>`;
  }).join("");

  // Sorting click handlers respecting privacy
  document.querySelectorAll('#leaderboard thead th[data-sort]').forEach(th => {
    th.onclick = () => {
      const key = th.dataset.sort;
      const by = key === 'name' ? (a,b) => a.name.localeCompare(b.name) : (a,b)=> b.total - a.total;
      const arr = [...people].sort(by);
      tbody.innerHTML = arr.map((p, idx) => {
        const subjectRow = globalData.find(r => r.Name === p.name) || {};
        const canSee = maySeeNumbers(viewer, subjectRow, globalData);
        const dash = '<span class="text-white/40">—</span>';
        const total = canSee ? fmt(p.total) : dash;
        const avg = canSee ? fmt(p.avg) : dash;
        const best = canSee ? fmt(p.best) : dash;
        const thirtyK = canSee ? p.thirtyK : dash;
        const cherylCount = canSee ? p.cherylCount : dash;
        const fifteenK = canSee ? p.fifteenK : dash;
        const tenK = canSee ? p.tenK : dash;
        const two5K = canSee ? p.two5K : dash;
        const oneK = canSee ? p.oneK : dash;
        return `<tr class="border-t border-white/5">
          <td class="py-2 pr-2">${idx+1}</td>
          <td class="py-2 pr-2">${safe(p.name)}</td>
          <td class="py-2 text-right stat">${total}</td>
          <td class="py-2 text-right stat">${avg}</td>
          <td class="py-2 text-right stat">${best}</td>
          <td class="py-2 text-right stat">${thirtyK}</td>
          <td class="py-2 text-right stat">${cherylCount}</td>
          <td class="py-2 text-right stat">${fifteenK}</td>
          <td class="py-2 text-right stat">${tenK}</td>
          <td class="py-2 text-right stat">${two5K}</td>
          <td class="py-2 text-right stat">${oneK}</td>
        </tr>`;
      }).join('');
    };
  });
}

function allocateAwards() {
  const taken = new Map();
  function pick(list) {
    for (const p of list) {
      const id = p.name || p.person;
      const count = taken.get(id) || 0;
      if (!UNIQUE_WINNERS || count < MAX_AWARDS_PER_PERSON) {
        taken.set(id, count + 1);
        return p;
      }
    }
    return null;
  }
  return { pick, taken };
}

function renderAwards(payload) {
  const { leader, highestSingle, biggestJump, mostConsistent, earlyMomentum, closer } = payload;
  const el = document.getElementById('awardsList');
  const items = [];
  const A = allocateAwards();
  const viewer = getCurrentUser();

  function numOrHidden(subjectName, value, fmtFn = v => fmt(v)) {
    const row = globalData.find(r => r.Name === subjectName) || {};
    return maySeeNumbers(viewer, row, globalData) ? `<span class="stat">${fmtFn(value)}</span>` : 'hidden';
  }

  if (leader) items.push(`<li><span class="accent font-semibold">Overall Leader:</span> ${safe(leader.name)} with ${numOrHidden(leader.name, leader.total)} steps so far.</li>`);
  if (highestSingle) items.push(`<li><span class="accent-2 font-semibold">Highest Single Day:</span> ${safe(highestSingle.person)} with ${numOrHidden(highestSingle.person, highestSingle.value)} on ${highestSingle.day}.</li>`);

  const t30 = A.pick(payload.most30kList.filter(p=>p.thirtyK>0));
  if (t30) items.push(`<li><span class="text-emerald-300 font-semibold">Ultra Day Hunter:</span> ${safe(t30.name)} with ${numOrHidden(t30.name, t30.thirtyK, v=>v)} day(s) at ≥ 30k.</li>`);

  const t20 = A.pick(payload.most20kList.filter(p=>p.cherylCount>0));
  if (t20) items.push(`<li><span class="text-yellow-300 font-semibold">Cheryl Champ:</span> ${safe(t20.name)} with ${numOrHidden(t20.name, t20.cherylCount, v=>v)} day(s) at ≥ 20k.</li>`);

  const t15 = A.pick(payload.most15kList.filter(p=>p.fifteenK>0));
  if (t15) items.push(`<li><span class="text-lime-300 font-semibold">15k Achiever:</span> ${safe(t15.name)} with ${numOrHidden(t15.name, t15.fifteenK, v=>v)} day(s) at ≥ 15k.</li>`);

  const t10 = A.pick(payload.most10kList.filter(p=>p.tenK>0));
  if (t10) items.push(`<li><span class="text-green-300 font-semibold">Ten-K Streaker:</span> ${safe(t10.name)} with ${numOrHidden(t10.name, t10.tenK, v=>v)} day(s) at ≥ 10k.</li>`);

  const t25 = A.pick(payload.most2_5kList.filter(p=>p.two5K>0));
  if (t25) items.push(`<li><span class="text-cyan-300 font-semibold">Showing Up Award:</span> ${safe(t25.name)} with ${numOrHidden(t25.name, t25.two5K, v=>v)} day(s) at ≥ 2.5k.</li>`);

  const t1k = A.pick(payload.most1kList.filter(p=>p.oneK>0));
  if (t1k) items.push(`<li><span class="text-blue-300 font-semibold">Participation Ribbon:</span> ${safe(t1k.name)} with ${numOrHidden(t1k.name, t1k.oneK, v=>v)} day(s) at ≥ 1k.</li>`);

  if (biggestJump && biggestJump.amount > 0 && A.pick([biggestJump])) {
    items.push(`<li><span class="text-rose-300 font-semibold">Biggest Jump:</span> ${safe(biggestJump.person)} jumped ${numOrHidden(biggestJump.person, biggestJump.amount)} from ${biggestJump.from} to ${biggestJump.to}.</li>`);
  }
  if (mostConsistent && A.pick([mostConsistent])) {
    items.push(`<li><span class="text-purple-300 font-semibold">Consistency Star:</span> ${safe(mostConsistent.name)} with the lowest day-to-day variation (${numOrHidden(mostConsistent.name, mostConsistent.stddev)}).</li>`);
  }
  if (earlyMomentum && A.pick([earlyMomentum])) {
    items.push(`<li><span class="text-orange-300 font-semibold">Early Momentum:</span> ${safe(earlyMomentum.name)} with the strongest Mon–Wed total (${numOrHidden(earlyMomentum.name, earlyMomentum.firstHalfSum)}).</li>`);
  }
  if (closer && A.pick([closer])) {
    items.push(`<li><span class="text-pink-300 font-semibold">Closer Award:</span> ${safe(closer.name)} with the strongest Thu–Sat total (${numOrHidden(closer.name, closer.secondHalfSum)}).</li>`);
  }

  const imp = A.pick(payload.mostImprovedList.filter(p=>p.firstHalfSum>0 || p.secondHalfSum>0));
  if (imp) items.push(`<li><span class="text-orange-300 font-semibold">Most Improved:</span> ${safe(imp.name)} with a ${numOrHidden(imp.name, Math.round(imp.pctImprovement*100), v=>v + '%')} Thu–Sat vs Mon–Wed improvement.</li>`);

  const med = A.pick(payload.medianMasterList.filter(p=>p.medianCapped>0));
  if (med) items.push(`<li><span class="text-fuchsia-300 font-semibold">Median Master:</span> ${safe(med.name)} with the highest capped median (${numOrHidden(med.name, med.medianCapped)}).</li>`);

  const rep = A.pick(payload.reportingChampList);
  if (rep) items.push(`<li><span class="text-teal-300 font-semibold">Reporting Champ:</span> ${safe(rep.name)} with the fewest missing check-ins (${numOrHidden(rep.name, rep.missingCount, v=>v)} missing).</li>`);

  const stk = A.pick(payload.streakBossList.filter(p=>p.longestStreak1k>0));
  if (stk) items.push(`<li><span class="text-stone-300 font-semibold">Streak Boss:</span> ${safe(stk.name)} with the longest days-in-a-row at ≥ 1k (${numOrHidden(stk.name, stk.longestStreak1k, v=>v)}).</li>`);

  el.innerHTML = items.length ? items.join('') : '<li>No awards yet. Add some steps.</li>';
}

function renderCharts({ people }) {
  const labels = DAY_ORDER;
  const perDayCtx = document.getElementById('perDayChart').getContext('2d');
  const stackedCtx = document.getElementById('stackedTotalChart').getContext('2d');
  const linesCtx = document.getElementById('linesChart').getContext('2d');

  // Per-day bars per person (stacked by day for clarity on mobile)
  const datasets = people.map((p, i) => ({
    label: p.name,
    data: p.days.map(v => Number.isFinite(v) ? v : 0),
    borderWidth: 1
  }));

  charts.push(new Chart(perDayCtx, {
    type: 'bar',
    data: { labels, datasets },
    options: {
      responsive: true,
      scales: { y: { beginAtZero: true } },
      plugins: { legend: { display: false } }
    }
  }));

  // Stacked family total per day
  const familyTotals = labels.map((_, idx) => people.reduce((sum, p) => sum + (Number.isFinite(p.days[idx]) ? p.days[idx] : 0), 0));
  charts.push(new Chart(stackedCtx, {
    type: 'bar',
    data: { labels, datasets: [{ label: 'Family Total', data: familyTotals, borderWidth: 1 }]},
    options: { responsive: true, scales: { y: { beginAtZero: true } }, plugins: { legend: { display: false } } }
  }));

  // Lines per person
  charts.push(new Chart(linesCtx, {
    type: 'line',
    data: {
      labels,
      datasets: people.map(p => ({ label: p.name, data: p.days.map(v => Number.isFinite(v) ? v : null), spanGaps: true }))
    },
    options: { responsive: true, plugins: { legend: { display: false } }, scales: { y: { beginAtZero: true } } }
  }));
}

function renderCards({ people }) {
  const container = document.getElementById('cards');
  const viewer = getCurrentUser();
  container.innerHTML = people.map(p => {
    const badges = [];
    p.days.forEach((v, idx) => {
      if (!Number.isFinite(v)) return;
      const day = DAY_ORDER[idx];
      if (v >= THIRTY_K_THRESHOLD) badges.push(`<span class="chip bg-emerald-500/15 text-emerald-300" title="${day}">30k</span>`);
      if (v >= CHERYL_THRESHOLD) badges.push(`<span class="chip bg-yellow-500/15 text-yellow-300" title="${day}">Cheryl</span>`);
      if (v >= DAILY_GOAL_15K) badges.push(`<span class="chip bg-lime-500/15 text-lime-300" title="${day}">15k</span>`);
      if (v >= DAILY_GOAL_10K) badges.push(`<span class="chip bg-green-500/15 text-green-300" title="${day}">10k</span>`);
      if (v >= DAILY_GOAL_2_5K) badges.push(`<span class="chip bg-cyan-500/15 text-cyan-300" title="${day}">2.5k</span>`);
      if (v >= DAILY_GOAL_1K) badges.push(`<span class="chip bg-blue-500/15 text-blue-300" title="${day}">1k</span>`);
    });
    const subjectRow = globalData.find(r => r.Name === p.name) || {};
    const canSee = maySeeNumbers(viewer, subjectRow, globalData);
    const dash = '<span class="text-white/40">—</span>';
    const total = canSee ? fmt(p.total) : dash;
    const avg = canSee ? fmt(p.avg) : dash;
    const best = canSee ? fmt(p.best) : dash;

    return `
    <article class="card p-4 space-y-2">
      <div class="flex items-center justify-between">
        <h4 class="text-lg font-bold">${safe(p.name)}</h4>
        <div class="flex flex-wrap gap-1">${badges.join('')}</div>
      </div>
      <div class="grid grid-cols-3 gap-2 text-center">
        <div class="bg-white/5 rounded-lg p-2">
          <div class="text-xs text-white/60">Total</div>
          <div class="text-xl font-extrabold stat">${total}</div>
        </div>
        <div class="bg-white/5 rounded-lg p-2">
          <div class="text-xs text-white/60">Average</div>
          <div class="text-xl font-extrabold stat">${avg}</div>
        </div>
        <div class="bg-white/5 rounded-lg p-2">
          <div class="text-xs text-white/60">Best Day</div>
          <div class="text-xl font-extrabold stat">${best}</div>
        </div>
      </div>
      <div class="text-xs text-white/70">
        ${DAY_ORDER.map((d, i) => {
          const v = p.days[i];
          const val = (canSee && Number.isFinite(v)) ? fmt(v) : '<span class="text-white/40">—</span>';
          return `<span class="mr-2">${d.slice(0,3)}: <span class="stat">${val}</span></span>`;
        }).join(' ')}
      </div>
    </article>`;
  }).join('');
}

function renderMissing({ missing }) {
  const el = document.getElementById('missingList');
  const items = [];
  missing.forEach(m => {
    if (m.blanks.length) {
      const nudge = pickNudge();
      items.push(
        `<li class="flex items-start justify-between gap-2">
          <div>
            <span class="font-semibold">${safe(m.name)}</span> missing: ${m.blanks.join(', ')}.
            <span class="text-white/60 italic ml-1">Nudge: ${safe(nudge)}</span>
          </div>
          <button class="px-2 py-1 text-xs rounded bg-white/10 hover:bg-white/20 copy-nudge"
                  data-name="${safe(m.name)}"
                  data-days="${safe(m.blanks.join(', '))}"
                  data-nudge="${safe(nudge)}">Copy nudge</button>
        </li>`
      );
    }
  });
  el.innerHTML = items.length ? items.join('') : '<li>Everyone has reported for all days so far.</li>';

  el.onclick = async (e) => {
    const btn = e.target.closest('.copy-nudge');
    if (!btn) return;
    const name = btn.dataset.name;
    const days = btn.dataset.days;
    const nudge = btn.dataset.nudge;
    const msg = `Hey ${name} — looks like no report for ${days}. ${nudge}`;

    const prev = btn.textContent;
    const setTempLabel = (text) => {
      btn.textContent = text;
      setTimeout(() => (btn.textContent = prev), 1200);
    };

    const copyWithExecCommand = (text) => {
      try {
        const ta = document.createElement('textarea');
        ta.value = text;
        ta.setAttribute('readonly', '');
        ta.style.position = 'fixed';
        ta.style.top = '-9999px';
        ta.style.opacity = '0';
        document.body.appendChild(ta);
        ta.focus();
        ta.select();
        ta.setSelectionRange(0, ta.value.length);
        const ok = document.execCommand && document.execCommand('copy');
        document.body.removeChild(ta);
        return !!ok;
      } catch (err) {
        return false;
      }
    };

    // Try modern clipboard API first (may fail on insecure origins)
    if (navigator.clipboard && window.isSecureContext) {
      try {
        await navigator.clipboard.writeText(msg);
        setTempLabel('Copied!');
        return;
      } catch (err) {
        // fall through to legacy copy
      }
    }

    // Fallback to execCommand
    if (copyWithExecCommand(msg)) {
      setTempLabel('Copied!');
      return;
    }

    // Final fallback: show alert with manual copy instructions
    alert(`Copy this message manually:\n\n${msg}\n\nSelect the text above, then press Cmd/Ctrl+C to copy and paste it where needed.`);
    setTempLabel('Copy failed');
  };
}

function pickNudge() {
  return NUDGES[Math.floor(Math.random()*NUDGES.length)];
}

// ------- Utils -------
function fmt(n) { return Number.isFinite(n) ? n.toLocaleString() : ""; }
function safe(s) { return String(s ?? '').replace(/[&<>]/g, c => ({'&':'&','<':'<','>':'>'}[c])); }

/* ---------------- Privacy / Login Helpers ---------------- */
// Returns current user name or null
function getCurrentUser() {
  return localStorage.getItem('kw.currentUser') || null;
}
function setCurrentUser(name) {
  if (name) localStorage.setItem('kw.currentUser', name);
  const link = document.getElementById('switchUserLink');
  if (link) link.classList.remove('hidden');
}
function clearCurrentUser() {
  localStorage.removeItem('kw.currentUser');
  const link = document.getElementById('switchUserLink');
  if (link) link.classList.add('hidden');
}

// Privacy rule as specified
function maySeeNumbers(viewerName, subjectRow, allRows) {
  if (!subjectRow) return false;
  if (subjectRow.Name === viewerName) return true;
  const mode = (subjectRow.ShareMode || "private").toLowerCase();
  if (mode === "public") return true;
  if (mode === "friends") {
    const subjectList = (subjectRow.ShareWith || "").split(",").map(s=>s.trim()).filter(Boolean);
    const viewerRow = allRows.find(r => r.Name === viewerName);
    const viewerList = ((viewerRow?.ShareWith) || "").split(",").map(s=>s.trim()).filter(Boolean);
    return subjectList.includes(viewerName) && viewerList.includes(subjectRow.Name);
  }
  return false; // private
}

// Ensure user selection before rendering sensitive sections
function ensureUserSelected(cb) {
  if (DISABLE_LOGIN) {
    // No login flow; just render
    cb();
    return;
  }
  const current = getCurrentUser();
  if (current && globalData.some(r => r.Name === current)) {
    setCurrentUser(current); // show link
    cb();
    return;
  }
  showLoginModal(cb);
}

// Build and show login modal
function showLoginModal(onSuccess) {
  if (DISABLE_LOGIN) {
    onSuccess();
    return;
  }
  const existing = document.getElementById('loginModal');
  if (existing) existing.remove();
  const names = globalData.map(r => r.Name);
  const modal = document.createElement('div');
  modal.id = 'loginModal';
  modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black/70 p-4';
  modal.innerHTML = `
    <div class="card w-full max-w-sm p-5 space-y-4">
      <h2 class="text-lg font-bold">Select User</h2>
      <p class="text-xs text-white/70">Enter a PIN (if you have one) or select your name. If your row has a PIN you must enter it correctly.</p>
      <div class="space-y-2">
        <label class="block text-xs uppercase tracking-wide text-white/60">PIN</label>
        <input id="loginPin" type="password" inputmode="numeric" class="w-full px-3 py-2 rounded bg-white/10 outline-none focus:ring ring-white/20" placeholder="PIN (optional)" />
      </div>
      <div class="space-y-2">
        <label class="block text-xs uppercase tracking-wide text-white/60">Select Name</label>
        <select id="loginName" class="w-full px-3 py-2 rounded bg-white/10 outline-none focus:ring ring-white/20">
          <option value="">— Select name —</option>
          ${names.map(n => `<option value="${safe(n)}">${safe(n)}</option>`).join('')}
        </select>
      </div>
      <div id="loginError" class="text-rose-300 text-xs h-4"></div>
      <div class="flex justify-end gap-2 pt-2">
        <button id="loginEnter" class="px-3 py-2 rounded-lg bg-white/10 hover:bg-white/20 text-sm font-semibold">Enter</button>
      </div>
    </div>
  `;
  document.body.appendChild(modal);

  function resolve() {
    const pinVal = document.getElementById('loginPin').value.trim();
    const selName = document.getElementById('loginName').value.trim();
    const errEl = document.getElementById('loginError');

    // PIN direct match path
    if (pinVal) {
      const matches = globalData.filter(r => r.PIN && r.PIN === pinVal);
      if (matches.length === 1) {
        setCurrentUser(matches[0].Name);
        modal.remove();
        onSuccess();
        return;
      }
      if (matches.length > 1) {
        errEl.textContent = "PIN matches multiple users. Select your name.";
        return;
      }
      // else fall through to name logic
    }

    if (selName) {
      const row = globalData.find(r => r.Name === selName);
      if (!row) {
        errEl.textContent = "Unknown name.";
        return;
      }
      if (row.PIN) {
        if (!pinVal) {
          errEl.textContent = "PIN required for that user.";
          return;
        }
        if (row.PIN !== pinVal) {
          errEl.textContent = "Incorrect PIN.";
          return;
        }
      }
      setCurrentUser(row.Name);
      modal.remove();
      onSuccess();
      return;
    }

    errEl.textContent = "Enter a valid PIN or select a name.";
  }

  document.getElementById('loginEnter').addEventListener('click', resolve);
  modal.addEventListener('keydown', e => {
    if (e.key === 'Enter') {
      e.preventDefault();
      resolve();
    }
  });
}

// Override parse/render gating by wrapping renderAll call
function gatedRenderAll() {
  ensureUserSelected(() => renderAll());
}

/* ---------------- End Privacy / Login ---------------- */

// ------- Events -------
window.addEventListener('DOMContentLoaded', async () => {
  await loadConfig();

  // Hide/disable UI based on config
  if (DISABLE_CSV_UPLOAD) {
    document.getElementById('fileInput')?.classList.add('hidden');
    document.getElementById('reloadBtn')?.classList.add('hidden');
  }

  if (DISABLE_LOGIN) {
    const switchLink = document.getElementById('switchUserLink');
    if (switchLink) switchLink.classList.add('hidden');
  }

  // Load weeks manifest and initial CSV selection (if present)
  await loadWeeksManifest();
  if (weeksManifest && weeksManifest.length) {
    buildWeekSelector(weeksManifest);
    // Default selection preference: label === "Current Week" OR file containing kings_walk_week.csv
    let defaultIdx = weeksManifest.findIndex(w => (w.label && w.label === 'Current Week') || (w.file && w.file.indexOf('kings_walk_week.csv') !== -1));
    if (defaultIdx === -1) defaultIdx = 0;
    const sel = weeksManifest[defaultIdx];
    // set select value if present
    if (document.getElementById('weekSelector')) {
      document.getElementById('weekSelector').value = sel.file || '';
    }
    await loadCsvForFile(sel.file, sel.label);
  } else {
    // fallback to original behavior when no manifest entries
    await tryFetchDefault();
  }

  if (!DISABLE_CSV_UPLOAD) {
    document.getElementById('reloadBtn')?.addEventListener('click', () => {
      if (currentWeekFile) {
        loadCsvForFile(currentWeekFile, currentWeekLabel);
      } else {
        tryFetchDefault();
      }
    });

    document.getElementById('fileInput')?.addEventListener('change', (e) => {
      const file = e.target.files?.[0];
      if (!file) return;
      const reader = new FileReader();
      reader.onload = (ev) => parseCSV(ev.target.result);
      reader.readAsText(file);
      setStatus(`Loaded ${file.name}`, 'ok');
    });
  }

  if (!DISABLE_LOGIN) {
    const switchLink = document.getElementById('switchUserLink');
    if (switchLink) {
      switchLink.addEventListener('click', () => {
        showLoginModal(() => renderAll());
      });
    }
  }
});


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/sign.py =====

# /Users/michaelking/Documents/projects/king-walk-week/api/sign.py
import base64, hashlib, hmac
auth = "71883e6161a91b33bc6163a5670db921"
url  = "https://mikebking.com/dev/html/walk/api/sms_status.php"
post = {
  "From": "+18015550123",
  "MessageSid": "SM_test123",
  "MessageStatus": "delivered",
  "To": "+13855032310",
}
to_sign = url + "".join(k + post[k] for k in sorted(post.keys()))
sig = base64.b64encode(hmac.new(auth.encode(), to_sign.encode(), hashlib.sha1).digest()).decode()
print(sig)

# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/gather_code.py =====

#!/usr/bin/env python3
"""
gather_code.py  –  Consolidate source files across a project.

Usage:
  gather_code.py [--root ROOT] [--ext EXTENSIONS] [--skip DIRS] [--skip-files NAMES] [--output FILE]
                 [--version]

Examples:
  # Consolidate all .py and .md files, skipping venv and .git:
  gather_code.py --ext .py,.md --skip .git,venv --output all_code.txt

  # Just print version and exit:
  gather_code.py --version
"""

import os
import sys
import argparse
import logging

__version__ = "1.1.0"

# default extensions and directories to skip
DEFAULT_EXTS = [".py", ".js", ".jsx", ".ts", ".tsx", ".mjs", ".cjs", ".json", ".yml", ".yaml", ".html", ".htm"]
DEFAULT_SKIP_DIRS = {".git", "__pycache__", "venv", ".venv", "env", ".env", "node_modules", "dist", "build", ".idea", ".vscode", "tmp", "temp", "cache", "logs", "log", ".cache", ".logs", ".next", ".nuxt", ".svelte-kit", ".turbo", ".vite", ".parcel-cache", ".rollup.cache", ".pnpm-store", ".yarn", ".yalc", "coverage", ".nyc_output", "storybook-static", ".vercel", "out"}
DEFAULT_SKIP_FILES = {"package-lock.json", "pnpm-lock.yaml", "yarn.lock", "bun.lockb"}

def parse_args():
    p = argparse.ArgumentParser(
        description="Consolidate code files into a single text file."
    )
    p.add_argument(
        "--root",
        "-r",
        default=".",
        help="Root directory to start searching (default: current dir)."
    )
    p.add_argument(
        "--ext",
        "-e",
        default=",".join(DEFAULT_EXTS),
        help="Comma-separated list of file extensions to include (e.g. .py,.js)."
    )
    p.add_argument(
        "--skip",
        "-s",
        default=",".join(DEFAULT_SKIP_DIRS),
        help="Comma-separated list of directory names to skip."
    )
    p.add_argument(
        "--skip-files",
        "-F",
        default=",".join(DEFAULT_SKIP_FILES),
        help="Comma-separated list of file names to skip (e.g. lockfiles)."
    )
    p.add_argument(
        "--output",
        "-o",
        default="consolidated_code.txt",
        help="Path of the output file (default: consolidated_code.txt)."
    )
    p.add_argument(
        "--version",
        action="store_true",
        help="Show script version and exit."
    )
    return p.parse_args()

def should_skip_dir(dirname, skip_set):
    """Return True if `dirname` should be skipped."""
    return dirname in skip_set

def gather_files(root, exts, skip_dirs, skip_files):
    """Yield full paths of files under root with allowed extensions."""
    for dirpath, dirs, files in os.walk(root):
        # modify dirs in-place to skip unwanted subdirs
        dirs[:] = [d for d in dirs if not should_skip_dir(d, skip_dirs)]
        for fname in files:
            if fname in skip_files:
                continue
            if os.path.splitext(fname)[1] in exts:
                yield os.path.join(dirpath, fname)

def consolidate(files, out_path):
    """Read each file, append to out_path, logging errors per file."""
    total = 0
    errors = 0
    with open(out_path, "w", encoding="utf-8") as out_f:
        out_f.write(f"# Consolidated on {os.path.abspath(out_path)}\n")
        out_f.write(f"# Script version: {__version__}\n\n")
        for filepath in files:
            total += 1
            try:
                with open(filepath, "r", encoding="utf-8", errors="replace") as f:
                    content = f.read()
                out_f.write(f"\n\n# ===== FILE: {filepath} =====\n\n")
                out_f.write(content)
            except Exception as e:
                errors += 1
                logging.warning(f"Error reading {filepath}: {e}")
    return total, errors

def main():
    args = parse_args()
    if args.version:
        print(f"gather_code.py version {__version__}")
        sys.exit(0)

    # configure logging
    logging.basicConfig(
        level=logging.INFO,
        format="%(levelname)-8s %(message)s"
    )

    exts = {e.strip() for e in args.ext.split(",") if e.strip()}
    skip_dirs = {d.strip() for d in args.skip.split(",") if d.strip()}
    skip_files = {f.strip() for f in args.skip_files.split(",") if f.strip()}

    logging.info(f"Starting walk at root: {args.root}")
    logging.info(f"Including extensions: {sorted(exts)}")
    logging.info(f"Skipping directories: {sorted(skip_dirs)}")
    logging.info(f"Skipping files: {sorted(skip_files)}")
    logging.info(f"Output will be saved to: {args.output}")

    files = list(gather_files(args.root, exts, skip_dirs, skip_files))
    logging.info(f"Found {len(files)} files to process.")

    total, errors = consolidate(files, args.output)
    logging.info(f"Consolidated {total} files with {errors} errors.")
    if errors:
        logging.warning("Some files could not be read; check warnings above.")

if __name__ == "__main__":
    main()


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/data/weeks/manifest.json =====

{
  "weeks": [
    {
      "label": "Current Week",
      "file": "/kings_walk_week.csv"
    },
    {
      "label": "Aug 12–17",
      "file": "2025-08-17.csv"
    }
  ]
}