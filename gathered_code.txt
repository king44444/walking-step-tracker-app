# Consolidated on /Users/michaelking/Documents/projects/king-walk-week/gathered_code.txt
# Script version: 1.1.0



# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/test_lifetime_awards.php =====

<?php
/**
 * Simple test script for lifetime award generation
 * Run from command line: php test_lifetime_awards.php
 */

require_once __DIR__ . '/vendor/autoload.php';
\App\Core\Env::bootstrap(__DIR__);

require_once __DIR__ . '/api/lib/ai_images.php';
require_once __DIR__ . '/api/lib/settings.php';

echo "Testing Lifetime Award Image Generation\n";
echo "========================================\n\n";

// Test user with interests
$testUser = [
    'id' => 9999,
    'name' => 'Test Walker',
    'interests' => 'Balloon Art, Dogs, Faith'
];

echo "User interests: {$testUser['interests']}\n";
echo "Note: Each generation randomly picks ONE interest from the list\n\n";

// Test multiple generations of the same milestone to see random selection
echo "Testing random interest selection (generating same milestone 3 times):\n";
for ($i = 1; $i <= 3; $i++) {
    echo "\nGeneration #{$i} for 100,000 steps:\n";
    
    $result = ai_image_generate([
        'user_id' => $testUser['id'],
        'user_name' => $testUser['name'],
        'user' => $testUser,
        'award_kind' => 'lifetime_steps',
        'milestone_value' => 100000,
        'style' => 'badge',
        'force' => true
    ]);
    
    if ($result['ok'] ?? false) {
        echo "  ✓ Success: {$result['path']}\n";
        if (isset($result['meta']['prompt'])) {
            // Extract which interest was selected
            $prompt = $result['meta']['prompt'];
            if (preg_match('/interest: ([^.]+)\./', $prompt, $matches)) {
                echo "  Selected interest: {$matches[1]}\n";
            }
        }
    } else {
        echo "  ✗ Failed: " . ($result['error'] ?? 'unknown error') . "\n";
    }
}

echo "\n" . str_repeat("=", 60) . "\n\n";

// Test different milestones
$milestones = [200000, 500000];

foreach ($milestones as $milestone) {
    echo "Testing milestone: " . number_format($milestone) . " steps\n";
    
    $result = ai_image_generate([
        'user_id' => $testUser['id'],
        'user_name' => $testUser['name'],
        'user' => $testUser,
        'award_kind' => 'lifetime_steps',
        'milestone_value' => $milestone,
        'style' => 'badge',
        'force' => true
    ]);
    
    if ($result['ok'] ?? false) {
        echo "  ✓ Success: {$result['path']}\n";
        if (isset($result['meta']['prompt'])) {
            // Extract which interest was selected
            $prompt = $result['meta']['prompt'];
            if (preg_match('/interest: ([^.]+)\./', $prompt, $matches)) {
                echo "  Selected interest: {$matches[1]}\n";
            }
        }
    } else {
        echo "  ✗ Failed: " . ($result['error'] ?? 'unknown error') . "\n";
    }
    echo "\n";
}

// Test user without interests
$testUser2 = [
    'id' => 9998,
    'name' => 'Jane Doe',
    'interests' => null
];

echo "Testing user without interests (should use fallback theme)\n";
$result = ai_image_generate([
    'user_id' => $testUser2['id'],
    'user_name' => $testUser2['name'],
    'user' => $testUser2,
    'award_kind' => 'lifetime_steps',
    'milestone_value' => 150000,
    'style' => 'badge',
    'force' => true
]);

if ($result['ok'] ?? false) {
    echo "  ✓ Success: {$result['path']}\n";
} else {
    echo "  ✗ Failed: " . ($result['error'] ?? 'unknown error') . "\n";
}

echo "\n========================================\n";
echo "Test complete!\n";
echo "Check site/assets/awards/ for generated images\n";


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/index.html =====

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta http-equiv="refresh" content="0; url=/site/">
  <link rel="icon" href="/dev/html/walk/favicon.ico">
  <title>Redirecting…</title>
  <script>
    (function() {
      var target = "/site/";
      if (location.pathname !== "/" && !location.pathname.startsWith("/site/")) {
        // If served from a subpath, build absolute to /site/
        target = "/site/";
      }
      try { window.location.replace(target); } catch (e) { window.location.href = target; }
    })();
  </script>
  <style>
    html, body { height: 100%; margin: 0; background: #0b1020; color: #e6ecff; display: grid; place-items: center; font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; }
    a { color: #9ecbff; }
    .card { padding: 1rem 1.25rem; background: #0f1530; border: 1px solid rgba(255,255,255,0.08); border-radius: 12px; }
  </style>
</head>
<body>
  <div class="card">
    Redirecting to <a href="/site/">/site/</a> …
  </div>
</body>
</html>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/phinx.php =====

<?php
$path = getenv('DB_PATH') ?: __DIR__ . '/data/walkweek.sqlite';
return [
  'paths' => [
    'migrations' => '%%PHINX_CONFIG_DIR%%/database/migrations',
    'seeds' => '%%PHINX_CONFIG_DIR%%/database/seeds',
  ],
  'environments' => [
    'default_environment' => 'prod',
    'prod' => [
      'adapter' => 'sqlite',
      'name' => $path,
    ],
  ],
  'version_order' => 'creation'
];


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/composer.json =====

{
  "name": "king-walk-week/app",
  "type": "project",
  "require": {
    "vlucas/phpdotenv": "^5.6"
  },
  "require-dev": {
    "robmorgan/phinx": "^0.16.10",
    "phpunit/phpunit": "^11.2",
    "fakerphp/faker": "^1.23",
    "phpstan/phpstan": "^1.11",
    "squizlabs/php_codesniffer": "^3.10"
  },
  "autoload": {
    "psr-4": {
      "App\\": "app/"
    }
  },
  "scripts": {
    "post-autoload-dump": [
      "@php -r \"file_exists('vendor/autoload.php') || exit(0);\""
    ],
    "migrate": "phinx migrate -c phinx.php",
    "rollback": "phinx rollback -c phinx.php -t 0",
    "test": "phpunit",
    "stan": "phpstan analyse",
    "cs": "phpcs"
  }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/database/migrations/20251006000000_weeks_normalize.php =====

<?php
declare(strict_types=1);

use Phinx\Migration\AbstractMigration;

final class WeeksNormalize extends AbstractMigration
{
    public function up(): void
    {
        // Ensure weeks table exists (noop if not using Phinx-managed schema)
        if (!$this->hasTable('weeks')) {
            return;
        }

        // Add starts_on column if missing (TEXT ISO8601)
        if (!$this->hasColumn('weeks', 'starts_on')) {
            $this->execute("ALTER TABLE weeks ADD COLUMN starts_on TEXT");
        }

        // Migrate any legacy 'week' values into starts_on with zero-padding.
        // Patterns: YYYY-MM-D -> pad day; YYYY-M- DD -> pad month.
        $this->execute(<<<SQL
UPDATE weeks
SET starts_on = CASE
  WHEN starts_on IS NOT NULL AND length(starts_on)=10 THEN starts_on
  WHEN week IS NULL THEN starts_on
  WHEN length(week)=10 THEN week
  WHEN week GLOB '____-__-_' THEN substr(week,1,8)||'0'||substr(week,9)
  WHEN week GLOB '____-_-__' THEN substr(week,1,5)||'0'||substr(week,6)
  ELSE week
END
WHERE (starts_on IS NULL OR starts_on='');
SQL);

        // Unique index on starts_on for canonical week identity.
        $this->execute("CREATE UNIQUE INDEX IF NOT EXISTS weeks_starts_on_uq ON weeks(starts_on)");
        $this->execute("CREATE INDEX IF NOT EXISTS idx_weeks_starts_on ON weeks(starts_on)");

        // Trigger: auto-pad one or two digit month/day on INSERT.
        $this->execute(<<<SQL
CREATE TRIGGER IF NOT EXISTS trg_weeks_pad_insert
BEFORE INSERT ON weeks
FOR EACH ROW
WHEN NEW.starts_on IS NOT NULL AND NEW.starts_on NOT GLOB '____-__-__'
BEGIN
  SELECT CASE
    WHEN NEW.starts_on GLOB '____-__-_' THEN
      RAISE(IGNORE)
    WHEN NEW.starts_on GLOB '____-_-__' THEN
      RAISE(IGNORE)
  END;
END;
SQL);

        // Trigger: reject invalid formats on INSERT/UPDATE (guard rails).
        $this->execute(<<<SQL
CREATE TRIGGER IF NOT EXISTS trg_weeks_check_insert
BEFORE INSERT ON weeks
FOR EACH ROW
WHEN NEW.starts_on IS NOT NULL AND NEW.starts_on NOT GLOB '____-__-__'
BEGIN
  SELECT RAISE(ABORT,'invalid starts_on format, expected YYYY-MM-DD');
END;
SQL);
        $this->execute(<<<SQL
CREATE TRIGGER IF NOT EXISTS trg_weeks_check_update
BEFORE UPDATE OF starts_on ON weeks
FOR EACH ROW
WHEN NEW.starts_on IS NOT NULL AND NEW.starts_on NOT GLOB '____-__-__'
BEGIN
  SELECT RAISE(ABORT,'invalid starts_on format, expected YYYY-MM-DD');
END;
SQL);
    }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/database/migrations/20250909_000001_init.php =====

<?php
declare(strict_types=1);
use Phinx\Migration\AbstractMigration;

final class Init extends AbstractMigration {
  public function change(): void {
    if (!$this->hasTable('users')) {
      $this->table('users', ['id' => true, 'primary_key' => ['id']])
        ->addColumn('name', 'string')
        ->addColumn('phone', 'string', ['null' => true])
        ->addColumn('sex', 'string', ['null' => true])
        ->addColumn('age', 'integer', ['null' => true])
        ->addColumn('tag', 'string', ['null' => true])
        ->addColumn('photo_path', 'string', ['null' => true])
        ->addColumn('photo_consent', 'boolean', ['default' => 0])
        ->addTimestamps()
        ->create();
    }

    if (!$this->hasTable('weeks')) {
      $this->table('weeks', ['id' => true, 'primary_key' => ['id']])
        ->addColumn('label', 'string')
        ->addColumn('starts_on', 'date')
        ->addColumn('finalized_at', 'datetime', ['null' => true])
        ->addTimestamps()
        ->create();
    }

    if (!$this->hasTable('entries')) {
      $this->table('entries', ['id' => true, 'primary_key' => ['id']])
        ->addColumn('user_id', 'integer')
        ->addColumn('week_id', 'integer')
        ->addColumn('mon', 'integer', ['default' => 0])
        ->addColumn('tue', 'integer', ['default' => 0])
        ->addColumn('wed', 'integer', ['default' => 0])
        ->addColumn('thu', 'integer', ['default' => 0])
        ->addColumn('fri', 'integer', ['default' => 0])
        ->addColumn('sat', 'integer', ['default' => 0])
        ->addColumn('sun', 'integer', ['default' => 0])
        ->addColumn('locked', 'boolean', ['default' => 0])
        ->addColumn('human_reviewed', 'boolean', ['default' => 0])
        ->addTimestamps()
        ->addIndex(['user_id','week_id'], ['unique' => true])
        ->create();
    }

    if (!$this->hasTable('ai_messages')) {
      $this->table('ai_messages', ['id' => true, 'primary_key' => ['id']])
        ->addColumn('week_id', 'integer', ['null' => true])
        ->addColumn('user_id', 'integer', ['null' => true])
        ->addColumn('body', 'text')
        ->addColumn('approved', 'boolean', ['default' => 0])
        ->addColumn('sent_at', 'datetime', ['null' => true])
        ->addTimestamps()
        ->create();
    }

    if (!$this->hasTable('outbound_audit')) {
      $this->table('outbound_audit', ['id' => true, 'primary_key' => ['id']])
        ->addColumn('to_phone', 'string')
        ->addColumn('body', 'text')
        ->addColumn('provider', 'string', ['default' => 'twilio'])
        ->addColumn('status', 'string', ['default' => 'queued'])
        ->addColumn('provider_id', 'string', ['null' => true])
        ->addColumn('error', 'text', ['null' => true])
        ->addTimestamps()
        ->create();
    }
  }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/database/migrations/20251009203400_add_interests.php =====

<?php
declare(strict_types=1);
use Phinx\Migration\AbstractMigration;

final class AddInterests extends AbstractMigration {
  public function change(): void {
    // Check if column already exists
    $rows = $this->fetchAll("PRAGMA table_info(users)");
    $hasInterests = false;
    foreach ($rows as $row) {
      if ($row['name'] === 'interests') {
        $hasInterests = true;
        break;
      }
    }
    
    if (!$hasInterests) {
      $this->execute("ALTER TABLE users ADD COLUMN interests TEXT DEFAULT NULL");
    }
  }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/database/migrations/20251010000100_update_award_image_paths.php =====

<?php
declare(strict_types=1);

use Phinx\Migration\AbstractMigration;

final class UpdateAwardImagePaths extends AbstractMigration
{
    public function up(): void
    {
        // Update existing rows to point to the deployed webp files for user_id = 8
        $this->execute("UPDATE ai_awards SET image_path='awards/8/lifetime-steps-5000-20251010.webp' WHERE user_id=8 AND kind='lifetime_steps' AND milestone_value=5000;");
        $this->execute("UPDATE ai_awards SET image_path='awards/8/lifetime-steps-10000-20251010.webp' WHERE user_id=8 AND kind='lifetime_steps' AND milestone_value=10000;");
        $this->execute("UPDATE ai_awards SET image_path='awards/8/lifetime-steps-100000-20251010.webp' WHERE user_id=8 AND kind='lifetime_steps' AND milestone_value=100000;");
        $this->execute("UPDATE ai_awards SET image_path='awards/8/lifetime-steps-250000-20251010.webp' WHERE user_id=8 AND kind='lifetime_steps' AND milestone_value=250000;");
        $this->execute("UPDATE ai_awards SET image_path='awards/8/lifetime-steps-500000-20251010.webp' WHERE user_id=8 AND kind='lifetime_steps' AND milestone_value=500000;");

        // Insert missing rows if they don't exist (keep created_at as now)
        $this->execute("INSERT INTO ai_awards(user_id, kind, milestone_value, image_path, created_at) SELECT 8,'lifetime_steps',5000,'awards/8/lifetime-steps-5000-20251010.webp', datetime('now') WHERE NOT EXISTS(SELECT 1 FROM ai_awards WHERE user_id=8 AND kind='lifetime_steps' AND milestone_value=5000);");
        $this->execute("INSERT INTO ai_awards(user_id, kind, milestone_value, image_path, created_at) SELECT 8,'lifetime_steps',10000,'awards/8/lifetime-steps-10000-20251010.webp', datetime('now') WHERE NOT EXISTS(SELECT 1 FROM ai_awards WHERE user_id=8 AND kind='lifetime_steps' AND milestone_value=10000);");
        $this->execute("INSERT INTO ai_awards(user_id, kind, milestone_value, image_path, created_at) SELECT 8,'lifetime_steps',100000,'awards/8/lifetime-steps-100000-20251010.webp', datetime('now') WHERE NOT EXISTS(SELECT 1 FROM ai_awards WHERE user_id=8 AND kind='lifetime_steps' AND milestone_value=100000);");
        $this->execute("INSERT INTO ai_awards(user_id, kind, milestone_value, image_path, created_at) SELECT 8,'lifetime_steps',250000,'awards/8/lifetime-steps-250000-20251010.webp', datetime('now') WHERE NOT EXISTS(SELECT 1 FROM ai_awards WHERE user_id=8 AND kind='lifetime_steps' AND milestone_value=250000);");
        $this->execute("INSERT INTO ai_awards(user_id, kind, milestone_value, image_path, created_at) SELECT 8,'lifetime_steps',500000,'awards/8/lifetime-steps-500000-20251010.webp', datetime('now') WHERE NOT EXISTS(SELECT 1 FROM ai_awards WHERE user_id=8 AND kind='lifetime_steps' AND milestone_value=500000);");
    }

    public function down(): void
    {
        // Revert the image_path changes for the specific deployed filenames created by this migration
        $this->execute("UPDATE ai_awards SET image_path = NULL WHERE user_id=8 AND kind='lifetime_steps' AND image_path LIKE 'awards/8/lifetime-steps-%-20251010.webp';");
    }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/database/migrations/20250908000000_baseline.php =====

<?php
use Phinx\Migration\AbstractMigration;

class Baseline extends AbstractMigration
{
    public function up(): void
    {
        // baseline migration — intentionally empty to anchor schema version
    }

    public function down(): void
    {
        // no-op
    }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/database/migrations/20251010000000_user_awards_dates.php =====

<?php
declare(strict_types=1);

use Phinx\Migration\AbstractMigration;

final class UserAwardsDates extends AbstractMigration
{
    public function up(): void
    {
        // Create user_awards_cache table for caching computed award dates
        $this->execute(<<<SQL
CREATE TABLE IF NOT EXISTS user_awards_cache (
  user_id INTEGER NOT NULL,
  award_key TEXT NOT NULL,
  threshold INTEGER NOT NULL,
  awarded_at TEXT NOT NULL,
  PRIMARY KEY (user_id, award_key),
  FOREIGN KEY (user_id) REFERENCES users(id)
);
SQL);

        // Add indexes for performance
        $this->execute("CREATE INDEX IF NOT EXISTS idx_awardscache_user ON user_awards_cache(user_id);");
        
        // Add index on entries table for efficient queries
        $this->execute("CREATE INDEX IF NOT EXISTS idx_entries_user_week ON entries(user_id, week_id);");
    }

    public function down(): void
    {
        $this->execute("DROP INDEX IF EXISTS idx_awardscache_user;");
        $this->execute("DROP INDEX IF EXISTS idx_entries_user_week;");
        $this->execute("DROP TABLE IF EXISTS user_awards_cache;");
    }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/app/Core/Env.php =====

<?php

namespace App\Core;

use Dotenv\Dotenv;

final class Env
{
    public static function bootstrap(string $root): void
    {
        if (file_exists($root . '/.env')) {
            $dotenv = Dotenv::createImmutable($root);
            $dotenv->safeLoad();
        }
    }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/app/Core/Router.php =====

<?php

namespace App\Core;

final class Router
{
    private array $routes = [];
    public function add(string $method, string $path, callable $handler): void
    {
        $this->routes[strtoupper($method)][$path] = $handler;
    }
    public function dispatch(string $method, string $path): void
    {
        $method = strtoupper($method);
        if (isset($this->routes[$method][$path])) {
            echo call_user_func($this->routes[$method][$path]);
            return;
        }
      // fallback to legacy files if they exist
        $legacy = $this->legacyPath($path);
        if ($legacy && file_exists($legacy)) {
            require $legacy;
            return;
        }
        http_response_code(404);
        echo 'Not found';
    }
    private function legacyPath(string $path): ?string
    {
      // keep legacy /api/*.php and /admin/*.php working
        $path = trim($path, '/');
        if (preg_match('#^(api|admin)/.+\.php$#', $path)) {
            return __DIR__ . '/../../' . $path;
        }
        return null;
    }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/app/Config/DB.php =====

<?php

namespace App\Config;

use PDO;

final class DB
{
    public static function pdo(): PDO
    {
        // Memoize a single PDO instance per-request to ensure callers share the same connection.
        static $instance = null;
        if ($instance instanceof PDO) {
            return $instance;
        }

        $dbPath = $_ENV['DB_PATH'] ?? (__DIR__ . '/../../data/walkweek.sqlite');
        // Normalize relative DB_PATH to project root (two dirs up from this file)
        if (!preg_match('~^/|^[A-Za-z]:(\\\\|/)~', $dbPath)) { // not absolute (POSIX or Windows)
            $base = dirname(__DIR__, 2); // project root
            $dbPath = rtrim($base, '/\\') . '/' . ltrim($dbPath, './\\');
        }
        $dir = dirname($dbPath);
        if (!is_dir($dir)) {
            mkdir($dir, 0775, true);
        }

        $pdo = new PDO('sqlite:' . $dbPath, null, null, [
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
            PDO::ATTR_TIMEOUT => 10,
        ]);

        // Core pragmas to make SQLite resilient under concurrency
        try {
            // enable foreign keys
            $pdo->exec('PRAGMA foreign_keys=ON');

            // busy timeout (milliseconds) — also keep PDO::ATTR_TIMEOUT (seconds) for driver-level waits
            $pdo->exec('PRAGMA busy_timeout=10000');

            // Ensure WAL mode is enabled and verify result
            $current = strtolower((string)$pdo->query('PRAGMA journal_mode')->fetchColumn());
            if ($current !== 'wal') {
                // request WAL; sqlite returns the new mode when setting it
                $pdo->exec('PRAGMA journal_mode=WAL');
                $current = strtolower((string)$pdo->query('PRAGMA journal_mode')->fetchColumn());
            }

            // Other performance/resilience pragmas
            $pdo->exec('PRAGMA synchronous=NORMAL');
            $pdo->exec('PRAGMA temp_store=MEMORY');
            $pdo->exec('PRAGMA wal_autocheckpoint=1000');
            $pdo->exec('PRAGMA journal_size_limit=67108864');
        } catch (\Throwable $e) {
            // Avoid hard-failing here; log and continue with best-effort pragmas
            error_log('DB::pdo PRAGMA setup failed: ' . $e->getMessage());
        }

        $instance = $pdo;
        return $instance;
    }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/app/Security/Csrf.php =====

<?php

namespace App\Security;

final class Csrf
{
    public static function token(): string
    {
        if (empty($_SESSION['csrf_secret'])) {
            $_SESSION['csrf_secret'] = $_ENV['CSRF_SECRET'] ?? bin2hex(random_bytes(16));
        }
        $t = bin2hex(random_bytes(16));
        $_SESSION['csrf_tokens'][$t] = time();
        return $t;
    }
    public static function validate(string $t): bool
    {
        if (!isset($_SESSION['csrf_tokens'][$t])) {
            return false;
        }
        unset($_SESSION['csrf_tokens'][$t]);
        return true;
    }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/app/Security/AdminAuth.php =====

<?php

namespace App\Security;

final class AdminAuth
{
    public static function require(): void
    {
        $u = $_ENV['ADMIN_USER'] ?? null;
        $p = $_ENV['ADMIN_PASS'] ?? null;
        if (!$u || !$p) {
            return;
        }
        $user = $_SERVER['PHP_AUTH_USER'] ?? '';
        $pass = $_SERVER['PHP_AUTH_PW'] ?? '';
        if ($user !== $u || $pass !== $p) {
            header('WWW-Authenticate: Basic realm="KW Admin"');
            http_response_code(401);
            echo 'Auth required';
            exit;
        }
    }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/app/Support/Tx.php =====

<?php

namespace App\Support;

use App\Config\DB;
use Throwable;

final class Tx
{
    /**
     * Run $fn inside a SQLite transaction using BEGIN IMMEDIATE.
     * Retries on error (e.g., "database is locked") with exponential backoff.
     *
     * NOTE: If $pdo->inTransaction() is true we will call $fn directly to avoid nested
     * transactions (assume caller manages the transaction).
     *
     * @param callable $fn function(PDO $pdo)
     * @param int $retries number of retries on failure
     * @param int $sleepMs initial sleep in milliseconds
     * @param int $maxSleepMs maximum sleep between retries in milliseconds
     * @return mixed
     * @throws Throwable
     */
    public static function with(callable $fn, int $retries = 5, int $sleepMs = 200, int $maxSleepMs = 5000)
    {
        $pdo = DB::pdo();

        // If already in a transaction, avoid starting another.
        if ($pdo->inTransaction()) {
            return $fn($pdo);
        }

        $attempt = 0;
        $sleep = max(1, $sleepMs);

        while (true) {
            try {
                $pdo->exec('BEGIN IMMEDIATE');
                $res = $fn($pdo);
                $pdo->exec('COMMIT');
                return $res;
            } catch (Throwable $e) {
                // Ensure we rollback if we started a transaction.
                try {
                    if ($pdo->inTransaction()) {
                        $pdo->exec('ROLLBACK');
                    }
                } catch (Throwable $rb) {
                    // swallow rollback errors so the original exception is preserved
                }

                if ($attempt >= $retries) {
                    throw $e;
                }

                // Exponential backoff with small jitter (+/-10%)
                $jitter = (int)round($sleep * 0.1);
                $rand = ($jitter > 0) ? mt_rand(-$jitter, $jitter) : 0;
                $wait = max(1, min($maxSleepMs, $sleep + $rand));

                usleep($wait * 1000);

                // increase sleep for next attempt
                $sleep = min($maxSleepMs, $sleep * 2);
                $attempt++;
            }
        }
    }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/app/Controllers/AdminController.php =====

<?php

namespace App\Controllers;

use App\Security\AdminAuth;
use App\Config\DB;
use App\Security\Csrf;
use App\Support\Tx;

final class AdminController
{
    public function ai(): string
    {
        AdminAuth::require();
        ob_start();
        require __DIR__ . '/../../templates/admin/ai.php';
        return ob_get_clean();
    }

    public function entries(): string
    {
        AdminAuth::require();
        $pdo = DB::pdo();

        // Load weeks (compatible with legacy schema)
        $weeks = $pdo->query("SELECT week, COALESCE(label, week) AS label, COALESCE(finalized, finalized_at IS NOT NULL, 0) AS finalized FROM weeks ORDER BY week DESC")->fetchAll();

        $curWeek = $_GET['week'] ?? ($weeks[0]['week'] ?? '');
        $entries = [];
        if ($curWeek) {
            $st = $pdo->prepare("SELECT * FROM entries WHERE week = :w ORDER BY LOWER(name)");
            $st->execute([':w' => $curWeek]);
            $entries = $st->fetchAll();
        }

        // Minimal users list for dropdowns
        $users = $pdo->query("SELECT id,name FROM users ORDER BY LOWER(name)")->fetchAll();

        // CSRF token
        if (session_status() !== PHP_SESSION_ACTIVE) session_start();
        $csrfToken = Csrf::token();

        ob_start();
        require __DIR__ . '/../../templates/admin/entries.php';
        return ob_get_clean();
    }

    private function getCsrfFromRequest(): ?string
    {
        // Header 'X-CSRF' or JSON/body param 'csrf' or POST param
        $h = $_SERVER['HTTP_X_CSRF'] ?? null;
        if ($h) return $h;
        if (php_sapi_name() !== 'cli') {
            $body = file_get_contents('php://input');
            $json = json_decode($body, true);
            if (is_array($json) && isset($json['csrf'])) return $json['csrf'];
        }
        return $_POST['csrf'] ?? null;
    }

    public function saveEntries(): string
    {
        AdminAuth::require();
        if (session_status() !== PHP_SESSION_ACTIVE) session_start();
        $csrf = $this->getCsrfFromRequest();
        if (!is_string($csrf) || !Csrf::validate($csrf)) {
            http_response_code(403);
            return 'Invalid CSRF';
        }

        $body = file_get_contents('php://input');
        $data = json_decode($body, true) ?: $_POST;

        $pdo = DB::pdo();

        if (isset($data['action']) && $data['action'] === 'delete') {
            $id = (int)($data['id'] ?? 0);
            if ($id <= 0) {
                http_response_code(400);
                return json_encode(['error' => 'invalid id']);
            }
            $pdo->prepare("DELETE FROM entries WHERE id = :id")->execute([':id' => $id]);
            return json_encode(['ok' => 1]);
        }

        try {
            Tx::with(function($pdo) use ($data) {
                // Support bulk rows or single row updates
                $rows = [];
                if (isset($data['entries']) && is_array($data['entries'])) {
                    $rows = $data['entries'];
                } else {
                    // infer single row from posted fields
                    $r = [];
                    foreach (['id','name','week','mon','tue','wed','thu','fri','sat','sun','tag'] as $k) {
                        if (isset($data[$k])) $r[$k] = $data[$k];
                    }
                    if (!empty($r)) $rows[] = $r;
                }

                foreach ($rows as $r) {
                    $week = $r['week'] ?? null;
                    if (!$week) throw new \Exception('week is required');
                    // ensure week exists
                    $pdo->prepare("INSERT INTO weeks(week, label, finalized) VALUES(:w, :l, 0)
                                   ON CONFLICT(week) DO NOTHING")
                        ->execute([':w'=>$week, ':l'=>$week]);

                    // If id present -> update that row
                    if (!empty($r['id'])) {
                        // Check locked state for this entry
                        $chk = $pdo->prepare("SELECT locked FROM entries WHERE id = :id LIMIT 1");
                        $chk->execute([':id' => $r['id']]);
                        $locked = $chk->fetchColumn();
                        if ($locked) throw new \Exception('Entry is locked and cannot be modified.');

                        $upd = $pdo->prepare("UPDATE entries SET monday=:mo,tuesday=:tu,wednesday=:we,thursday=:th,friday=:fr,saturday=:sa,sunday=:su,tag=:tag,updated_at=datetime('now') WHERE id=:id");
                        $upd->execute([
                            ':mo' => $r['mon'] ?? null,
                            ':tu' => $r['tue'] ?? null,
                            ':we' => $r['wed'] ?? null,
                            ':th' => $r['thu'] ?? null,
                            ':fr' => $r['fri'] ?? null,
                            ':sa' => $r['sat'] ?? null,
                            ':su' => $r['sun'] ?? null,
                            ':tag'=> $r['tag'] ?? null,
                            ':id' => $r['id']
                        ]);
                    } else {
                        // upsert by week+name
                        $name = trim((string)($r['name'] ?? ''));
                        if ($name === '') throw new \Exception('name is required for insert');

                        $exists = $pdo->prepare("SELECT id, locked FROM entries WHERE week=:w AND name=:n LIMIT 1");
                        $exists->execute([':w'=>$week, ':n'=>$name]);
                        $ex = $exists->fetch();
                        if ($ex && !empty($ex['locked'])) throw new \Exception('Entry is locked and cannot be modified.');

                        if ($ex) {
                            $upd = $pdo->prepare("UPDATE entries SET monday=:mo,tuesday=:tu,wednesday=:we,thursday=:th,friday=:fr,saturday=:sa,sunday=:su,tag=:tag,updated_at=datetime('now') WHERE id=:id");
                            $upd->execute([
                                ':mo' => $r['mon'] ?? null,
                                ':tu' => $r['tue'] ?? null,
                                ':we' => $r['wed'] ?? null,
                                ':th' => $r['thu'] ?? null,
                                ':fr' => $r['fri'] ?? null,
                                ':sa' => $r['sat'] ?? null,
                                ':su' => $r['sun'] ?? null,
                                ':tag'=> $r['tag'] ?? null,
                                ':id' => $ex['id']
                            ]);
                        } else {
                            $ins = $pdo->prepare("INSERT INTO entries(week,name,monday,tuesday,wednesday,thursday,friday,saturday,sunday,sex,age,tag)
                                                  VALUES(:w,:n,:mo,:tu,:we,:th,:fr,:sa,:su,NULL,NULL,:tag)");
                            $ins->execute([
                                ':w'=>$week, ':n'=>$name,
                                ':mo' => $r['mon'] ?? null,
                                ':tu' => $r['tue'] ?? null,
                                ':we' => $r['wed'] ?? null,
                                ':th' => $r['thu'] ?? null,
                                ':fr' => $r['fri'] ?? null,
                                ':sa' => $r['sat'] ?? null,
                                ':su' => $r['sun'] ?? null,
                                ':tag'=> $r['tag'] ?? null
                            ]);
                        }
                    }
                }
            });
            return json_encode(['ok'=>1]);
        } catch (\Throwable $e) {
            http_response_code(400);
            return json_encode(['error'=>$e->getMessage()]);
        }
    }

    public function finalizeWeek(): string
    {
        AdminAuth::require();
        if (session_status() !== PHP_SESSION_ACTIVE) session_start();
        $csrf = $this->getCsrfFromRequest();
        if (!is_string($csrf) || !Csrf::validate($csrf)) {
            http_response_code(403);
            return 'Invalid CSRF';
        }

        $body = file_get_contents('php://input');
        $data = json_decode($body, true) ?: $_POST;
        $week = trim((string)($data['week'] ?? ''));

        if (!$week) {
            http_response_code(400);
            return 'week required';
        }

        $pdo = DB::pdo();

        try {
            Tx::with(function($pdo) use ($week) {
                // Snapshot entries
                $q = $pdo->prepare("SELECT name,monday,tuesday,wednesday,thursday,friday,saturday,sunday,sex,age,tag FROM entries WHERE week=:w ORDER BY LOWER(name)");
                $q->execute([':w'=>$week]);
                $rows = $q->fetchAll();
                $json = json_encode($rows, JSON_UNESCAPED_SLASHES);

                // create snapshots table if missing (migrate.php should have it)
                $pdo->prepare("INSERT INTO snapshots(week,json) VALUES(:w,:j)
                               ON CONFLICT(week) DO UPDATE SET json=excluded.json, created_at=datetime('now')")->execute([':w'=>$week, ':j'=>$json]);

                // set finalized flag and timestamp if column exists
                // Try both finalized (int) and finalized_at (datetime) approaches for compatibility
                try {
                    $pdo->prepare("UPDATE weeks SET finalized=1 WHERE week=:w")->execute([':w'=>$week]);
                } catch (\Throwable $e) {
                    // ignore
                }
                try {
                    $pdo->prepare("UPDATE weeks SET finalized_at=datetime('now') WHERE week=:w")->execute([':w'=>$week]);
                } catch (\Throwable $e) {
                    // ignore
                }

                // Lock entries if column exists
                try {
                    $pdo->prepare("UPDATE entries SET locked=1 WHERE week=:w")->execute([':w'=>$week]);
                } catch (\Throwable $e) {
                    // ignore
                }
            });

            return json_encode(['ok'=>1]);
        } catch (\Throwable $e) {
            http_response_code(400);
            return json_encode(['error'=>$e->getMessage()]);
        }
    }

    public function addAllActiveToWeek(): string
    {
        AdminAuth::require();
        if (session_status() !== PHP_SESSION_ACTIVE) session_start();
        $csrf = $this->getCsrfFromRequest();
        if (!is_string($csrf) || !Csrf::validate($csrf)) {
            http_response_code(403);
            return 'Invalid CSRF';
        }

        $body = file_get_contents('php://input');
        $data = json_decode($body, true) ?: $_POST;
        $week = trim((string)($data['week'] ?? ''));

        if (!$week) {
            http_response_code(400);
            return 'week required';
        }

        $pdo = DB::pdo();

        try {
            Tx::with(function($pdo) use ($week, &$added, &$skipped) {
                $q = $pdo->query("SELECT name,sex,age,tag FROM users WHERE is_active=1");
                $ins = $pdo->prepare("INSERT INTO entries(week,name,monday,tuesday,wednesday,thursday,friday,saturday,sunday,sex,age,tag)
                                      VALUES(:w,:n,NULL,NULL,NULL,NULL,NULL,NULL,NULL,:sex,:age,:tag)
                                      ON CONFLICT(week,name) DO NOTHING");
                $added = 0; $skipped = 0;
                foreach ($q as $u) {
                    $ins->execute([':w'=>$week, ':n'=>$u['name'], ':sex'=>$u['sex']?:null, ':age'=>$u['age']?:null, ':tag'=>$u['tag']?:null]);
                    $added += ($ins->rowCount() > 0) ? 1 : 0;
                    $skipped += ($ins->rowCount() === 0) ? 1 : 0;
                }
            });
            return json_encode(['ok'=>1, 'added'=>$added ?? 0, 'skipped'=>$skipped ?? 0]);
        } catch (\Throwable $e) {
            http_response_code(400);
            return json_encode(['error'=>$e->getMessage()]);
        }
    }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/app/Controllers/AdminUsersController.php =====

<?php

namespace App\Controllers;

use App\Security\AdminAuth;
use App\Config\DB;
use App\Security\Csrf;
use App\Support\Tx;

final class AdminUsersController
{
    public function index(): string
    {
        AdminAuth::require();
        $pdo = DB::pdo();
        $users = $pdo->query("SELECT id,name,sex,age,tag,is_active,photo_path FROM users ORDER BY LOWER(name)")->fetchAll();
        if (session_status() !== PHP_SESSION_ACTIVE) session_start();
        $csrfToken = Csrf::token();
        ob_start();
        require __DIR__ . '/../../templates/admin/users.php';
        return ob_get_clean();
    }

    public function save(): string
    {
        AdminAuth::require();
        if (session_status() !== PHP_SESSION_ACTIVE) session_start();
        $csrf = $_SERVER['HTTP_X_CSRF'] ?? ($_POST['csrf'] ?? null);
        // accept JSON body too
        if (!$csrf) {
            $body = file_get_contents('php://input');
            $json = json_decode($body, true);
            if (is_array($json) && isset($json['csrf'])) $csrf = $json['csrf'];
        }
        if (!is_string($csrf) || !Csrf::validate($csrf)) {
            http_response_code(403);
            return json_encode(['error' => 'invalid csrf']);
        }

        $body = file_get_contents('php://input');
        $data = json_decode($body, true) ?: $_POST;

        $action = $data['action'] ?? 'save';
        $pdo = DB::pdo();

        try {
            if ($action === 'delete') {
                $id = (int)($data['id'] ?? 0);
                if (!$id) throw new \Exception('id required');
                $pdo->prepare("DELETE FROM users WHERE id = :id")->execute([':id'=>$id]);
                return json_encode(['ok'=>1]);
            }

            // save (create/update)
            $u = $data['user'] ?? $data;
            $name = trim((string)($u['name'] ?? ''));
            if ($name === '') throw new \Exception('name required');

            Tx::with(function($pdo) use ($u, $name) {
                if (!empty($u['id'])) {
                    $stmt = $pdo->prepare("UPDATE users SET name=:name, sex=:sex, age=:age, tag=:tag, is_active=:active, photo_path=:photo WHERE id=:id");
                    $stmt->execute([
                        ':name'=>$name,
                        ':sex'=>$u['sex'] ?? null,
                        ':age'=>strlen((string)($u['age'] ?? '')) ? $u['age'] : null,
                        ':tag'=>$u['tag'] ?? null,
                        ':active'=>!empty($u['is_active']) ? 1 : 0,
                        ':photo'=>$u['photo_path'] ?? null,
                        ':id'=>$u['id']
                    ]);
                } else {
                    $ins = $pdo->prepare("INSERT INTO users(name,sex,age,tag,is_active,photo_path) VALUES(:name,:sex,:age,:tag,:active,:photo)");
                    $ins->execute([
                        ':name'=>$name,
                        ':sex'=>$u['sex'] ?? null,
                        ':age'=>strlen((string)($u['age'] ?? '')) ? $u['age'] : null,
                        ':tag'=>$u['tag'] ?? null,
                        ':active'=>!empty($u['is_active']) ? 1 : 0,
                        ':photo'=>$u['photo_path'] ?? null
                    ]);
                }
            });

            return json_encode(['ok'=>1]);
        } catch (\Throwable $e) {
            http_response_code(400);
            return json_encode(['error'=>$e->getMessage()]);
        }
    }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/app/Services/Outbound.php =====

<?php

namespace App\Services;

use App\Config\DB;

final class Outbound
{
    public static function sendSMS(string $to, string $body): bool
    {
        // Read Twilio credentials from environment (Dotenv populates $_ENV)
        $accountSid = $_ENV['TWILIO_ACCOUNT_SID'] ?? null;
        $authToken  = $_ENV['TWILIO_AUTH_TOKEN'] ?? null;
        $fromNumber = $_ENV['TWILIO_FROM_NUMBER'] ?? null;

        // Prepare audit insert
        $pdo = DB::pdo();
        $ins = $pdo->prepare("INSERT INTO sms_outbound_audit(created_at,to_number,body,http_code,sid,error) VALUES(datetime('now'),?,?,?,?,?)");

        if (!$accountSid || !$authToken || !$fromNumber) {
            $error = 'Missing TWILIO_ACCOUNT_SID/TWILIO_AUTH_TOKEN/TWILIO_FROM_NUMBER';
            try {
                $ins->execute([$to, $body, null, null, $error]);
            } catch (\Throwable $e) {
                error_log('Outbound::sendSMS audit insert failed: ' . $e->getMessage());
            }
            return false;
        }

        $url = "https://api.twilio.com/2010-04-01/Accounts/{$accountSid}/Messages.json";
        $post = http_build_query([
            'To'   => $to,
            'From' => $fromNumber,
            'Body' => $body,
        ]);

        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_USERPWD, $accountSid . ':' . $authToken);
        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
        curl_setopt($ch, CURLOPT_TIMEOUT, 10);
        // Execute
        $resp = curl_exec($ch);
        $curlErr = null;
        if ($resp === false) {
            $curlErr = curl_error($ch);
        }
        $httpCode = (int) curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);

        $sid = null;
        $error = null;

        if ($curlErr) {
            $error = 'curl_error: ' . $curlErr;
        } else {
            $json = json_decode((string)$resp, true);
            if (is_array($json) && isset($json['sid'])) {
                $sid = $json['sid'];
            } elseif (is_array($json) && isset($json['message'])) {
                // Twilio error message
                $error = (string)$json['message'];
            } else {
                // Non-JSON or unexpected response: capture raw body on failure
                if ($httpCode < 200 || $httpCode >= 300) {
                    $error = (string)$resp;
                }
            }
        }

        // Audit the attempt (safe to ignore audit failures)
        try {
            $ins->execute([$to, $body, $httpCode ?: null, $sid, $error]);
        } catch (\Throwable $e) {
            error_log('Outbound::sendSMS audit insert failed: ' . $e->getMessage());
        }

        return $httpCode >= 200 && $httpCode < 300;
    }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/tests/AiImagesTest.php =====

<?php
declare(strict_types=1);

use PHPUnit\Framework\TestCase;

final class AiImagesTest extends TestCase
{
    private string $root;

    protected function setUp(): void
    {
        $this->root = dirname(__DIR__);
        require_once $this->root . '/vendor/autoload.php';
        \App\Core\Env::bootstrap($this->root);
        require_once $this->root . '/api/lib/settings.php';
        require_once $this->root . '/api/lib/ai_images.php';
        // Ensure toggles ON by default for tests
        setting_set('ai.enabled', '1');
        setting_set('ai.award.enabled', '1');
    }

    public function testLocalSvgGenerationPath(): void
    {
        $uid = 9999;
        $res = ai_image_generate([
            'user_id' => $uid,
            'user_name' => 'Test User',
            'award_kind' => 'lifetime_steps',
            'milestone_value' => 100000,
            'style' => 'badge',
            'force' => true,
        ]);
        $this->assertIsArray($res);
        $this->assertTrue($res['ok'] ?? false, 'Generation should succeed');
        $this->assertArrayHasKey('path', $res);
        $path = (string)$res['path'];
        $this->assertStringStartsWith('assets/awards/' . $uid . '/', $path, 'Path should be under user awards');
        // Check file exists on disk (under site/)
        $rel = preg_replace('#^assets/#', 'site/assets/', $path);
        $abs = $this->root . '/' . $rel;
        $this->assertFileExists($abs);
    }

    public function testCanGenerateDisabledFlags(): void
    {
        setting_set('ai.enabled', '0');
        $this->assertFalse(ai_image_can_generate());
        setting_set('ai.enabled', '1'); // restore
        setting_set('ai.award.enabled', '0');
        $this->assertFalse(ai_image_can_generate());
        setting_set('ai.award.enabled', '1'); // restore
    }
}



# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/tests/AwardsTest.php =====

<?php
declare(strict_types=1);

use PHPUnit\Framework\TestCase;

require_once __DIR__ . '/../api/lib/awards.php';
require_once __DIR__ . '/../api/lib/dates.php';

/**
 * Tests for the awards system
 */
class AwardsTest extends TestCase
{
    private PDO $pdo;
    
    protected function setUp(): void
    {
        // Use in-memory SQLite for testing
        $this->pdo = new PDO('sqlite::memory:');
        $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        
        // Create test schema
        $this->createTestSchema();
    }
    
    private function createTestSchema(): void
    {
        // Users table
        $this->pdo->exec("
            CREATE TABLE users (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL
            )
        ");
        
        // Weeks table
        $this->pdo->exec("
            CREATE TABLE weeks (
                id INTEGER PRIMARY KEY,
                starts_on TEXT NOT NULL
            )
        ");
        
        // Entries table
        $this->pdo->exec("
            CREATE TABLE entries (
                id INTEGER PRIMARY KEY,
                user_id INTEGER NOT NULL,
                week_id INTEGER NOT NULL,
                mon INTEGER DEFAULT 0,
                tue INTEGER DEFAULT 0,
                wed INTEGER DEFAULT 0,
                thu INTEGER DEFAULT 0,
                fri INTEGER DEFAULT 0,
                sat INTEGER DEFAULT 0
            )
        ");
        
        // Cache table
        $this->pdo->exec("
            CREATE TABLE user_awards_cache (
                user_id INTEGER NOT NULL,
                award_key TEXT NOT NULL,
                threshold INTEGER NOT NULL,
                awarded_at TEXT NOT NULL,
                PRIMARY KEY (user_id, award_key)
            )
        ");
    }
    
    public function testFormatThreshold(): void
    {
        $this->assertEquals('100,000 Steps', format_threshold(100000));
        $this->assertEquals('250,000 Steps', format_threshold(250000));
        $this->assertEquals('1,000,000 Steps', format_threshold(1000000));
    }
    
    public function testExpandWeekToDailyDates(): void
    {
        $weekStart = '2025-08-11'; // Monday
        $daySteps = [
            'monday' => 5000,
            'tuesday' => 6000,
            'wednesday' => 7000,
            'thursday' => 8000,
            'friday' => 9000,
            'saturday' => 10000
        ];
        
        $result = expand_week_to_daily_dates($weekStart, $daySteps);
        
        $this->assertCount(6, $result);
        $this->assertEquals(5000, $result['2025-08-11']);
        $this->assertEquals(6000, $result['2025-08-12']);
        $this->assertEquals(10000, $result['2025-08-16']);
    }
    
    public function testComputeAwardedDateNoData(): void
    {
        // Insert test user with no entries
        $this->pdo->exec("INSERT INTO users (id, name) VALUES (1, 'Test User')");
        
        $result = compute_awarded_date($this->pdo, 1, 100000);
        
        $this->assertNull($result);
    }
    
    public function testComputeAwardedDateWithData(): void
    {
        // Insert test user
        $this->pdo->exec("INSERT INTO users (id, name) VALUES (1, 'Test User')");
        
        // Insert test weeks
        $this->pdo->exec("INSERT INTO weeks (id, starts_on) VALUES (1, '2025-08-04')");
        $this->pdo->exec("INSERT INTO weeks (id, starts_on) VALUES (2, '2025-08-11')");
        
        // Insert entries that will reach 100,000 threshold on second week Wednesday
        $this->pdo->exec("
            INSERT INTO entries (user_id, week_id, mon, tue, wed, thu, fri, sat)
            VALUES (1, 1, 10000, 10000, 10000, 10000, 10000, 10000)
        ");
        $this->pdo->exec("
            INSERT INTO entries (user_id, week_id, mon, tue, wed, thu, fri, sat)
            VALUES (1, 2, 10000, 10000, 10000, 0, 0, 0)
        ");
        
        // Total: 60000 + 30000 = 90000, should reach 100k on Wed of week 2
        // Actually need more...
        $result = compute_awarded_date($this->pdo, 1, 90000);
        
        $this->assertNotNull($result);
        // Should be 2025-08-13 (Wednesday of second week when cumulative reaches 90k)
        $this->assertEquals('2025-08-13', $result);
    }
    
    public function testGetLifetimeAwardsNoSteps(): void
    {
        // Insert test user with no entries
        $this->pdo->exec("INSERT INTO users (id, name) VALUES (1, 'Test User')");
        
        $awards = get_lifetime_awards($this->pdo, 1);
        
        $this->assertIsArray($awards);
        $this->assertCount(5, $awards); // 5 thresholds
        
        // All should be locked
        foreach ($awards as $award) {
            $this->assertFalse($award['earned']);
            $this->assertNull($award['awarded_at']);
        }
    }
    
    public function testGetLifetimeAwardsWithSteps(): void
    {
        // Insert test user
        $this->pdo->exec("INSERT INTO users (id, name) VALUES (1, 'Test User')");
        
        // Insert test week
        $this->pdo->exec("INSERT INTO weeks (id, starts_on) VALUES (1, '2025-08-04')");
        
        // Insert entry with 150,000 steps (should earn 100k threshold)
        $this->pdo->exec("
            INSERT INTO entries (user_id, week_id, mon, tue, wed, thu, fri, sat)
            VALUES (1, 1, 25000, 25000, 25000, 25000, 25000, 25000)
        ");
        
        $awards = get_lifetime_awards($this->pdo, 1);
        
        $this->assertIsArray($awards);
        $this->assertCount(5, $awards);
        
        // First award (100k) should be earned
        $firstAward = $awards[0];
        $this->assertTrue($firstAward['earned']);
        $this->assertEquals(100000, $firstAward['threshold']);
        $this->assertNotNull($firstAward['awarded_at']);
        $this->assertEquals('2025-08-08', $firstAward['awarded_at']); // Friday when cumulative reaches 100k
        
        // Second award (250k) should be locked
        $secondAward = $awards[1];
        $this->assertFalse($secondAward['earned']);
    }
    
    public function testAwardsCaching(): void
    {
        // Insert test user
        $this->pdo->exec("INSERT INTO users (id, name) VALUES (1, 'Test User')");
        
        // Insert test week
        $this->pdo->exec("INSERT INTO weeks (id, starts_on) VALUES (1, '2025-08-04')");
        
        // Insert entry with 150,000 steps
        $this->pdo->exec("
            INSERT INTO entries (user_id, week_id, mon, tue, wed, thu, fri, sat)
            VALUES (1, 1, 25000, 25000, 25000, 25000, 25000, 25000)
        ");
        
        // First call - should compute and cache
        $awards1 = get_lifetime_awards($this->pdo, 1);
        
        // Check cache was written
        $stmt = $this->pdo->prepare("SELECT COUNT(*) FROM user_awards_cache WHERE user_id = 1");
        $stmt->execute();
        $cacheCount = $stmt->fetchColumn();
        $this->assertEquals(1, $cacheCount); // Only 100k award earned
        
        // Second call - should use cache
        $awards2 = get_lifetime_awards($this->pdo, 1);
        
        // Results should be identical
        $this->assertEquals($awards1[0]['awarded_at'], $awards2[0]['awarded_at']);
    }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/admin/entries.php =====

<?php
declare(strict_types=1);

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));
require_once __DIR__ . '/../api/lib/admin_auth.php';
require_admin();
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
$csrf = \App\Security\Csrf::token();

use App\Config\DB;

$SITE_ASSETS = '../site/assets';

$pdo = DB::pdo();
$weeks = $pdo->query("SELECT week, COALESCE(label, week) AS label, COALESCE(finalized, 0) AS finalized FROM weeks ORDER BY week DESC")->fetchAll();
$curWeek = $_GET['week'] ?? ($weeks[0]['week'] ?? '');
$entries = [];
if ($curWeek) {
  $st = $pdo->prepare("SELECT id, name, monday, tuesday, wednesday, thursday, friday, saturday, sex, age, tag FROM entries WHERE week = :w ORDER BY LOWER(name)");
  try { $st->execute([':w'=>$curWeek]); $entries = $st->fetchAll(); } catch (Throwable $e) { $entries = []; }
}
?><!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>KW Admin — Entries</title>
  <link rel="icon" href="../favicon.ico" />
  <link rel="stylesheet" href="../public/assets/css/app.css" />
  <style>
    body { background:#0b1020; color:#e6ecff; font:14px system-ui,-apple-system,"Segoe UI",Roboto,Arial; }
    .wrap { max-width: 1200px; margin: 24px auto; padding: 0 16px; }
    .card { background:#0f1530; border:1px solid rgba(255,255,255,0.08); border-radius:12px; padding:16px; margin-bottom:16px; }
    .row { display:flex; gap:8px; flex-wrap:wrap; align-items:center; }
    .btn { padding:8px 10px; border-radius:8px; background:#1a2350; border:1px solid #2c3a7a; color:#e6ecff; cursor:pointer; }
    .btn.warn { background:#4d1a1a; border-color:#7a2c2c; }
    label input, select { background:#111936; color:#e6ecff; border:1px solid #1e2a5a; border-radius:8px; padding:6px 8px; }
    h1 { font-size: 20px; font-weight: 800; margin: 0; }
    .muted { color: rgba(230,236,255,0.7); font-size: 12px; }
    table { width:100%; border-collapse: collapse; }
    th, td { padding:8px; border-top:1px solid rgba(255,255,255,0.08); text-align:left; }
    th { position: sticky; top: 0; background: #0f1530; }
    .num { width: 90px; }
    .name { min-width: 200px; }
  </style>
</head>
<body>
<div class="wrap">
  <div class="card">
    <div class="row" style="justify-content:space-between">
      <div>
        <div class="kicker">Kings Walk Week</div>
        <h1>Entries</h1>
      </div>
      <div class="row">
        <a class="btn" href="index.php">Home</a>
        <a class="btn" href="weeks.php">Weeks</a>
        <a class="btn" href="users.php">Users</a>
        <a class="btn" href="ai.php">AI</a>
        <a class="btn" href="../site/">Dashboard</a>
      </div>
    </div>
  </div>

  <div class="card">
    <div class="row" style="justify-content:space-between; margin-bottom:8px">
      <div class="row">
        <label>Week:
          <select id="weekSel" onchange="onWeekChange()">
            <?php foreach ($weeks as $w): ?>
              <option value="<?= htmlspecialchars($w['week']) ?>" <?= ($w['week']===$curWeek?'selected':'') ?>><?= htmlspecialchars($w['label']) ?><?= !empty($w['finalized']) ? ' (finalized)' : '' ?></option>
            <?php endforeach; ?>
          </select>
        </label>
        <span class="muted">Total: <?= count($entries) ?> entries</span>
      </div>
      <div class="row">
        <button class="btn" onclick="finalizeWeek()">Finalize</button>
        <button class="btn" onclick="unfinalizeWeek()">Unfinalize</button>
        <button class="btn" onclick="addAllActive()">Add all active</button>
      </div>
    </div>

    <div style="overflow:auto">
      <table id="tbl">
        <thead>
          <tr>
            <th class="name">Name</th>
            <th>Mon</th><th>Tue</th><th>Wed</th><th>Thu</th><th>Fri</th><th>Sat</th>
            <th>Tag</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          <?php foreach ($entries as $e): ?>
            <tr data-id="<?= (int)$e['id'] ?>">
              <td class="name">
                <span><?= htmlspecialchars($e['name']) ?></span>
              </td>
              <td><input class="num" type="number" min="0" name="monday" value="<?= htmlspecialchars((string)($e['monday'] ?? '')) ?>"></td>
              <td><input class="num" type="number" min="0" name="tuesday" value="<?= htmlspecialchars((string)($e['tuesday'] ?? '')) ?>"></td>
              <td><input class="num" type="number" min="0" name="wednesday" value="<?= htmlspecialchars((string)($e['wednesday'] ?? '')) ?>"></td>
              <td><input class="num" type="number" min="0" name="thursday" value="<?= htmlspecialchars((string)($e['thursday'] ?? '')) ?>"></td>
              <td><input class="num" type="number" min="0" name="friday" value="<?= htmlspecialchars((string)($e['friday'] ?? '')) ?>"></td>
              <td><input class="num" type="number" min="0" name="saturday" value="<?= htmlspecialchars((string)($e['saturday'] ?? '')) ?>"></td>
              <td><input type="text" name="tag" value="<?= htmlspecialchars((string)($e['tag'] ?? '')) ?>"></td>
              <td>
                <button class="btn" onclick="saveRow(this)">Save</button>
                <button class="btn warn" onclick="deleteRow(this)">Delete</button>
                <input type="hidden" name="sex" value="<?= htmlspecialchars((string)($e['sex'] ?? '')) ?>">
                <input type="hidden" name="age" value="<?= htmlspecialchars((string)($e['age'] ?? '')) ?>">
              </td>
            </tr>
          <?php endforeach; ?>
          <tr id="newRow">
            <td><input class="name" name="name" placeholder="Name"></td>
            <td><input class="num" type="number" min="0" name="monday" placeholder="0"></td>
            <td><input class="num" type="number" min="0" name="tuesday" placeholder="0"></td>
            <td><input class="num" type="number" min="0" name="wednesday" placeholder="0"></td>
            <td><input class="num" type="number" min="0" name="thursday" placeholder="0"></td>
            <td><input class="num" type="number" min="0" name="friday" placeholder="0"></td>
            <td><input class="num" type="number" min="0" name="saturday" placeholder="0"></td>
            <td><input type="text" name="tag" placeholder=""></td>
            <td><button class="btn" onclick="addRow(event)">Add</button></td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>

<script>
const CSRF = "<?= htmlspecialchars($csrf) ?>";
function curWeek(){ const s=document.getElementById('weekSel'); return s ? s.value : ''; }
function onWeekChange(){ const w=curWeek(); const u=new URL(window.location.href); u.searchParams.set('week', w); window.location.href=u.toString(); }

async function postForm(url, params) {
  const body = new URLSearchParams(params || {});
  const res = await fetch(url, { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRF':CSRF}, body });
  return { ok: res.ok, text: await res.text() };
}

async function saveRow(btn){
  const tr = btn.closest('tr');
  const id = tr.getAttribute('data-id');
  const fields = ['monday','tuesday','wednesday','thursday','friday','saturday','tag','sex','age'];
  const data = { action:'save_entry', week: curWeek(), name: tr.querySelector('td span')?.textContent || tr.querySelector('input[name="name"]')?.value || '' };
  if (id) data.id = id;
  fields.forEach(k=>{ const el=tr.querySelector(`[name="${k}"]`); if (el) data[k]=el.value; });
  if (!data.name) { alert('Name required'); return; }
  const r = await postForm('../api/entries_save.php', data);
  if (!r.ok) { alert('Save failed'); return; }
  location.reload();
}

async function deleteRow(btn){
  const tr = btn.closest('tr');
  const id = tr.getAttribute('data-id');
  if (!id) { tr.remove(); return; }
  if (!confirm('Delete entry?')) return;
  const r = await postForm('../api/entries_save.php', { action:'delete', id });
  if (!r.ok) { alert('Delete failed'); return; }
  location.reload();
}

async function addRow(e){
  e.preventDefault();
  const tr = document.getElementById('newRow');
  const data = { action:'save_entry', week: curWeek(), name: tr.querySelector('[name="name"]').value.trim() };
  if (!data.name) { alert('Enter a name'); return; }
  ['monday','tuesday','wednesday','thursday','friday','saturday','tag'].forEach(k=>{ const el=tr.querySelector(`[name="${k}"]`); if (el && el.value !== '') data[k]=el.value; });
  const r = await postForm('../api/entries_save.php', data);
  if (!r.ok) { alert('Add failed'); return; }
  location.reload();
}

async function finalizeWeek(){
  const w = curWeek(); if (!w) return;
  if (!confirm('Finalize '+w+'?')) return;
  const r = await postForm('../api/entries_finalize.php', { action:'finalize', week: w });
  if (!r.ok) { alert('Finalize failed'); return; }
  location.reload();
}
async function unfinalizeWeek(){
  const w = curWeek(); if (!w) return;
  if (!confirm('Unfinalize '+w+'?')) return;
  const r = await postForm('../api/entries_finalize.php', { action:'unfinalize', week: w });
  if (!r.ok) { alert('Unfinalize failed'); return; }
  location.reload();
}
async function addAllActive(){
  const w = curWeek(); if (!w) return;
  const r = await postForm('../api/entries_add_active.php', { week: w });
  if (!r.ok) { alert('Add failed'); return; }
  alert('Added active users to '+w);
  location.reload();
}
</script>
</body>
</html>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/admin/index.php =====

<?php
declare(strict_types=1);

// Simple, clean Admin landing with quick actions and links
// Uses existing APIs under ../api and keeps legacy editors available via links.

// Auth + bootstrap
require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));
require_once __DIR__ . '/../api/lib/admin_auth.php';
require_admin();
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
$csrf = \App\Security\Csrf::token();

// Optional for image paths shared with site
$SITE_ASSETS = '../site/assets';

// Load users for Awards Images selector
$users = [];
try {
  $pdo = \App\Config\DB::pdo();
  ob_start(); require_once __DIR__ . '/../api/migrate.php'; ob_end_clean();
  $users = $pdo->query("SELECT id, name FROM users ORDER BY LOWER(name)")->fetchAll(PDO::FETCH_ASSOC) ?: [];
} catch (Throwable $e) { $users = []; }

?><!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>KW Admin</title>
  <link rel="icon" href="../favicon.ico" />
  <link rel="stylesheet" href="../public/assets/css/app.css" />
  <style>
    body { background:#0b1020; color:#e6ecff; font: 14px system-ui,-apple-system,"Segoe UI",Roboto,Arial; }
    .wrap { max-width: 1100px; margin: 24px auto; padding: 0 16px; }
    .grid { display:grid; grid-template-columns: 1fr; gap:16px; }
    @media (min-width: 920px){ .grid{ grid-template-columns: 1fr 1fr; } }
    .card { background:#0f1530; border:1px solid rgba(255,255,255,0.08); border-radius:12px; padding:16px; }
    .hdr { display:flex; align-items:center; justify-content:space-between; gap:8px; }
    .nav { display:flex; flex-wrap:wrap; gap:8px; }
    .btn { padding:8px 10px; border-radius:8px; background:#1a2350; border:1px solid #2c3a7a; color:#e6ecff; cursor:pointer; }
    .btn.warn { background:#4d1a1a; border-color:#7a2c2c; }
    .row { display:flex; gap:8px; flex-wrap:wrap; align-items:center; }
    label input, select { background:#111936; color:#e6ecff; border:1px solid #1e2a5a; border-radius:8px; padding:6px 8px; }
    .muted { color: rgba(230,236,255,0.7); font-size: 12px; }
    h1 { font-size: 20px; font-weight: 800; margin: 0; }
    h2 { font-size: 16px; font-weight: 700; margin: 0 0 8px; }
    .badge { display:inline-block; padding:2px 8px; border-radius:999px; border:1px solid rgba(255,255,255,0.15); font-size:12px; }
    table { width:100%; border-collapse: collapse; }
    th, td { padding:8px; border-top:1px solid rgba(255,255,255,0.08); text-align:left; }
    .ok { color:#7ce3a1; }
    .err { color:#f79; }
    .link { color:#9ecbff; text-decoration: none; }
  </style>
  <script>
  // CSRF token injected from server
  const CSRF = "<?= htmlspecialchars($csrf) ?>";
  async function freshCsrf(){
    try {
      const r = await fetch('../api/csrf_token.php', { cache: 'no-store' });
      const j = await r.json();
      return (j && j.token) ? String(j.token) : CSRF;
    } catch(e) { return CSRF; }
  }
  // Small helper for form POSTs (x-www-form-urlencoded)
  async function postForm(url, params) {
    const body = new URLSearchParams(params || {});
    const res = await fetch(url, { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRF':CSRF}, body });
    return { ok: res.ok, json: (async ()=>{ try { return await res.json(); } catch(e){ return null; } })() };
  }
  </script>
  </head>
<body>
<div class="wrap">
  <div class="card hdr">
    <div>
      <div class="kicker">Kings Walk Week</div>
      <h1>Admin</h1>
      <div class="muted">Signed in as <b><?=htmlspecialchars($_SERVER['PHP_AUTH_USER'] ?? 'admin')?></b></div>
    </div>
    <div class="nav">
      <a class="btn" href="../site/">View Dashboard</a>
      <a class="btn" href="weeks.php">Weeks</a>
      <a class="btn" href="entries.php">Entries</a>
      <a class="btn" href="users.php">Users</a>
      <a class="btn" href="ai.php">AI</a>
      <a class="btn" href="awards.php">Awards</a>
      <a class="btn" href="awards_settings.php">Awards Settings</a>
      <a class="btn" href="phones.php">Phones</a>
      <a class="btn" href="photos.php">Photos</a>
    </div>
  </div>

  <div class="grid">
    <div class="card">
      <h2>Weeks</h2>
      <div class="row" style="margin-bottom:8px">
        <label>Pick:
          <select id="weekSel"></select>
        </label>
        <span id="weekMeta" class="muted"></span>
      </div>
      <div class="row" style="margin-bottom:8px">
        <label>Date (YYYY-MM-DD): <input id="newWeekDate" placeholder="2025-10-19"></label>
        <label>Label: <input id="newWeekLabel" placeholder="Oct 19–25"></label>
        <button class="btn" id="createWeekBtn">Create/Update</button>
      </div>
      <div class="row" style="margin-bottom:8px">
        <button class="btn" id="finalizeBtn">Finalize</button>
        <button class="btn" id="unfinalizeBtn">Unfinalize</button>
        <button class="btn" id="addActiveBtn">Add all active to week</button>
        <button class="btn warn" id="deleteWeekBtn">Delete</button>
        <label class="muted"><input type="checkbox" id="forceDelete"> cascade entries</label>
      </div>
      <div id="weeksStatus" class="muted"></div>
    </div>

    <div class="card">
      <h2>AI Settings</h2>
      <div class="row" style="margin-bottom:8px">
        <span id="aiEnabledBadge" class="badge">AI: …</span>
        <button class="btn" id="toggleAiBtn">Toggle</button>
      </div>
      <div class="row" style="margin-bottom:8px">
        <label><input type="checkbox" id="aiNudgeChk"> Nudge</label>
        <label><input type="checkbox" id="aiRecapChk"> Recap</label>
        <label><input type="checkbox" id="aiAwardChk"> Award</label>
        <button class="btn" id="saveCatsBtn">Save</button>
      </div>
      <div class="row" style="margin-bottom:8px">
        <label>Model:
          <select id="aiModelSel">
            <option value="anthropic/claude-3.5-sonnet">anthropic/claude-3.5-sonnet</option>
            <option value="google/gemini-1.5-pro">google/gemini-1.5-pro</option>
            <option value="deepseek/deepseek-chat">deepseek/deepseek-chat</option>
          </select>
        </label>
        <button class="btn" id="saveModelBtn">Save</button>
      </div>
      <div class="row" style="margin-bottom:8px">
        <label>Auto-send:
          <select id="aiAutosendSel">
            <option value="0">Off (review queue)</option>
            <option value="1">On (send immediately)</option>
          </select>
        </label>
        <button class="btn" id="saveAutosendBtn">Save</button>
      </div>
      <div class="row" style="margin-top:6px">
        <a class="btn" href="ai.php">Open AI Console</a>
      </div>
      <div id="aiStatus" class="muted" style="margin-top:8px"></div>
    </div>

    <div class="card" style="grid-column: 1 / -1;">
      <h2>Quick Links</h2>
      <div class="row">
        <a class="link" href="../api/weeks.php">Weeks JSON</a>
        <span class="muted">·</span>
        <a class="link" href="../api/lifetime.php">Lifetime JSON</a>
        <span class="muted">·</span>
        <a class="link" href="../site/">Public dashboard</a>
        <span class="muted">·</span>
        <a class="link" href="entries.php">Entries editor</a>
      </div>
    </div>

    <div class="card" style="grid-column: 1 / -1;">
      <h2>AI Log Preview</h2>
      <div id="aiLog" style="font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace; font-size:12px; white-space:pre-wrap; background:#0b1020; border:1px solid rgba(255,255,255,0.08); border-radius:8px; padding:8px; max-height:220px; overflow:auto;">Loading…</div>
      <div class="row" style="margin-top:8px"><button id="refreshLogBtn" class="btn" type="button">Refresh log</button></div>
    </div>

    <div class="card">
      <h2>Awards Images</h2>
      <div class="row" style="margin-bottom:8px">
        <label>User:
          <select id="awUserSel">
            <option value="">Pick user…</option>
            <?php foreach ($users as $u): ?>
              <option value="<?= (int)$u['id'] ?>"><?= htmlspecialchars($u['name']) ?> (ID <?= (int)$u['id'] ?>)</option>
            <?php endforeach; ?>
          </select>
        </label>
        <label>AI Model:
          <select id="awModelSel"><option value="">Loading models…</option></select>
        </label>
        <button class="btn" id="awModelRefreshBtn" type="button">Update Model List</button>
        <button class="btn" id="awModelSaveBtn" type="button">Save Image Model</button>
        <label>Kind:
          <select id="awKind">
            <option value="lifetime_steps">lifetime_steps</option>
            <option value="attendance_weeks">attendance_weeks</option>
            <option value="custom">custom</option>
          </select>
        </label>
        <label>Milestone: <input id="awValue" type="number" min="1" placeholder="100000"></label>
        <label class="muted"><input type="checkbox" id="awForce"> Force regenerate</label>
      </div>
      <div class="row" style="margin-bottom:8px">
        <button class="btn" id="awGenBtn">Generate Image</button>
        <button class="btn" id="awRegenBtn">Regen Missing</button>
      </div>
      <div id="awStatus" class="muted"></div>
    </div>
  </div>

</div>

<script>
(function(){
  const base = '../'; // admin/ -> project root

  async function loadWeeks(){
    const s = document.getElementById('weeksStatus'); s.textContent = 'Loading weeks…';
    const sel = document.getElementById('weekSel'); sel.innerHTML = '';
    try {
      const r = await fetch(base + 'api/weeks.php', { cache: 'no-store' });
      const j = await r.json();
      const weeks = Array.isArray(j.weeks) ? j.weeks : [];
      sel.innerHTML = weeks.map(w => `<option value="${w.starts_on}">${w.label || w.starts_on}${w.finalized ? ' — finalized' : ''}</option>`).join('');
      if (weeks.length) sel.value = weeks[0].starts_on;
      s.textContent = `${weeks.length} week(s)`;
      updateWeekMeta();
    } catch (e) { s.textContent = 'Failed to load weeks'; }
  }

  function currentWeek(){ return document.getElementById('weekSel').value; }
  function updateWeekMeta(){
    const opt = document.getElementById('weekSel').selectedOptions[0];
    document.getElementById('weekMeta').textContent = opt ? opt.textContent : '';
  }
  document.getElementById('weekSel').addEventListener('change', updateWeekMeta);

  async function createWeek(){
    const date = (document.getElementById('newWeekDate').value || '').trim();
    const label = (document.getElementById('newWeekLabel').value || '').trim();
    if (!date) return alert('Enter a YYYY-MM-DD date');
    const res = await fetch(base + 'api/weeks.php', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRF':CSRF}, body: new URLSearchParams({ action:'create', date, label, csrf: CSRF }) });
    const txt = await res.text(); let j=null; try{ j=JSON.parse(txt);}catch(e){}
    if (!res.ok || !j || j.ok !== true) return alert('Create failed');
    await loadWeeks();
    alert('Week saved');
  }

  async function deleteWeek(){
    const date = currentWeek();
    if (!date) return alert('Pick a week');
    const force = document.getElementById('forceDelete').checked ? '1' : '0';
    if (!confirm('Delete week '+date + (force==='1' ? ' (cascade entries)' : '') + '?')) return;
    const res = await fetch(base + 'api/weeks.php', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRF':CSRF}, body: new URLSearchParams({ action:'delete', date, force, csrf: CSRF }) });
    const txt = await res.text(); let j=null; try{ j=JSON.parse(txt);}catch(e){}
    if (!res.ok || !j || j.ok !== true) return alert('Delete failed');
    await loadWeeks();
    alert('Deleted');
  }

  async function finalizeWeek(kind){ // kind: 'finalize' | 'unfinalize'
    const week = currentWeek(); if (!week) return alert('Pick a week');
    const url = base+'api/entries_finalize.php';
    const body = (kind==='unfinalize') ? new URLSearchParams({ action:'unfinalize', week, csrf: CSRF }) : new URLSearchParams({ action:'finalize', week, csrf: CSRF });
    const res = await fetch(url, { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRF':CSRF}, body });
    if (!res.ok) { alert(kind+' failed'); return; }
    await loadWeeks();
    alert(kind.charAt(0).toUpperCase()+kind.slice(1)+'d');
  }

  async function addAllActive(){
    const week = currentWeek(); if (!week) return alert('Pick a week');
    const res = await fetch(base+'api/entries_add_active.php', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRF':CSRF}, body: new URLSearchParams({ week, csrf: CSRF }) });
    if (!res.ok) { alert('Add failed'); return; }
    alert('Added active users to '+week);
  }

  document.getElementById('createWeekBtn').addEventListener('click', createWeek);
  document.getElementById('deleteWeekBtn').addEventListener('click', deleteWeek);
  document.getElementById('finalizeBtn').addEventListener('click', ()=>finalizeWeek('finalize'));
  document.getElementById('unfinalizeBtn').addEventListener('click', ()=>finalizeWeek('unfinalize'));
  document.getElementById('addActiveBtn').addEventListener('click', addAllActive);

  async function loadAi(){
    const badge = document.getElementById('aiEnabledBadge');
    const st = document.getElementById('aiStatus');
    st.textContent = 'Loading AI settings…';
    try {
      const g = async (key) => { const r = await fetch(base+'api/get_setting.php?key='+encodeURIComponent(key)); const j = await r.json(); return (j && j.value != null) ? String(j.value) : ''; };
      const flags = await (await fetch(base+'api/settings_get.php')).json();
      const ai = flags['ai.enabled'] ? '1' : '0';
      badge.textContent = 'AI: ' + (flags['ai.enabled'] ? 'ON' : 'OFF');
      badge.style.borderColor = flags['ai.enabled'] ? 'rgba(122, 255, 180, 0.35)' : 'rgba(255,255,255,0.15)';
      const nChk = document.getElementById('aiNudgeChk');
      const rChk = document.getElementById('aiRecapChk');
      const aChk = document.getElementById('aiAwardChk');
      nChk.checked = !!flags['ai.nudge.enabled'];
      rChk.checked = !!flags['ai.recap.enabled'];
      aChk.checked = !!flags['ai.award.enabled'];
      nChk.disabled = rChk.disabled = aChk.disabled = !flags['ai.enabled'];
      const model = await g('openrouter_model');
      if (model) document.getElementById('aiModelSel').value = model;
      const autosend = await g('ai_autosend');
      if (autosend) document.getElementById('aiAutosendSel').value = autosend;
      st.textContent = '';
    } catch (e) { st.textContent = 'Failed to load AI settings'; }
  }

  async function toggleAi(){
    try {
      const flags = await (await fetch(base+'api/settings_get.php')).json();
      const next = !flags['ai.enabled'];
      await fetch(base+'api/settings_set.php', { method:'POST', headers:{'Content-Type':'application/json','X-CSRF':CSRF}, body: JSON.stringify({ key:'ai.enabled', value: next, csrf: CSRF }) });
      await loadAi();
    } catch(e) { alert('Toggle failed'); }
  }

  async function saveModel(){
    const m = document.getElementById('aiModelSel').value;
    await postForm(base+'api/set_setting.php', { key:'openrouter_model', value: m });
    await loadAi();
  }
  async function saveAutosend(){
    const v = document.getElementById('aiAutosendSel').value;
    await postForm(base+'api/set_setting.php', { key:'ai_autosend', value: v });
    await loadAi();
  }
  document.getElementById('toggleAiBtn').addEventListener('click', toggleAi);
  document.getElementById('saveModelBtn').addEventListener('click', saveModel);
  document.getElementById('saveAutosendBtn').addEventListener('click', saveAutosend);
  document.getElementById('saveCatsBtn').addEventListener('click', async ()=>{
    const sset = async (key,val)=>{
      const tk = await freshCsrf();
      await fetch(base+'api/settings_set.php', { method:'POST', headers:{'Content-Type':'application/json','X-CSRF':tk}, body: JSON.stringify({ key, value: !!val, csrf: tk }) });
    };
    await sset('ai.nudge.enabled', document.getElementById('aiNudgeChk').checked);
    await sset('ai.recap.enabled', document.getElementById('aiRecapChk').checked);
    await sset('ai.award.enabled', document.getElementById('aiAwardChk').checked);
    await loadAi();
  });

  async function loadAiLog(){
    const el = document.getElementById('aiLog');
    el.textContent = 'Loading…';
    try {
      const r = await fetch(base+'api/ai_log.php');
      const j = await r.json();
      const rows = Array.isArray(j.entries) ? j.entries : [];
      el.textContent = rows.length ? rows.join('\n') : 'No recent entries.';
    } catch(e) { el.textContent = 'Failed to load log'; }
  }
  document.getElementById('refreshLogBtn').addEventListener('click', loadAiLog);

  // Initial
  loadWeeks();
  loadAi();
  loadAiLog();
  loadImageModels();

  // --- Awards Images ---
  async function awardGenerate(){
    const uid = parseInt(document.getElementById('awUserSel').value, 10) || 0;
    const kind = document.getElementById('awKind').value.trim();
    const val = parseInt(document.getElementById('awValue').value, 10) || 0;
    const force = document.getElementById('awForce').checked;
    const status = document.getElementById('awStatus');
    if (!uid || !kind || !val) { alert('Enter user_id, kind, and milestone'); return; }
    status.textContent = 'Generating…';
    try {
      const tk = await freshCsrf();
      const res = await fetch(base+'api/award_generate.php', { method:'POST', headers:{'Content-Type':'application/json','X-CSRF':tk}, body: JSON.stringify({ user_id: uid, kind, milestone_value: val, force }) });
      const j = await res.json();
      if (j && j.ok && j.skipped) { status.textContent = 'Skipped: ' + (j.reason||''); return; }
      if (j && j.ok) { status.textContent = 'OK: ' + (j.path||''); return; }
      status.textContent = 'Error: ' + (j && j.error ? j.error : 'failed');
    } catch (e) { status.textContent = 'Error generating'; }
  }
  async function awardRegenMissing(){
    const kind = document.getElementById('awKind').value.trim();
    const status = document.getElementById('awStatus');
    const btn = document.getElementById('awRegenBtn');
    
    // Disable button during processing
    btn.disabled = true;
    btn.textContent = 'Processing...';
    
    let totalGenerated = 0;
    let totalErrors = 0;
    let batchCount = 0;
    
    try {
      // Process in batches until all are complete
      while (true) {
        batchCount++;
        status.textContent = `Processing batch ${batchCount}...`;
        
        const body = (kind && kind !== 'custom') ? JSON.stringify({ kind, limit: 10 }) : JSON.stringify({ limit: 10 });
        const tk = await freshCsrf();
        const res = await fetch(base+'api/award_regen_missing.php', { method:'POST', headers:{'Content-Type':'application/json','X-CSRF':tk}, body });
        const j = await res.json();
        
        if (!j || !j.ok) {
          status.textContent = 'Error: ' + (j && j.error ? j.error : 'failed');
          break;
        }
        
        totalGenerated += (j.generated || 0);
        totalErrors += (j.errors || 0);
        const remaining = j.remaining || 0;
        const total = j.total_missing || 0;
        
        // Update status with progress
        if (remaining > 0) {
          status.textContent = `Progress: ${totalGenerated} generated, ${totalErrors} errors, ${remaining} remaining...`;
          // Small delay between batches to avoid overwhelming the server
          await new Promise(resolve => setTimeout(resolve, 500));
        } else {
          // All done
          status.textContent = `✓ Complete: ${totalGenerated} generated, ${totalErrors} errors (from ${total} missing)`;
          break;
        }
      }
    } catch (e) {
      status.textContent = 'Error: ' + e.message;
    } finally {
      // Re-enable button
      btn.disabled = false;
      btn.textContent = 'Regen Missing';
    }
  }
  document.getElementById('awGenBtn').addEventListener('click', awardGenerate);
  document.getElementById('awRegenBtn').addEventListener('click', awardRegenMissing);
  document.getElementById('awModelSaveBtn').addEventListener('click', async ()=>{
    const sel = document.getElementById('awModelSel');
    const model = sel.value || '';
    const status = document.getElementById('awStatus');
    if (!model) { alert('Pick a model first'); return; }
    const tk = await freshCsrf();
    const res = await fetch(base+'api/set_setting.php', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRF':tk}, body: new URLSearchParams({ key:'ai.image.model', value: model, csrf: tk })});
    let j=null; try{ j=await res.json(); }catch(e){}
    if (!res.ok || (j && j.ok===false)) { status.textContent = 'Save failed'; return; }
    status.textContent = 'Image model saved: ' + model;
  });
  document.getElementById('awModelRefreshBtn').addEventListener('click', async ()=>{
    const status = document.getElementById('awStatus');
    status.textContent = 'Refreshing models…';
    try {
      const tk = await freshCsrf();
      const res = await fetch(base+'api/ai_models_refresh.php', { method:'POST', headers:{'Content-Type':'application/json','X-CSRF':tk}, body: JSON.stringify({}) });
      const j = await res.json();
      if (!j || !j.ok) { status.textContent = 'Refresh failed'; return; }
      status.textContent = `Model list updated (${j.count||0})`;
      await loadImageModels(true);
    } catch(e) { status.textContent = 'Refresh failed'; }
  });

  async function loadImageModels(force){
    const sel = document.getElementById('awModelSel');
    sel.innerHTML = '<option value="">Loading models…</option>';
    try {
      const res = await fetch(base+'api/ai_models_list.php' + (force ? ('?t=' + Date.now()) : ''), { cache: 'no-store' });
      const j = await res.json();
      const list = (j && Array.isArray(j.models)) ? j.models : [];
      if (!list.length) { sel.innerHTML = '<option value="">No image-capable models</option>'; return; }
      sel.innerHTML = list.map(m => `<option value="${m.id}">${m.name || m.id}</option>`).join('');
      const r = await fetch(base+'api/get_setting.php?key='+encodeURIComponent('ai.image.model'));
      const cur = await r.json();
      const curVal = (cur && cur.value) ? String(cur.value) : '';
      if (curVal) { sel.value = curVal; }
    } catch(e) {
      sel.innerHTML = '<option value="">Failed to load models</option>';
    }
  }
})();
</script>
</body>
</html>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/admin/awards.php =====

<?php
declare(strict_types=1);

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));
require_once __DIR__ . '/../api/lib/admin_auth.php';
require_admin();
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
$csrf = \App\Security\Csrf::token();

// Load users and awards data
$users = [];
$awards = [];
$stats = ['total' => 0, 'with_image' => 0, 'missing_image' => 0, 'errors' => 0];

try {
  $pdo = \App\Config\DB::pdo();
  ob_start(); require_once __DIR__ . '/../api/migrate.php'; ob_end_clean();
  
  // Get all users
  $users = $pdo->query("SELECT id, name FROM users ORDER BY LOWER(name)")->fetchAll(PDO::FETCH_ASSOC) ?: [];
  
  // Get all awards with user info
  $awardsStmt = $pdo->query("
    SELECT a.id, a.user_id, u.name, a.kind, a.milestone_value, a.image_path, a.created_at
    FROM ai_awards a
    JOIN users u ON u.id = a.user_id
    WHERE a.kind IN ('lifetime_steps', 'attendance_weeks')
    ORDER BY a.created_at DESC
    LIMIT 100
  ");
  $awards = $awardsStmt->fetchAll(PDO::FETCH_ASSOC) ?: [];
  
  // Calculate stats
  $stats['total'] = count($awards);
  foreach ($awards as $a) {
    if (!empty($a['image_path'])) {
      $stats['with_image']++;
    } else {
      $stats['missing_image']++;
    }
  }
} catch (Throwable $e) {
  $users = [];
  $awards = [];
}

?><!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Awards Admin - KW</title>
  <link rel="icon" href="../favicon.ico" />
  <style>
    body { background:#0b1020; color:#e6ecff; font: 14px system-ui,-apple-system,"Segoe UI",Roboto,Arial; margin:0; }
    .wrap { max-width: 1400px; margin: 24px auto; padding: 0 16px; }
    .grid { display:grid; grid-template-columns: 1fr; gap:16px; }
    @media (min-width: 920px){ .grid{ grid-template-columns: 1fr 1fr; } }
    @media (min-width: 1200px){ .grid-3{ grid-template-columns: 1fr 1fr 1fr; } }
    .card { background:#0f1530; border:1px solid rgba(255,255,255,0.08); border-radius:12px; padding:16px; }
    .hdr { display:flex; align-items:center; justify-content:space-between; gap:8px; flex-wrap:wrap; }
    .nav { display:flex; flex-wrap:wrap; gap:8px; }
    .btn { padding:8px 12px; border-radius:8px; background:#1a2350; border:1px solid #2c3a7a; color:#e6ecff; cursor:pointer; font-size:13px; white-space:nowrap; }
    .btn:hover { background:#1e2a5a; }
    .btn:disabled { opacity:0.5; cursor:not-allowed; }
    .btn.primary { background:#2a4580; border-color:#3a5a9a; }
    .btn.warn { background:#4d1a1a; border-color:#7a2c2c; }
    .row { display:flex; gap:8px; flex-wrap:wrap; align-items:center; }
    label { display:flex; align-items:center; gap:6px; }
    input, select { background:#111936; color:#e6ecff; border:1px solid #1e2a5a; border-radius:8px; padding:6px 8px; font-size:13px; }
    input[type="checkbox"] { width:16px; height:16px; }
    .muted { color: rgba(230,236,255,0.6); font-size: 12px; }
    h1 { font-size: 24px; font-weight: 800; margin: 0; }
    h2 { font-size: 16px; font-weight: 700; margin: 0 0 12px; }
    .badge { display:inline-block; padding:3px 10px; border-radius:999px; border:1px solid rgba(255,255,255,0.15); font-size:12px; font-weight:600; }
    .badge.ok { background:rgba(124, 227, 161, 0.1); border-color:rgba(124, 227, 161, 0.3); color:#7ce3a1; }
    .badge.warn { background:rgba(255, 187, 102, 0.1); border-color:rgba(255, 187, 102, 0.3); color:#ffbb66; }
    .badge.err { background:rgba(255, 119, 153, 0.1); border-color:rgba(255, 119, 153, 0.3); color:#f79; }
    table { width:100%; border-collapse: collapse; font-size:13px; }
    th, td { padding:10px 8px; border-top:1px solid rgba(255,255,255,0.08); text-align:left; }
    th { font-weight:600; color:rgba(230,236,255,0.8); }
    tr:hover { background:rgba(255,255,255,0.02); }
    .link { color:#9ecbff; text-decoration: none; }
    .link:hover { text-decoration: underline; }
    .stat-grid { display:grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap:12px; }
    .stat-card { background:rgba(255,255,255,0.02); border:1px solid rgba(255,255,255,0.06); border-radius:8px; padding:12px; }
    .stat-value { font-size:28px; font-weight:800; margin:4px 0; }
    .stat-label { font-size:11px; text-transform:uppercase; letter-spacing:0.5px; color:rgba(230,236,255,0.5); }
    #status { margin-top:8px; padding:8px; border-radius:6px; background:rgba(255,255,255,0.02); border:1px solid rgba(255,255,255,0.06); font-size:12px; }
    .img-thumb { width:40px; height:40px; border-radius:6px; object-fit:cover; border:1px solid rgba(255,255,255,0.1); }
    .full-width { grid-column: 1 / -1; }
  </style>
</head>
<body>
<div class="wrap">
  <div class="card hdr">
    <div>
      <h1>⭐ Awards Management</h1>
      <div class="muted">Manage lifetime and attendance awards</div>
    </div>
    <div class="nav">
      <a class="btn" href="index.php">← Admin Home</a>
      <a class="btn" href="users.php">Users</a>
      <a class="btn" href="ai.php">AI Console</a>
      <a class="btn" href="../site/">View Dashboard</a>
    </div>
  </div>

  <!-- Stats Overview -->
  <div class="card full-width">
    <h2>Statistics</h2>
    <div class="stat-grid">
      <div class="stat-card">
        <div class="stat-label">Total Awards</div>
        <div class="stat-value"><?= number_format($stats['total']) ?></div>
      </div>
      <div class="stat-card">
        <div class="stat-label">With Images</div>
        <div class="stat-value" style="color:#7ce3a1"><?= number_format($stats['with_image']) ?></div>
      </div>
      <div class="stat-card">
        <div class="stat-label">Missing Images</div>
        <div class="stat-value" style="color:#ffbb66"><?= number_format($stats['missing_image']) ?></div>
      </div>
      <div class="stat-card">
        <div class="stat-label">Coverage</div>
        <div class="stat-value" style="color:#9ecbff">
          <?= $stats['total'] > 0 ? number_format(($stats['with_image'] / $stats['total']) * 100, 0) : 0 ?>%
        </div>
      </div>
    </div>
  </div>

  <div class="grid">
    <!-- Generate Award -->
    <div class="card">
      <h2>Generate Award Image</h2>
      <div class="row" style="margin-bottom:8px">
        <label style="flex:1">
          User:
          <select id="genUser" style="width:100%">
            <option value="">Select user…</option>
            <?php foreach ($users as $u): ?>
              <option value="<?= (int)$u['id'] ?>"><?= htmlspecialchars($u['name']) ?></option>
            <?php endforeach; ?>
          </select>
        </label>
      </div>
      <div class="row" style="margin-bottom:8px">
        <label style="flex:1">
          Kind:
          <select id="genKind">
            <option value="lifetime_steps">Lifetime Steps</option>
            <option value="attendance_weeks">Attendance Weeks</option>
          </select>
        </label>
        <label style="flex:1">
          Milestone:
          <input id="genValue" type="number" min="1" placeholder="100000" style="width:100%">
        </label>
      </div>
      <div class="row" style="margin-bottom:8px">
        <label class="muted">
          <input type="checkbox" id="genForce"> Force regenerate if exists
        </label>
      </div>
      <div class="row">
        <button class="btn primary" id="genBtn">Generate Image</button>
      </div>
      <div id="awStatus" class="muted" style="margin-top:8px"></div>
    </div>

    <!-- Batch Operations -->
    <div class="card">
      <h2>Batch Operations</h2>
      <div class="row" style="margin-bottom:12px">
        <label style="flex:1">
          Filter by kind:
          <select id="batchKind" style="width:100%">
            <option value="">All kinds</option>
            <option value="lifetime_steps">Lifetime Steps</option>
            <option value="attendance_weeks">Attendance Weeks</option>
          </select>
        </label>
      </div>
      <div class="row" style="margin-bottom:8px">
        <button class="btn primary" id="regenMissingBtn">Regenerate Missing Images</button>
      </div>
      <div class="row" style="margin-bottom:8px">
        <button class="btn" id="clearCacheBtn">Clear Date Cache</button>
      </div>
      <div class="row">
        <button class="btn" id="refreshBtn">Refresh List</button>
      </div>
    </div>

    <!-- Milestones Management -->
    <div class="card">
      <h2>Milestones</h2>
      <div class="muted" style="margin-bottom:8px">Manage milestone lists for awards. Enter comma-separated integers.</div>

      <div class="row" style="margin-bottom:8px">
        <label style="flex:1">
          Lifetime steps:
          <input id="msLifetime" type="text" placeholder="100000,250000,500000" style="width:100%" />
        </label>
      </div>

      <div class="row" style="margin-bottom:8px">
        <label style="flex:1">
          Attendance weeks (checkins):
          <input id="msAttendance" type="text" placeholder="25,50,100" style="width:100%" />
        </label>
      </div>

      <div class="row" style="margin-bottom:8px">
        <div id="msPreview" class="muted" style="flex:1">Parsed: —</div>
      </div>

      <div class="row">
        <button class="btn primary" id="saveMsBtn">Save Milestones</button>
        <button class="btn" id="resetMsBtn" style="margin-left:8px">Reset to Defaults</button>
      </div>
    </div>
  </div>

  <!-- Awards List -->
  <div class="card full-width">
    <h2>Recent Awards (last 100)</h2>
    <div style="overflow-x:auto">
      <table>
        <thead>
          <tr>
            <th>Image</th>
            <th>User</th>
            <th>Kind</th>
            <th>Milestone</th>
            <th>Status</th>
            <th>Created</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="awardsTable">
          <?php if (empty($awards)): ?>
            <tr><td colspan="7" class="muted" style="text-align:center">No awards found</td></tr>
          <?php else: ?>
            <?php foreach ($awards as $a): ?>
              <tr>
                <td>
                  <?php
                    $img = $a['image_path'] ?? '';
                    if ($img) {
                      if (preg_match('~^https?://~', $img)) {
                        $src = $img;
                      } else {
                        // Normalize stored path and build a web path to site assets.
                        $normalized = preg_replace('#^site/#', '', ltrim($img, '/'));
                        if (strpos($normalized, 'assets/') === 0) {
                          // already includes assets/ prefix
                          $src = '../' . $normalized;
                        } else {
                          // common stored form: "awards/{uid}/file.webp" -> file is at site/assets/awards/...
                          $src = '../site/assets/' . $normalized;
                        }
                      }
                      echo '<img src="' . htmlspecialchars($src) . '" class="img-thumb" alt="Award" onerror="this.style.display=\'none\'">';
                    } else {
                      echo '<div class="img-thumb" style="background:rgba(255,255,255,0.05)"></div>';
                    }
                  ?>
                </td>
                <td><?= htmlspecialchars($a['name']) ?></td>
                <td><span class="muted"><?= htmlspecialchars($a['kind']) ?></span></td>
                <td><strong><?= number_format((int)$a['milestone_value']) ?></strong></td>
                <td>
                  <?php if (!empty($a['image_path'])): ?>
                    <span class="badge ok">✓ Image</span>
                  <?php else: ?>
                    <span class="badge warn">⚠ Missing</span>
                  <?php endif; ?>
                </td>
                <td class="muted"><?= date('M j, Y', strtotime($a['created_at'])) ?></td>
                <td>
                  <a href="../site/user.php?id=<?= (int)$a['user_id'] ?>" class="link" target="_blank">View Page</a>
                  <button class="btn warn delete-award-btn" data-id="<?= (int)$a['id'] ?>" style="margin-left:8px">Delete</button>
                  <button class="btn regen-award-btn" style="margin-left:8px" 
                    data-user="<?= (int)$a['user_id'] ?>" 
                    data-kind="<?= htmlspecialchars($a['kind']) ?>" 
                    data-value="<?= (int)$a['milestone_value'] ?>">Regen</button>
                  <span class="muted row-status" style="margin-left:8px"></span>
                </td>
              </tr>
            <?php endforeach; ?>
          <?php endif; ?>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Status Message -->
  <div id="status" class="muted" style="display:none"></div>
</div>

<script>
const CSRF = "<?= htmlspecialchars($csrf) ?>";
const base = '../';

function showStatus(msg, type = 'info') {
  const el = document.getElementById('status');
  el.textContent = msg;
  el.style.display = 'block';
  el.style.borderColor = type === 'ok' ? 'rgba(124, 227, 161, 0.3)' : 
                         type === 'err' ? 'rgba(255, 119, 153, 0.3)' : 
                         'rgba(255,255,255,0.06)';
  setTimeout(() => el.style.display = 'none', 5000);
}

async function freshCsrf() {
  try {
    const r = await fetch(base + 'api/csrf_token.php', { cache: 'no-store' });
    const j = await r.json();
    return (j && j.token) ? String(j.token) : CSRF;
  } catch(e) { return CSRF; }
}

 // Generate single award
document.getElementById('genBtn').addEventListener('click', async () => {
  const uid = parseInt(document.getElementById('genUser').value, 10) || 0;
  const kind = document.getElementById('genKind').value.trim();
  const val = parseInt(document.getElementById('genValue').value, 10) || 0;
  const force = document.getElementById('genForce').checked;
  const status = document.getElementById('awStatus');
  
  if (!uid || !kind || !val) {
    alert('Please select user, kind, and milestone');
    return;
  }
  
  status.textContent = 'Generating…';
  try {
    const tk = await freshCsrf();
    const res = await fetch(base + 'api/award_generate.php', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'X-CSRF': tk },
      body: JSON.stringify({ user_id: uid, kind, milestone_value: val, force })
    });
    const j = await res.json();
    
    if (j && j.ok && j.skipped) {
      status.textContent = 'Skipped: ' + (j.reason || 'already exists');
    } else if (j && j.ok) {
      status.textContent = '✓ Generated: ' + (j.path || '');
      setTimeout(() => location.reload(), 1500);
    } else {
      status.textContent = '✗ Error: ' + (j && j.error ? j.error : 'failed');
    }
  } catch (e) {
    status.textContent = '✗ Error generating image';
  }
});

 // Regenerate missing
document.getElementById('regenMissingBtn').addEventListener('click', async () => {
  const kind = document.getElementById('batchKind').value.trim();
  const status = document.getElementById('awStatus');
  const btn = document.getElementById('regenMissingBtn');
  
  if (!confirm('Regenerate all missing award images' + (kind ? ' for ' + kind : '') + '?')) {
    return;
  }
  
  // Disable button during processing
  btn.disabled = true;
  btn.textContent = 'Processing...';
  
  let totalGenerated = 0;
  let totalErrors = 0;
  let batchCount = 0;
  
  try {
    // Process in batches until all are complete
    while (true) {
      batchCount++;
      status.textContent = `Processing batch ${batchCount}...`;
      
      const body = (kind && kind !== 'custom') ? JSON.stringify({ kind, limit: 10 }) : JSON.stringify({ limit: 10 });
      const tk = await freshCsrf();
      const res = await fetch(base + 'api/award_regen_missing.php', { method: 'POST', headers: { 'Content-Type': 'application/json', 'X-CSRF': tk }, body });
      const j = await res.json();
      
      if (!j || !j.ok) {
        status.textContent = 'Error: ' + (j && j.error ? j.error : 'failed');
        break;
      }
      
      totalGenerated += (j.generated || 0);
      totalErrors += (j.errors || 0);
      const remaining = j.remaining || 0;
      const total = j.total_missing || 0;
      
      // Update status with progress
      if (remaining > 0) {
        status.textContent = `Progress: ${totalGenerated} generated, ${totalErrors} errors, ${remaining} remaining...`;
        // Small delay between batches to avoid overwhelming the server
        await new Promise(resolve => setTimeout(resolve, 500));
      } else {
        // All done
        status.textContent = `✓ Complete: ${totalGenerated} generated, ${totalErrors} errors (from ${total} missing)`;
        break;
      }
    }
  } catch (e) {
    status.textContent = 'Error: ' + e.message;
  } finally {
    // Re-enable button
    btn.disabled = false;
    btn.textContent = 'Regenerate Missing Images';
  }
});

// Clear cache
document.getElementById('clearCacheBtn').addEventListener('click', async () => {
  if (!confirm('Clear all cached award dates? This will force recalculation next time dates are requested.')) {
    return;
  }
  
  showStatus('Clearing cache...');
  try {
    const tk = await freshCsrf();
    const res = await fetch(base + 'api/migrate.php', { cache: 'no-store' });
    await res.text();
    
    // Delete from cache table (we'd need a dedicated endpoint, but for now just inform)
    showStatus('⚠ Cache clear requires database access - use SQL: DELETE FROM user_awards_cache', 'info');
  } catch (e) {
    showStatus('✗ Error clearing cache', 'err');
  }
});

 // Refresh page
 document.getElementById('refreshBtn').addEventListener('click', () => {
   location.reload();
 });

 // Delegate delete and regen actions to the awardsTable for reliable event handling
 document.getElementById('awardsTable').addEventListener('click', async (ev) => {
   const btn = ev.target.closest('button');
   if (!btn) return;

   // Delete action
   if (btn.classList.contains('delete-award-btn')) {
     const id = btn.getAttribute('data-id');
     if (!id) return;
     if (!confirm('Delete this award? This will remove the DB row and the generated image file (if present).')) return;

     // Provide immediate UI feedback
     const origText = btn.textContent;
     btn.disabled = true;
     btn.textContent = 'Deleting...';
     showStatus('Deleting award...');

     try {
       const tk = await freshCsrf();
       const res = await fetch(base + 'api/admin_delete_award.php', {
         method: 'POST',
         headers: { 'Content-Type': 'application/json', 'X-CSRF': tk },
         body: JSON.stringify({ id: parseInt(id, 10) })
       });
       const j = await res.json();
       if (j && j.ok) {
         showStatus('✓ Deleted', 'ok');
         const row = btn.closest('tr');
         if (row) row.remove();
       } else {
         showStatus('✗ Error deleting award', 'err');
         btn.disabled = false;
         btn.textContent = origText;
       }
     } catch (err) {
       showStatus('✗ Error deleting award', 'err');
       btn.disabled = false;
       btn.textContent = origText;
     }
     return;
   }

   // Regen action (force regenerate image)
   if (btn.classList.contains('regen-award-btn')) {
     const userId = btn.getAttribute('data-user');
     const kind = btn.getAttribute('data-kind');
     const val = btn.getAttribute('data-value');
     if (!userId || !kind || !val) return;
     if (!confirm('Regenerate the award image for this user and milestone?')) return;

     // Immediate UI feedback
     const origText = btn.textContent;
     btn.disabled = true;
     btn.textContent = 'Regenerating...';
     const row = btn.closest('tr');
     const rowStatus = row ? row.querySelector('.row-status') : null;
     if (rowStatus) rowStatus.textContent = 'Regenerating...';

     try {
       const tk = await freshCsrf();
       const res = await fetch(base + 'api/award_generate.php', {
         method: 'POST',
         headers: { 'Content-Type': 'application/json', 'X-CSRF': tk },
         body: JSON.stringify({ user_id: parseInt(userId, 10), kind: kind, milestone_value: parseInt(val,10), force: true })
       });
       const j = await res.json();
       if (j && j.ok) {
         if (rowStatus) rowStatus.textContent = '✓ Regenerated';
         // Refresh the row image (if present) or reload
         if (row) {
           const imgEl = row.querySelector('.img-thumb');
           if (imgEl) {
             // Force reload by updating src if available in response.path
             if (j.path) {
               imgEl.src = '../' + j.path;
               imgEl.style.display = '';
             } else {
               // fallback: reload page to reflect changes
               setTimeout(() => location.reload(), 800);
             }
           } else {
             setTimeout(() => location.reload(), 800);
           }
         } else {
           setTimeout(() => location.reload(), 800);
         }
         // clear row status after a short delay
         setTimeout(() => { if (rowStatus) rowStatus.textContent = ''; }, 3000);
       } else {
         if (rowStatus) rowStatus.textContent = '✗ Error';
         btn.disabled = false;
         btn.textContent = origText;
       }
     } catch (err) {
       if (rowStatus) rowStatus.textContent = '✗ Error';
       btn.disabled = false;
       btn.textContent = origText;
     }
     return;
   }
 });

//
// Milestones management JS
//

function parseMilestones(str) {
  if (!str || typeof str !== 'string') return [];
  return Array.from(new Set(str.split(',').map(s => parseInt(s.trim(), 10)).filter(n => Number.isFinite(n) && n > 0)))
    .sort((a,b) => a - b);
}

function formatList(arr) {
  if (!Array.isArray(arr) || arr.length === 0) return '—';
  return arr.join(', ');
}

function updateMsPreview() {
  const l = parseMilestones(document.getElementById('msLifetime').value);
  const a = parseMilestones(document.getElementById('msAttendance').value);
  const el = document.getElementById('msPreview');
  el.textContent = `Lifetime: ${formatList(l)} · Attendance: ${formatList(a)}`;
}

async function loadMilestones() {
  try {
    const r = await fetch(base + 'api/settings_get.php', { cache: 'no-store' });
    const j = await r.json();
    if (j) {
      document.getElementById('msLifetime').value = j['milestones.lifetime_steps'] || '';
      document.getElementById('msAttendance').value = j['milestones.attendance_weeks'] || '';
      updateMsPreview();
    }
  } catch (e) {
    // ignore
  }
}

async function saveSetting(key, value) {
  const tk = await freshCsrf();
  const res = await fetch(base + 'api/settings_set.php', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json', 'X-CSRF': tk },
    body: JSON.stringify({ key, value })
  });
  return res.json();
}

document.getElementById('msLifetime').addEventListener('input', updateMsPreview);
document.getElementById('msAttendance').addEventListener('input', updateMsPreview);

document.getElementById('saveMsBtn').addEventListener('click', async () => {
  const lraw = document.getElementById('msLifetime').value;
  const araw = document.getElementById('msAttendance').value;
  const l = parseMilestones(lraw);
  const a = parseMilestones(araw);
  if (l.length === 0 || a.length === 0) {
    alert('Both milestone lists must contain at least one positive integer.');
    return;
  }
  showStatus('Saving milestones...');
  try {
    const r1 = await saveSetting('milestones.lifetime_steps', l.join(','));
    const r2 = await saveSetting('milestones.attendance_weeks', a.join(','));
    if ((r1 && r1.ok) && (r2 && r2.ok)) {
      showStatus('✓ Milestones saved', 'ok');
      updateMsPreview();
      // optional: reload to reflect changes in list
      setTimeout(() => location.reload(), 1200);
    } else {
      showStatus('✗ Error saving milestones', 'err');
    }
  } catch (e) {
    showStatus('✗ Error saving milestones', 'err');
  }
});

document.getElementById('resetMsBtn').addEventListener('click', async () => {
  if (!confirm('Reset milestones to recommended defaults?')) return;
  const defaultsLifetime = '100000,250000,500000,750000,1000000';
  const defaultsAttendance = '25,50,100';
  document.getElementById('msLifetime').value = defaultsLifetime;
  document.getElementById('msAttendance').value = defaultsAttendance;
  updateMsPreview();
  // Save defaults
  try {
    showStatus('Saving defaults...');
    const r1 = await saveSetting('milestones.lifetime_steps', defaultsLifetime);
    const r2 = await saveSetting('milestones.attendance_weeks', defaultsAttendance);
    if ((r1 && r1.ok) && (r2 && r2.ok)) {
      showStatus('✓ Defaults saved', 'ok');
      setTimeout(() => location.reload(), 1000);
    } else {
      showStatus('✗ Error saving defaults', 'err');
    }
  } catch (e) {
    showStatus('✗ Error saving defaults', 'err');
  }
});

// Initialize
loadMilestones();

</script>
</body>
</html>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/admin/awards_settings.php =====

<?php
declare(strict_types=1);

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));
require_once __DIR__ . '/../api/lib/admin_auth.php';
require_admin();
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
$csrf = \App\Security\Csrf::token();
?><!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Awards Settings — KW Admin</title>
  <link rel="stylesheet" href="../public/assets/css/app.css" />
  <style>
    body { background:#0b1020; color:#e6ecff; font: 14px system-ui,-apple-system,"Segoe UI",Roboto,Arial; }
    .wrap { max-width: 900px; margin: 24px auto; padding: 0 16px; }
    .card { background:#0f1530; border:1px solid rgba(255,255,255,0.08); border-radius:12px; padding:16px; margin-bottom:12px; }
    .row { display:flex; gap:12px; align-items:center; flex-wrap:wrap; margin-bottom:8px; }
    label input[type="text"], label input[type="number"] { background:#111936; color:#e6ecff; border:1px solid #1e2a5a; border-radius:8px; padding:6px 8px; min-width:220px; }
    .muted { color: rgba(230,236,255,0.7); font-size: 13px; }
    .btn { padding:8px 10px; border-radius:8px; background:#1a2350; border:1px solid #2c3a7a; color:#e6ecff; cursor:pointer; }
    .btn.warn { background:#4d1a1a; border-color:#7a2c2c; }
    h1{ margin:0 0 8px 0; font-size:18px; }
  </style>
  <script>
    const CSRF = "<?= htmlspecialchars($csrf) ?>";
    async function freshCsrf(){
      try {
        const r = await fetch('../api/csrf_token.php', { cache: 'no-store' });
        const j = await r.json();
        return (j && j.token) ? String(j.token) : CSRF;
      } catch(e) { return CSRF; }
    }
    async function postJson(url, body){
      const tk = await freshCsrf();
      const res = await fetch(url, { method:'POST', headers:{'Content-Type':'application/json','X-CSRF':tk}, body: JSON.stringify(body) });
      const j = await res.json().catch(()=>null);
      return { ok: res.ok, json: j };
    }
  </script>
</head>
<body>
<div class="wrap">
  <div class="card">
    <div style="display:flex;justify-content:space-between;align-items:center">
      <div>
        <h1>Awards Settings</h1>
        <div class="muted">Edit thresholds and first-award labels (stored in settings).</div>
      </div>
      <div>
        <a class="btn" href="index.php">Back</a>
        <a class="btn" href="awards.php">Awards Editor</a>
      </div>
    </div>
  </div>

  <div class="card" id="settingsCard">
    <div style="margin-top:0px">
      <h2 style="margin:0 0 8px 0">Daily Milestones</h2>
      <div class="muted" style="margin-bottom:8px">Define ordered daily milestones as a JSON array of objects: [{"steps":1000,"label":"1k"}, ...]. The public site will use this list to render chips.</div>
      <div style="margin-bottom:8px">
        <textarea id="milestonesJson" style="width:100%;min-height:160px;background:#07102a;color:#e6ecff;border:1px solid #1e2a5a;padding:8px;border-radius:8px;font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;"></textarea>
      </div>
      <div class="row">
        <button class="btn" id="formatBtn">Format JSON</button>
        <button class="btn" id="validateBtn">Validate</button>
        <button class="btn" id="saveMilestonesBtn">Save Milestones</button>
        <button class="btn" id="reloadBtn">Reload</button>
        <button class="btn warn" id="resetMilestonesBtn">Reset Milestones to Defaults</button>
        <span id="milestonesStatus" class="muted"></span>
      </div>
      <div class="muted" style="margin-top:8px">
        Tip: Use Format first, then Save Milestones.
      </div>
    </div>
  </div>
</div>

<script>
(async function(){
  const base = '../';

  async function loadSettings(){
    const statusEl = document.getElementById('milestonesStatus');
    if (statusEl) statusEl.textContent = 'Loading…';
    try {
      const res = await fetch(base + 'api/settings_get.php', { cache:'no-store' });
      const flags = await res.json();

      const raw = flags['daily.milestones'] || '';
      if (raw && typeof raw === 'string' && raw.trim().length > 0) {
        try {
          const arr = JSON.parse(raw);
          document.getElementById('milestonesJson').value = JSON.stringify(arr, null, 2);
        } catch (e) {
          document.getElementById('milestonesJson').value = raw;
        }
      } else {
        try {
          const pub = await fetch(base + 'api/public_settings.php', { cache:'no-store' });
          const pj = await pub.json();
          if (pj && Array.isArray(pj.daily_milestones)) {
            document.getElementById('milestonesJson').value = JSON.stringify(pj.daily_milestones, null, 2);
          } else {
            document.getElementById('milestonesJson').value = '';
          }
        } catch (e) {
          document.getElementById('milestonesJson').value = '';
        }
      }

      if (statusEl) statusEl.textContent = '';
    } catch (e) {
      if (statusEl) statusEl.textContent = 'Failed to load settings';
      console.error('loadSettings error', e);
    }
  }

  function tryParseMilestones(txt) {
    const v = JSON.parse(txt);
    if (!Array.isArray(v)) throw new Error('Must be an array');
    for (const it of v) {
      if (typeof it !== 'object' || it === null) throw new Error('Each item must be an object');
      if (!Number.isFinite(Number(it.steps)) || Number(it.steps) <= 0) throw new Error('Each item.steps must be a positive integer');
      if (!it.label || String(it.label).trim() === '') throw new Error('Each item.label must be non-empty');
    }
    return v;
  }

  document.getElementById('formatBtn').addEventListener('click', () => {
    const ta = document.getElementById('milestonesJson');
    const statusEl = document.getElementById('milestonesStatus');
    try {
      const v = tryParseMilestones(ta.value || '[]');
      ta.value = JSON.stringify(v, null, 2);
      if (statusEl) statusEl.textContent = 'Formatted';
    } catch (e) {
      if (statusEl) statusEl.textContent = 'Format error: ' + (e.message || e);
    }
  });

  document.getElementById('validateBtn').addEventListener('click', () => {
    const ta = document.getElementById('milestonesJson');
    const statusEl = document.getElementById('milestonesStatus');
    try {
      tryParseMilestones(ta.value || '[]');
      if (statusEl) statusEl.textContent = 'Valid JSON';
    } catch (e) {
      if (statusEl) statusEl.textContent = 'Validation error: ' + (e.message || e);
    }
  });

  document.getElementById('saveMilestonesBtn').addEventListener('click', async () => {
    const ta = document.getElementById('milestonesJson');
    const statusEl = document.getElementById('milestonesStatus');
    if (statusEl) statusEl.textContent = 'Saving…';
    let parsed;
    try {
      parsed = tryParseMilestones(ta.value || '[]');
    } catch (e) {
      if (statusEl) statusEl.textContent = 'Validation error: ' + (e.message || e);
      return;
    }
    try {
      const r = await postJson(base + 'api/settings_set.php', { key: 'daily.milestones', value: JSON.stringify(parsed) });
      if (!r.ok || (r.json && r.json.error)) {
        if (statusEl) statusEl.textContent = 'Save failed';
        return;
      }
      if (statusEl) statusEl.textContent = 'Saved';
      setTimeout(()=>{ if (statusEl && statusEl.textContent === 'Saved') statusEl.textContent = ''; }, 1200);
    } catch (e) {
      if (statusEl) statusEl.textContent = 'Save error';
    }
  });

  document.getElementById('resetMilestonesBtn').addEventListener('click', async () => {
    if (!confirm('Reset milestones to defaults from site/config.json?')) return;
    const statusEl = document.getElementById('milestonesStatus');
    if (statusEl) statusEl.textContent = 'Resetting…';
    try {
      const pub = await fetch(base + 'api/public_settings.php', { cache:'no-store' });
      const pj = await pub.json();
      const arr = (pj && Array.isArray(pj.daily_milestones)) ? pj.daily_milestones : [];
      document.getElementById('milestonesJson').value = JSON.stringify(arr, null, 2);
      const r = await postJson(base + 'api/settings_set.php', { key: 'daily.milestones', value: JSON.stringify(arr) });
      if (!r.ok || (r.json && r.json.error)) {
        if (statusEl) statusEl.textContent = 'Reset save failed';
        return;
      }
      if (statusEl) statusEl.textContent = 'Reset and saved';
      setTimeout(()=>{ if (statusEl && statusEl.textContent === 'Reset and saved') statusEl.textContent = ''; }, 1200);
    } catch (e) {
      if (statusEl) statusEl.textContent = 'Reset failed';
    }
  });

  document.getElementById('reloadBtn').addEventListener('click', loadSettings);

  await loadSettings();
})();
</script>
</body>
</html>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/admin/users.php =====

<?php
// Credentials come from .env (ADMIN_USER, ADMIN_PASS)
declare(strict_types=1);

try {
require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));
require_once __DIR__ . '/../api/lib/admin_auth.php';
require_admin();
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
$csrfToken = \App\Security\Csrf::token();
$pdo = \App\Config\DB::pdo();
// Ensure schema exists without echoing anything
ob_start();
require_once __DIR__ . '/../api/migrate.php';
ob_end_clean();

function post($key, $default=null) { return $_POST[$key] ?? $default; }
function is_post() { return ($_SERVER['REQUEST_METHOD'] ?? '') === 'POST'; }

function assert_week_fmt(string $w): void {
  if (!preg_match('/^\d{4}-\d{2}-\d{2}$/', $w)) throw new Exception('Week must be YYYY-MM-DD');
}
function norm_day($v) {
  if ($v === '' || $v === null) return null;
  if (!is_numeric($v)) throw new Exception('Day values must be integers');
  $i = (int)$v;
  if ($i < 0) throw new Exception('Day values cannot be negative');
  return $i;
}

$info = '';
$err  = '';

if (is_post()) {
  // CSRF
  if (!\App\Security\Csrf::validate((string)($_POST['csrf'] ?? ''))) { $err = 'invalid_csrf'; } else {
  $action = post('action', '');
  try {
    if ($action === 'create_user') {
      $nm  = trim((string)post('u_name'));
      $sx  = trim((string)post('u_sex')) ?: null;
      $ag  = post('u_age'); $ag = strlen((string)$ag) ? (int)$ag : null;
      $tg  = trim((string)post('u_tag')) ?: null;
      if (!$nm) throw new Exception('Name required.');
      // Ensure new users have explicit AI defaults: ai_opt_in=0, interests='', rival_id=NULL
      $pdo->prepare("INSERT INTO users(name,sex,age,tag,ai_opt_in,interests,rival_id) VALUES(:n,:s,:a,:t,:ai,:int,:rid)")
          ->execute([':n'=>$nm, ':s'=>$sx, ':a'=>$ag, ':t'=>$tg, ':ai'=>0, ':int'=>'', ':rid'=>null]);
      $info = "User '$nm' created.";
    }

    if ($action === 'update_user') {
      $id = (int)post('u_id');
      $nm = trim((string)post('u_name'));
      $sx = trim((string)post('u_sex')) ?: null;
      $ag = post('u_age'); $ag = strlen((string)$ag) ? (int)$ag : null;
      $tg = trim((string)post('u_tag')) ?: null;
      $ac = (int)(post('u_active', '1') === '1');

      // New AI fields
      $ai_opt_in = (int)(post('u_ai_opt_in', '0') === '1');
      $interests = trim((string)post('u_interests', ''));
      $rival_raw = post('u_rival_id', '');
      $rival_id = ($rival_raw === '' || $rival_raw === null) ? null : (int)$rival_raw;

      if (!$nm) throw new Exception('Name required.');
      $stmt = $pdo->prepare("UPDATE users SET name=:n, sex=:s, age=:a, tag=:t, is_active=:ac, ai_opt_in=:ai_opt_in, interests=:interests, rival_id=:rival_id, updated_at=datetime('now') WHERE id=:id");
      $stmt->execute([
        ':n'=>$nm, ':s'=>$sx, ':a'=>$ag, ':t'=>$tg, ':ac'=>$ac,
        ':ai_opt_in'=>$ai_opt_in, ':interests'=>$interests, ':rival_id'=>$rival_id, ':id'=>$id
      ]);
      $info = "User '$nm' updated.";
    }

    /* Bulk add selected users to a week (users-page handler) */
    if ($action === 'bulk_add_selected_users') {
      $week = trim((string)post('week'));
      assert_week_fmt($week);
      $ids = $_POST['user_ids'] ?? [];
      if (!is_array($ids) || !count($ids)) throw new Exception('Select at least one user.');

      \App\Support\Tx::with(function($pdo) use (&$added, &$skipped, $week, $ids) {
      $sel = $pdo->prepare("SELECT name,sex,age,tag FROM users WHERE id=:id");
      $ins = $pdo->prepare("INSERT INTO entries(week,name,monday,tuesday,wednesday,thursday,friday,saturday,sex,age,tag)
                            VALUES(:w,:n,NULL,NULL,NULL,NULL,NULL,NULL,:sex,:age,:tag)
                            ON CONFLICT(week,name) DO NOTHING");
      $added=0; $skipped=0;
      foreach ($ids as $rid) {
        $rid = (int)$rid;
        $sel->execute([':id'=>$rid]);
        if ($u = $sel->fetch()) {
          $ins->execute([':w'=>$week, ':n'=>$u['name'], ':sex'=>$u['sex']?:null, ':age'=>$u['age'], ':tag'=>$u['tag']?:null]);
          $added += ($ins->rowCount() > 0) ? 1 : 0;
          $skipped += ($ins->rowCount() === 0) ? 1 : 0;
        }
      }
      });
      $info = "Added $added user(s) to $week. Skipped $skipped.";
    }

  }
  catch (Throwable $e) {
    if ($pdo->inTransaction()) $pdo->rollBack();
    $err = $e->getMessage();
  }
}
}

$weeks = $pdo->query("SELECT week, COALESCE(label, week) AS label, finalized FROM weeks ORDER BY week DESC")->fetchAll();
$curWeek = $_GET['week'] ?? ($weeks[0]['week'] ?? '');
$users = $pdo->query("SELECT id,name,sex,age,tag,is_active,photo_path,ai_opt_in,interests,rival_id FROM users ORDER BY LOWER(name)")->fetchAll();
$allUsers = $pdo->query("SELECT id,name FROM users ORDER BY LOWER(name)")->fetchAll();
?>
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>KW Admin — Users</title>
  <link rel="icon" href="../favicon.ico" />
  <link rel="stylesheet" href="../public/assets/css/app.css" />
  <style>
    body { background:#0b1020; color:#e6ecff; font: 14px system-ui, -apple-system, "Segoe UI", Roboto, Arial; }
    .wrap { max-width: 1200px; margin: 24px auto; padding: 0 16px; }
    .card { background:#0f1530; border:1px solid rgba(255,255,255,0.08); border-radius:12px; padding:16px; margin-bottom:16px; }
    input, select { background:#111936; color:#e6ecff; border:1px solid #1e2a5a; border-radius:8px; padding:6px 8px; }
    table { width:100%; border-collapse: collapse; }
    th, td { padding:8px; border-top:1px solid rgba(255,255,255,0.08); vertical-align:middle; }
    .row { display:flex; gap:8px; flex-wrap:wrap; align-items:center; }
    .btn { padding:8px 10px; border-radius:8px; background:#1a2350; border:1px solid #2c3a7a; color:#e6ecff; cursor:pointer; }
    .btn.warn { background:#4d1a1a; border-color:#7a2c2c; }
    .ok { color:#7ce3a1; } .err { color:#f79; }
    /* Users table specific */
    #usersTable { width:100%; border-collapse:collapse; table-layout:fixed; }
    #usersTable th, #usersTable td { padding:8px; }
    #userSearch { margin:6px 0;width:100%;max-width:260px; }
  </style>
</head>
<body>
<div class="wrap">
  <div class="card">
    <div class="row" style="justify-content:space-between">
      <div>
        <div class="kicker">Kings Walk Week</div>
        <h1>Users</h1>
      </div>
      <div class="row" style="gap:8px">
        <a class="btn" href="index.php">Home</a>
        <a class="btn" href="weeks.php">Weeks</a>
        <a class="btn" href="entries.php">Entries</a>
        <a class="btn" href="users.php">Users</a>
        <a class="btn" href="ai.php">AI</a>
        <a class="btn" href="phones.php">Phones</a>
        <a class="btn" href="photos.php">Photos</a>
        <a class="btn" href="../site/">Dashboard</a>
      </div>
    </div>
    <?php if($info): ?><div class="ok"><?=$info?></div><?php endif; ?>
    <?php if($err): ?><div class="err"><?=$err?></div><?php endif; ?>
  </div>

  <div class="card">
    <div class="row" style="justify-content:space-between;align-items:flex-end">
      <h3 style="margin:0">Users</h3>
      <div class="row">
        <label>Week:
          <select id="weekSelect" onchange="onWeekChange()">
            <?php foreach ($weeks as $w): ?>
              <option value="<?= htmlspecialchars($w['week']) ?>" <?= ($w['week'] === ($curWeek ?? '') ? 'selected' : '') ?>>
                <?= htmlspecialchars($w['label']) ?><?= !empty($w['finalized']) ? ' (finalized)' : '' ?>
              </option>
            <?php endforeach; ?>
          </select>
        </label>
      </div>
    </div>
    <form method="post" class="row" style="margin-bottom:8px">
      <input type="hidden" name="action" value="create_user" />
      <input type="hidden" name="csrf" value="<?= htmlspecialchars($csrfToken) ?>" />
      <label>Name: <input name="u_name" required placeholder="Name"></label>
      <label>Sex: <input name="u_sex" style="width:60px" placeholder=""></label>
      <label>Age: <input type="number" min="0" name="u_age" style="width:70px" placeholder=""></label>
      <label>Tag: <input name="u_tag" style="width:160px" placeholder="Pregnant, Injured, ..."></label>
      <button class="btn" type="submit">Add User</button>
    </form>

    <input id="userSearch" placeholder="Search users...">

    <div class="row" style="margin:6px 0">
      <form method="post" id="bulkAddForm" style="display:inline;margin-right:8px">
        <input type="hidden" name="action" value="bulk_add_selected_users" />
        <input type="hidden" name="week" value="<?=$curWeek?>" />
        <input type="hidden" name="csrf" value="<?= htmlspecialchars($csrfToken) ?>" />
        <button class="btn" type="submit">Add selected to week</button>
      </form>
      <form method="post" action="../api/entries_add_active.php" style="display:inline">
        <input type="hidden" name="week" value="<?=$curWeek?>" />
        <input type="hidden" name="csrf" value="<?= htmlspecialchars($csrfToken) ?>" />
        <button class="btn" type="submit">Add all active to week</button>
      </form>

      <!-- Users backup/restore -->
      <button class="btn" type="button" id="downloadUsersBtn" title="Download users table as JSON">Download JSON</button>
      <button class="btn" type="button" id="uploadUsersBtn" title="Upload users JSON to restore">Upload JSON</button>
      <input type="file" id="usersJsonFile" accept=".json,application/json" style="display:none" />
    </div>

      <?php if ($users): ?>
    <table id="usersTable">
      <thead><tr><th style="width:28px"><input type="checkbox" id="chkAll"></th><th>Name</th><th>Sex</th><th>Age</th><th>Tag</th><th>Interests</th><th>AI Opt-in</th><th>Rival</th><th>Active</th><th></th></tr></thead>
      <tbody>
      <?php foreach($users as $u): ?>
        <tr>
          <td><input type="checkbox" class="uChk" value="<?=$u['id']?>"></td>
          <form method="post" style="display:contents">
            <input type="hidden" name="action" value="update_user" />
            <input type="hidden" name="u_id" value="<?=$u['id']?>" />
            <input type="hidden" name="csrf" value="<?= htmlspecialchars($csrfToken) ?>" />
            <td><input name="u_name" value="<?=htmlspecialchars($u['name'])?>" required></td>
            <td><input name="u_sex" value="<?=htmlspecialchars((string)$u['sex'])?>" style="width:60px"></td>
            <td><input type="number" min="0" name="u_age" value="<?=htmlspecialchars((string)$u['age'])?>" style="width:70px"></td>
            <td><input name="u_tag" value="<?=htmlspecialchars((string)$u['tag'])?>" style="width:160px"></td>
            <td><input name="u_interests" value="<?=htmlspecialchars((string)$u['interests'])?>" style="width:160px"></td>
            <td>
              <select name="u_ai_opt_in">
                <option value="0" <?=(!$u['ai_opt_in'])?'selected':''?>>No</option>
                <option value="1" <?=($u['ai_opt_in'])?'selected':''?>>Yes</option>
              </select>
            </td>
            <td>
              <select name="u_rival_id">
                <option value=""><?=htmlspecialchars('(none)')?></option>
                <?php foreach($allUsers as $ou): ?>
                  <option value="<?=$ou['id']?>" <?=($ou['id']==$u['rival_id'])?'selected':''?>><?=htmlspecialchars($ou['name'])?></option>
                <?php endforeach; ?>
              </select>
            </td>
            <td>
              <select name="u_active">
                <option value="1" <?=$u['is_active']?'selected':''?>>Yes</option>
                <option value="0" <?=!$u['is_active']?'selected':''?>>No</option>
              </select>
            </td>
            <td><button class="btn" type="submit">Save</button></td>
          </form>
        </tr>
      <?php endforeach; ?>
      </tbody>
    </table>
    <?php else: ?>
      <p class="text-white/70">No users yet. Add some above.</p>
    <?php endif; ?>
  </div>

  </div>

</div>
<?php } catch (Throwable $e) {
  http_response_code(500);
  echo "<pre style='color:#f88;background:#220;padding:8px;border:1px solid #844;border-radius:6px;'>" .
       htmlspecialchars($e->getMessage()) . "</pre>";
  throw $e;
} ?>
<script>
(function(){
  function currentWeek(){ const sel=document.getElementById('weekSelect'); return sel? sel.value : '<?= htmlspecialchars($curWeek) ?>'; }
  window.onWeekChange = function(){
    const w = currentWeek();
    const url = new URL(window.location.href);
    url.searchParams.set('week', w);
    window.location.href = url.toString();
  };
  const q = document.getElementById('userSearch');
  const tbl = document.getElementById('usersTable');
  const chkAll = document.getElementById('chkAll');
  const bulkForm = document.getElementById('bulkAddForm');
  if (!tbl) return;
  const tbody = tbl.querySelector('tbody');

  function getRows(){ return Array.from(tbody.querySelectorAll('tr')); }

  function filterUsers(){
    const v = (q && q.value || '').trim().toLowerCase();
    getRows().forEach(tr=>{
      let nameEl = tr.querySelector('input[name="u_name"]') || tr.querySelector('td:nth-child(2)');
      let name = '';
      if (nameEl) {
        if (nameEl.value !== undefined) name = nameEl.value;
        else name = nameEl.textContent || '';
      }
      name = name.trim().toLowerCase();
      tr.style.display = (v === '' || name.indexOf(v) !== -1) ? '' : 'none';
    });
  }

  if (q) q.addEventListener('input', filterUsers);

  if (chkAll) {
    chkAll.addEventListener('change', ()=>{
      const checked = chkAll.checked;
      getRows().forEach(tr=>{
        if (tr.style.display === 'none') return;
        const cb = tr.querySelector('input.uChk');
        if (cb) cb.checked = checked;
      });
    });
  }

  if (bulkForm) {
    bulkForm.addEventListener('submit', function(e){
      // remove previous user_ids[] inputs
      Array.from(bulkForm.querySelectorAll('input[name="user_ids[]"]')).forEach(n=>n.remove());
      const checked = Array.from(tbl.querySelectorAll('tbody input.uChk:checked'))
        .filter(cb => cb.closest('tr') && cb.closest('tr').style.display !== 'none')
        .map(cb => cb.value);
      if (!checked.length) {
        e.preventDefault();
        alert('Select at least one user.');
        return;
      }
      // ensure hidden week input matches selector
      const w = currentWeek();
      const weekInput = bulkForm.querySelector('input[name="week"]');
      if (weekInput) weekInput.value = w;
      checked.forEach(id=>{
        const h = document.createElement('input');
        h.type = 'hidden'; h.name = 'user_ids[]'; h.value = id;
        bulkForm.appendChild(h);
      });
    });
  }
  })();

  // Backup / restore users JSON
  (function(){
    const KW_CSRF = <?= json_encode($csrfToken) ?>;
    const downloadBtn = document.getElementById('downloadUsersBtn');
    const uploadBtn = document.getElementById('uploadUsersBtn');
    const fileInput = document.getElementById('usersJsonFile');

    async function downloadUsersJSON() {
      try {
        const resp = await fetch('../api/admin_users_export.php', {
          method: 'POST',
          credentials: 'same-origin',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ csrf: KW_CSRF })
        });
        const json = await resp.json();
        if (!json || !json.ok) {
          alert('Export failed: ' + (json && (json.error || JSON.stringify(json)) || 'unknown error'));
          return;
        }
        const data = JSON.stringify(json.users, null, 2);
        const blob = new Blob([data], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'users-backup-' + new Date().toISOString().slice(0,10) + '.json';
        document.body.appendChild(a);
        a.click();
        a.remove();
        URL.revokeObjectURL(url);
      } catch (e) {
        alert('Export error: ' + (e && e.message || e));
      }
    }

    uploadBtn && uploadBtn.addEventListener('click', function(){
      if (fileInput) fileInput.click();
    });

    fileInput && fileInput.addEventListener('change', async function(){
      const f = this.files && this.files[0];
      if (!f) return;
      if (!confirm('Uploading a users backup will modify the users table. Proceed?')) { this.value = ''; return; }
      try {
        const text = await f.text();
        let payload;
        try { payload = JSON.parse(text); } catch(err) { alert('Invalid JSON file.'); this.value=''; return; }
        const users = Array.isArray(payload) ? payload : (payload.users || payload.data || null);
        if (!users || !Array.isArray(users)) { alert('JSON must be an array of users or an object with a "users" array.'); this.value=''; return; }
        const resp = await fetch('../api/admin_users_import.php', {
          method: 'POST',
          credentials: 'same-origin',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ csrf: KW_CSRF, users: users })
        });
        const res = await resp.json();
        if (res && res.ok) {
          alert('Import complete. Inserted: ' + (res.inserted||0) + ', Updated: ' + (res.updated||0));
          window.location.reload();
        } else {
          alert('Import failed: ' + (res && (res.error || JSON.stringify(res)) || 'unknown'));
        }
      } catch (e) {
        alert('Import error: ' + (e && e.message || e));
      } finally {
        this.value = '';
      }
    });

    downloadBtn && downloadBtn.addEventListener('click', downloadUsersJSON);
  })();

</script>
</body>
</html>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/admin/set_phone.php =====

<?php
require __DIR__ . '/../api/util.php';
$pdo = pdo();
$name = $_GET['name'] ?? null;
$phone = $_GET['phone'] ?? null;
if (!$name || !$phone) { echo "usage: ?name=Mike&phone=+18015551234"; exit; }
$st = $pdo->prepare("UPDATE users SET phone_e164=? WHERE name=?");
$st->execute([$phone, $name]);
echo "ok";


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/admin/weeks.php =====

<?php
declare(strict_types=1);

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));
require_once __DIR__ . '/../api/lib/admin_auth.php';
require_admin();
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
$csrf = \App\Security\Csrf::token();
$SITE_ASSETS = '../site/assets';
?><!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>KW Admin — Weeks</title>
  <link rel="icon" href="../favicon.ico" />
  <link rel="stylesheet" href="../public/assets/css/app.css" />
  <style>
    body { background:#0b1020; color:#e6ecff; font:14px system-ui,-apple-system,"Segoe UI",Roboto,Arial; }
    .wrap { max-width: 1100px; margin: 24px auto; padding: 0 16px; }
    .card { background:#0f1530; border:1px solid rgba(255,255,255,0.08); border-radius:12px; padding:16px; margin-bottom:16px; }
    .row { display:flex; gap:8px; flex-wrap:wrap; align-items:center; }
    .btn { padding:8px 10px; border-radius:8px; background:#1a2350; border:1px solid #2c3a7a; color:#e6ecff; cursor:pointer; }
    .btn.warn { background:#4d1a1a; border-color:#7a2c2c; }
    label input, select { background:#111936; color:#e6ecff; border:1px solid #1e2a5a; border-radius:8px; padding:6px 8px; }
    h1 { font-size: 20px; font-weight: 800; margin: 0; }
    .muted { color: rgba(230,236,255,0.7); font-size: 12px; }
    table { width:100%; border-collapse: collapse; }
    th, td { padding:8px; border-top:1px solid rgba(255,255,255,0.08); text-align:left; }
    .nav { display:flex; flex-wrap:wrap; gap:8px; margin-bottom: 12px; }
    .badge { display:inline-block; padding:2px 8px; border-radius:999px; border:1px solid rgba(255,255,255,0.15); font-size:12px; }
  </style>
</head>
<body>
<div class="wrap">
  <div class="card">
    <div class="row" style="justify-content:space-between">
      <div>
        <div class="kicker">Kings Walk Week</div>
        <h1>Weeks</h1>
      </div>
      <div class="nav">
        <a class="btn" href="index.php">Home</a>
        <a class="btn" href="entries.php">Entries</a>
        <a class="btn" href="users.php">Users</a>
        <a class="btn" href="ai.php">AI</a>
        <a class="btn" href="../site/">Dashboard</a>
      </div>
    </div>
  </div>

  <div class="card">
    <h2 style="margin:0 0 8px">Create Week</h2>
    <div class="row">
      <label>Date (YYYY-MM-DD): <input id="newWeekDate" placeholder="2025-10-19"></label>
      <label>Label: <input id="newWeekLabel" placeholder="Oct 19–25"></label>
      <button class="btn" id="createWeekBtn">Create/Update</button>
    </div>
    <div id="createStatus" class="muted"></div>
  </div>

  <div class="card">
    <h2 style="margin:0 0 8px">All Weeks</h2>
    <div class="row" style="margin-bottom:8px">
      <label><input type="checkbox" id="forceDelete"> Delete cascades entries</label>
      <span class="muted" id="weeksStatus"></span>
    </div>
    <table id="weeksTable">
      <thead>
        <tr><th>Date</th><th>Label</th><th>Status</th><th>Actions</th></tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>
</div>

<script>
(function(){
  const base = '../';
  const CSRF = "<?= htmlspecialchars($csrf) ?>";
  const tBody = document.querySelector('#weeksTable tbody');
  const status = document.getElementById('weeksStatus');

  function btn(txt, cls){ const b=document.createElement('button'); b.textContent=txt; b.className='btn'+(cls?' '+cls:''); return b; }

  async function listWeeks(){
    status.textContent = 'Loading…';
    tBody.innerHTML = '';
    try {
      const r = await fetch(base+'api/weeks.php', { cache:'no-store' });
      const j = await r.json();
      const weeks = Array.isArray(j.weeks) ? j.weeks : [];
      status.textContent = `${weeks.length} week(s)`;
      weeks.forEach(w => {
        const tr = document.createElement('tr');
        const tdDate = document.createElement('td'); tdDate.textContent = w.starts_on;
        const tdLabel= document.createElement('td'); tdLabel.textContent = w.label || w.starts_on;
        const tdStatus=document.createElement('td'); tdStatus.innerHTML = w.finalized ? '<span class="badge">finalized</span>' : '<span class="badge">open</span>';
        const tdAct  = document.createElement('td');
        const row = w.starts_on;
        const link = document.createElement('a'); link.href = 'entries.php?week='+encodeURIComponent(row); link.className='btn'; link.textContent='Open entries';
        const fin = btn('Finalize');
        const unfin = btn('Unfinalize');
        const addAct = btn('Add active');
        const del = btn('Delete','warn');
        fin.onclick = async ()=>{ await finalize(row); };
        unfin.onclick = async ()=>{ await unfinalize(row); };
        addAct.onclick = async ()=>{ await addActive(row); };
        del.onclick = async ()=>{ await delWeek(row); };
        tdAct.append(link, ' ', fin, ' ', unfin, ' ', addAct, ' ', del);
        tr.append(tdDate, tdLabel, tdStatus, tdAct);
        tBody.appendChild(tr);
      });
    } catch(e) { status.textContent = 'Failed to load'; }
  }

  async function finalize(week){
    if (!confirm('Finalize '+week+'?')) return;
    const r = await fetch(base+'api/entries_finalize.php', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRF':CSRF}, body: new URLSearchParams({ action:'finalize', week, csrf: CSRF }) });
    if (!r.ok) return alert('Finalize failed');
    await listWeeks();
  }
  async function unfinalize(week){
    if (!confirm('Unfinalize '+week+'?')) return;
    const r = await fetch(base+'api/entries_finalize.php', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRF':CSRF}, body: new URLSearchParams({ action:'unfinalize', week, csrf: CSRF }) });
    if (!r.ok) return alert('Unfinalize failed');
    await listWeeks();
  }
  async function addActive(week){
    const r = await fetch(base+'api/entries_add_active.php', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRF':CSRF}, body: new URLSearchParams({ week, csrf: CSRF }) });
    if (!r.ok) return alert('Add failed');
    alert('Added active users to '+week);
  }
  async function delWeek(date){
    const force = document.getElementById('forceDelete').checked ? '1' : '0';
    if (!confirm('Delete '+date + (force==='1'?' (cascade)':'') + '?')) return;
    const r = await fetch(base+'api/weeks.php', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRF':CSRF}, body: new URLSearchParams({ action:'delete', date, force, csrf: CSRF }) });
    const j = await r.json().catch(()=>null);
    if (!r.ok || !j || j.ok !== true) return alert('Delete failed');
    await listWeeks();
  }

  document.getElementById('createWeekBtn').addEventListener('click', async ()=>{
    const date = (document.getElementById('newWeekDate').value || '').trim();
    const label= (document.getElementById('newWeekLabel').value || '').trim();
    const st = document.getElementById('createStatus');
    if (!date) { alert('Enter YYYY-MM-DD'); return; }
    st.textContent = 'Saving…';
    const r = await fetch(base+'api/weeks.php', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRF':CSRF}, body: new URLSearchParams({ action:'create', date, label, csrf: CSRF }) });
    const j = await r.json().catch(()=>null);
    if (!r.ok || !j || j.ok !== true) { st.textContent = 'Save failed'; return; }
    st.textContent = 'Saved';
    await listWeeks();
  });

  listWeeks();
})();
</script>
</body>
</html>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/admin/photos.php =====

<?php
declare(strict_types=1);
require __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));
require_once __DIR__ . '/../api/lib/admin_auth.php';
require_admin();

require __DIR__.'/../api/util.php';
$pdo = pdo();
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
$csrfToken = \App\Security\Csrf::token();

$SITE_ASSETS = '../site/assets'; // standardized base for site assets

$users = $pdo->query("SELECT id,name,sex,age,tag,is_active,photo_path FROM users ORDER BY LOWER(name)")->fetchAll(PDO::FETCH_ASSOC);
?><!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>KW Admin — Photos</title>
  <link rel="icon" href="../favicon.ico" />
  <link rel="stylesheet" href="../public/assets/css/app.css" />
  <style>
    body { background:#0b1020; color:#e6ecff; font:14px system-ui,-apple-system,"Segoe UI",Roboto,Arial; }
    .wrap { max-width: 1100px; margin: 24px auto; padding: 0 16px; }
    .card { background:#0f1530; border:1px solid rgba(255,255,255,0.08); border-radius:12px; padding:16px; margin-bottom:16px; }
    .row { display:flex; gap:8px; flex-wrap:wrap; align-items:center; }
    .btn { padding:8px 10px; border-radius:8px; background:#1a2350; border:1px solid #2c3a7a; color:#e6ecff; cursor:pointer; }
    .btn.warn { background:#4d1a1a; border-color:#7a2c2c; }
    input[type="file"] { background:#111936; color:#e6ecff; border:1px solid #1e2a5a; border-radius:8px; padding:6px 8px; }
    h1 { font-size: 20px; font-weight: 800; margin: 0; }
    table { width:100%; border-collapse: collapse; }
    th, td { padding:8px; border-top:1px solid rgba(255,255,255,0.08); text-align:left; vertical-align: middle; }
    img.thumb{width:48px;height:48px;object-fit:cover;border-radius:50%}
    .nav { display:flex; flex-wrap:wrap; gap:8px; }
    form.inline{display:inline-block;margin:0}
  </style>
</head>
<body>
<div class="wrap">
  <div class="card">
    <div class="row" style="justify-content:space-between">
      <div>
        <div class="kicker">Kings Walk Week</div>
        <h1>Photos</h1>
      </div>
      <div class="nav">
        <a class="btn" href="index.php">Home</a>
        <a class="btn" href="weeks.php">Weeks</a>
        <a class="btn" href="entries.php">Entries</a>
        <a class="btn" href="users.php">Users</a>
        <a class="btn" href="ai.php">AI</a>
        <a class="btn" href="phones.php">Phones</a>
        <a class="btn" href="../site/">Dashboard</a>
      </div>
    </div>
  </div>

  <div class="card">
    <table>
      <thead>
        <tr><th style="width:280px">Name</th><th style="width:120px">Photo</th><th>Actions</th></tr>
      </thead>
      <tbody>
      <?php foreach ($users as $u): 
        $name = htmlspecialchars($u['name']);
        $photoPath = $u['photo_path'] ?? '';
        if ($photoPath) {
          // convert absolute URL to path
          if (preg_match('~^https?://~i', $photoPath)) {
            $p = parse_url($photoPath, PHP_URL_PATH) ?: $photoPath;
            $photoPath = $p;
          }
          // normalize: remove leading slashes, optional leading "site/" and "assets/"
          $photoPath = preg_replace('#^/+#', '', $photoPath);
          $photoPath = preg_replace('#^site/#', '', $photoPath);
          $photoPath = preg_replace('#^assets/#', '', $photoPath);
          // point to ../site/assets/... consistently
          $thumbRel = $SITE_ASSETS . '/' . ltrim($photoPath, '/');
        } else {
          $thumbRel = $SITE_ASSETS . '/admin/no-photo.svg';
        }
      ?>
      <tr>
        <td><?= $name ?></td>
        <td><img src="<?= htmlspecialchars($thumbRel) ?>" alt="photo" class="thumb"></td>
        <td>
          <form class="inline" action="../api/admin_upload_photo.php" method="post" enctype="multipart/form-data" style="display:inline-flex;gap:8px;align-items:center">
            <input type="hidden" name="user_id" value="<?= (int)$u['id'] ?>">
            <input type="hidden" name="redirect" value="1">
            <input type="hidden" name="csrf" value="<?= htmlspecialchars($csrfToken) ?>">
            <input type="file" name="photo" accept="image/jpeg,image/png,image/webp" required>
            <button class="btn" type="submit">Upload</button>
          </form>
          <?php if ($u['photo_path']): ?>
          <form class="inline" action="../api/admin_delete_photo.php" method="post" onsubmit="return confirm('Remove photo?');" style="display:inline-flex;gap:8px;align-items:center;margin-left:8px">
            <input type="hidden" name="user_id" value="<?= (int)$u['id'] ?>">
            <input type="hidden" name="redirect" value="1">
            <input type="hidden" name="csrf" value="<?= htmlspecialchars($csrfToken) ?>">
            <button class="btn warn" type="submit">Remove</button>
          </form>
          <?php endif; ?>
        </td>
      </tr>
      <?php endforeach; ?>
      </tbody>
    </table>
  </div>
</div>
</body>
</html>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/admin/ai.php =====

<?php
declare(strict_types=1);

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));
require_once __DIR__ . '/../api/lib/admin_auth.php';
require_admin();
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
$csrf = \App\Security\Csrf::token();
?><!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>KW Admin — AI</title>
  <link rel="icon" href="../favicon.ico" />
  <link rel="stylesheet" href="../public/assets/css/app.css" />
  <style>
    body { background:#0b1020; color:#e6ecff; font:14px system-ui,-apple-system,"Segoe UI",Roboto,Arial; }
    .wrap { max-width: 1100px; margin: 24px auto; padding: 0 16px; }
    .card { background:#0f1530; border:1px solid rgba(255,255,255,0.08); border-radius:12px; padding:16px; margin-bottom:16px; }
    .row { display:flex; gap:8px; flex-wrap:wrap; align-items:center; }
    .btn { padding:8px 10px; border-radius:8px; background:#1a2350; border:1px solid #2c3a7a; color:#e6ecff; cursor:pointer; }
    .btn.warn { background:#4d1a1a; border-color:#7a2c2c; }
    label input, select { background:#111936; color:#e6ecff; border:1px solid #1e2a5a; border-radius:8px; padding:6px 8px; }
    h1 { font-size: 20px; font-weight: 800; margin: 0; }
    .muted { color: rgba(230,236,255,0.7); font-size: 12px; }
    table { width:100%; border-collapse: collapse; }
    th, td { padding:8px; border-top:1px solid rgba(255,255,255,0.08); text-align:left; }
    .nav { display:flex; flex-wrap:wrap; gap:8px; margin-bottom: 12px; }
    .badge { display:inline-block; padding:2px 8px; border-radius:999px; border:1px solid rgba(255,255,255,0.15); font-size:12px; }
    .mono { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace; }
  </style>
</head>
<body>
<div class="wrap">
  <div class="card">
    <div class="row" style="justify-content:space-between">
      <div>
        <div class="kicker">Kings Walk Week</div>
        <h1>AI Console</h1>
      </div>
      <div class="nav">
        <a class="btn" href="index.php">Home</a>
        <a class="btn" href="weeks.php">Weeks</a>
        <a class="btn" href="entries.php">Entries</a>
        <a class="btn" href="users.php">Users</a>
        <a class="btn" href="../site/">Dashboard</a>
      </div>
    </div>
  </div>

  <div class="card">
    <h2 style="margin:0 0 8px">Settings</h2>
    <div class="row" style="margin-bottom:8px">
      <span id="aiEnabledBadge" class="badge">AI: …</span>
      <button class="btn" id="toggleAiBtn">Toggle</button>
    </div>
    <div class="row" style="margin-bottom:8px">
      <label><input type="checkbox" id="aiNudgeChk"> Nudge</label>
      <label><input type="checkbox" id="aiRecapChk"> Recap</label>
      <label><input type="checkbox" id="aiAwardChk"> Award</label>
      <button class="btn" id="saveCatsBtn">Save Categories</button>
    </div>
    <div class="row" style="margin-bottom:8px">
      <label>Model:
        <select id="aiModelSel">
          <option value="anthropic/claude-3.5-sonnet">anthropic/claude-3.5-sonnet</option>
          <option value="google/gemini-1.5-pro">google/gemini-1.5-pro</option>
          <option value="deepseek/deepseek-chat">deepseek/deepseek-chat</option>
        </select>
      </label>
      <button class="btn" id="saveModelBtn">Save</button>
    </div>
    <div class="row" style="margin-bottom:8px">
      <label>Auto-send:
        <select id="aiAutosendSel">
          <option value="0">Off (review queue)</option>
          <option value="1">On (send immediately)</option>
        </select>
      </label>
      <button class="btn" id="saveAutosendBtn">Save</button>
    </div>
    <div id="aiStatus" class="muted" style="margin-top:4px"></div>
  </div>

  <div class="card">
    <h2 style="margin:0 0 8px">Queue</h2>
    <div class="row" style="margin-bottom:8px">
      <label>Week: <select id="weekSel"></select></label>
      <button class="btn" id="sendApprovedBtn">Send approved (selected week)</button>
      <button class="btn warn" id="deleteAllWeekBtn">Delete all (this week)</button>
      <button class="btn warn" id="deleteAllBtn">Delete all (unsent)</button>
      <span id="queueStatus" class="muted"></span>
    </div>
    <table id="queueTable">
      <thead><tr><th>#</th><th>User</th><th>Week</th><th>Content</th><th>Approved</th><th>Actions</th></tr></thead>
      <tbody></tbody>
    </table>
  </div>

  <div class="card">
    <h2 style="margin:0 0 8px">AI Log</h2>
    <div id="aiLog" class="mono" style="white-space:pre-wrap; background:#0b1020; border:1px solid rgba(255,255,255,0.08); border-radius:8px; padding:8px; max-height:220px; overflow:auto;">Loading…</div>
    <div class="row" style="margin-top:8px"><button id="refreshLogBtn" class="btn">Refresh log</button></div>
  </div>
</div>

<script>
(function(){
  const base = '../';
  const CSRF = "<?= htmlspecialchars($csrf) ?>";
  
  async function freshCsrf(){
    try {
      const r = await fetch(base+'api/csrf_token.php', { cache: 'no-store' });
      const j = await r.json();
      return (j && j.token) ? String(j.token) : CSRF;
    } catch(e) { return CSRF; }
  }

  async function g(key){ const r = await fetch(base+'api/get_setting.php?key='+encodeURIComponent(key)); const j = await r.json(); return (j && j.value != null)? String(j.value) : ''; }
  async function set(key,value){ await fetch(base+'api/set_setting.php', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRF':CSRF}, body: new URLSearchParams({ key, value, csrf: CSRF }) }); }
  async function sget(){ const r = await fetch(base+'api/settings_get.php'); return await r.json(); }
  async function sset(key,val){ const tk = await freshCsrf(); await fetch(base+'api/settings_set.php', { method:'POST', headers:{'Content-Type':'application/json','X-CSRF':tk}, body: JSON.stringify({ key, value: !!val, csrf: tk }) }); }

  async function loadAi(){
    const badge = document.getElementById('aiEnabledBadge');
    const st = document.getElementById('aiStatus');
    st.textContent = 'Loading…';
    try {
      const flags = await sget();
      const ai = flags['ai.enabled'] ? '1' : '0';
      badge.textContent = 'AI: ' + (flags['ai.enabled'] ? 'ON' : 'OFF');
      badge.style.borderColor = ai==='1' ? 'rgba(122,255,180,0.35)' : 'rgba(255,255,255,0.15)';
      const nChk = document.getElementById('aiNudgeChk');
      const rChk = document.getElementById('aiRecapChk');
      const aChk = document.getElementById('aiAwardChk');
      nChk.checked = !!flags['ai.nudge.enabled'];
      rChk.checked = !!flags['ai.recap.enabled'];
      aChk.checked = !!flags['ai.award.enabled'];
      nChk.disabled = rChk.disabled = aChk.disabled = !flags['ai.enabled'];
      const model = await g('openrouter_model');
      if (model) document.getElementById('aiModelSel').value = model;
      const autosend = await g('ai_autosend');
      if (autosend) document.getElementById('aiAutosendSel').value = autosend;
      st.textContent = '';
    } catch(e) { st.textContent = 'Failed to load'; }
  }
  document.getElementById('toggleAiBtn').addEventListener('click', async ()=>{ const flags = await sget(); await sset('ai.enabled', !flags['ai.enabled']); await loadAi(); });
  document.getElementById('saveCatsBtn').addEventListener('click', async ()=>{
    const n = document.getElementById('aiNudgeChk').checked;
    const r = document.getElementById('aiRecapChk').checked;
    const a = document.getElementById('aiAwardChk').checked;
    await sset('ai.nudge.enabled', n);
    await sset('ai.recap.enabled', r);
    await sset('ai.award.enabled', a);
    await loadAi();
  });
  document.getElementById('saveModelBtn').addEventListener('click', async ()=>{ const v=document.getElementById('aiModelSel').value; await set('openrouter_model', v); await loadAi(); });
  document.getElementById('saveAutosendBtn').addEventListener('click', async ()=>{ const v=document.getElementById('aiAutosendSel').value; await set('ai_autosend', v); await loadAi(); });

  async function loadWeeks(){
    const sel = document.getElementById('weekSel'); sel.innerHTML='';
    try { const r=await fetch(base+'api/weeks.php',{cache:'no-store'}); const j=await r.json(); const weeks=Array.isArray(j.weeks)?j.weeks:[]; sel.innerHTML = weeks.map(w=>`<option value="${w.starts_on}">${w.label || w.starts_on}${w.finalized?' — finalized':''}</option>`).join(''); if (weeks.length) sel.value = weeks[0].starts_on; } catch(e){}
  }

  async function loadQueue(){
    const tbody = document.querySelector('#queueTable tbody'); tbody.innerHTML='';
    const st = document.getElementById('queueStatus'); st.textContent = 'Loading…';
    try {
      const r = await fetch(base+'api/ai_list.php?status=unsent', { cache:'no-store' });
      const j = await r.json();
      const items = Array.isArray(j.messages) ? j.messages : [];
      st.textContent = `${items.length} message(s)`;
      items.forEach((m,i)=>{
        const tr=document.createElement('tr');
        tr.innerHTML = `<td>${m.id}</td><td>${(m.user||'')}</td><td>${(m.week||'')}</td><td>${(m.body||'').replace(/[\r\n]+/g,' ')}</td><td>${m.approved?'Yes':'No'}</td><td></td>`;
        const tdAct = tr.lastElementChild;
        const appr = document.createElement('button'); appr.className='btn'; appr.textContent = m.approved ? 'Unapprove' : 'Approve';
        const del = document.createElement('button'); del.className='btn warn'; del.textContent='Delete';
        appr.onclick = async ()=>{ const form=new URLSearchParams({ id:String(m.id), approved: m.approved ? '0':'1', csrf: CSRF }); await fetch(base+'api/ai_approve_message.php', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRF':CSRF}, body: form }); await loadQueue(); };
        del.onclick = async ()=>{ const form=new URLSearchParams({ id:String(m.id), csrf: CSRF }); await fetch(base+'api/ai_delete_message.php', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRF':CSRF}, body: form }); await loadQueue(); };
        tdAct.append(appr,' ',del);
        tbody.appendChild(tr);
      });
    } catch(e) { st.textContent='Failed to load'; }
  }

  document.getElementById('sendApprovedBtn').addEventListener('click', async ()=>{
    const week = document.getElementById('weekSel').value || '';
    const r = await fetch(base+'api/ai_send_approved.php', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRF':CSRF}, body: new URLSearchParams({ week, csrf: CSRF }) });
    const j = await r.json().catch(()=>null);
    if (!r.ok || !j) return alert('Send failed');
    alert(`Sent: ${(j.sent_ids||[]).length} • Errors: ${(j.error_ids||[]).length}`);
    await loadQueue();
  });
  document.getElementById('deleteAllBtn').addEventListener('click', async ()=>{
    if (!confirm('Delete ALL unsent AI messages?')) return;
    const r = await fetch(base+'api/ai_delete_all.php', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRF':CSRF}, body: new URLSearchParams({ csrf: CSRF }) });
    const j = await r.json().catch(()=>null);
    if (!r.ok || !j) return alert('Delete failed');
    await loadQueue();
  });
  document.getElementById('deleteAllWeekBtn').addEventListener('click', async ()=>{
    const week = document.getElementById('weekSel').value || '';
    if (!week) return alert('Pick a week');
    if (!confirm('Delete ALL unsent for '+week+'?')) return;
    const r = await fetch(base+'api/ai_delete_all.php', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRF':CSRF}, body: new URLSearchParams({ week, csrf: CSRF }) });
    const j = await r.json().catch(()=>null);
    if (!r.ok || !j) return alert('Delete failed');
    await loadQueue();
  });

  async function loadAiLog(){
    const el = document.getElementById('aiLog'); el.textContent='Loading…';
    try { const r = await fetch(base+'api/ai_log.php'); const j = await r.json(); const rows = Array.isArray(j.entries)?j.entries:[]; el.textContent = rows.length? rows.join('\n') : 'No recent entries.'; } catch(e){ el.textContent='Failed to load'; }
  }
  document.getElementById('refreshLogBtn').addEventListener('click', loadAiLog);

  // Initial
  loadAi();
  loadWeeks();
  loadQueue();
  loadAiLog();
})();
</script>
</body>
</html>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/admin/phones.php =====

<?php
declare(strict_types=1);
require __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));
require_once __DIR__ . '/../api/lib/admin_auth.php';
require_admin();

require __DIR__.'/../api/util.php';
require __DIR__.'/../api/lib/phone.php';
$pdo = pdo();
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
$csrfToken = \App\Security\Csrf::token();

if ($_SERVER['REQUEST_METHOD']==='POST') {
  // CSRF validate
  require_once __DIR__ . '/../app/Security/Csrf.php';
  $csrf = $_POST['csrf'] ?? '';
  if (!\App\Security\Csrf::validate((string)$csrf)) { http_response_code(403); exit('invalid_csrf'); }
  $action = $_POST['action'] ?? '';
  $name = $_POST['name'] ?? '';
  if ($action==='save') {
    $phone = $_POST['phone'] ?? '';
    $st = $pdo->prepare("UPDATE users SET phone_e164=? WHERE name=?");
    $st->execute([$phone ?: null, $name]);
  } elseif ($action==='normalize') {
    $phone = $_POST['phone'] ?? '';
    $norm = to_e164($phone);
    $st = $pdo->prepare("UPDATE users SET phone_e164=? WHERE name=?");
    $st->execute([$norm, $name]);
  } elseif ($action==='clear') {
    $st = $pdo->prepare("UPDATE users SET phone_e164=NULL WHERE name=?");
    $st->execute([$name]);
  }
  header('Location: phones.php'); exit;
}

$rows = $pdo->query("SELECT name, COALESCE(phone_e164,'') AS phone_e164 FROM users ORDER BY LOWER(name)")->fetchAll(PDO::FETCH_ASSOC);
?><!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>KW Admin — Phones</title>
  <link rel="icon" href="../favicon.ico" />
  <link rel="stylesheet" href="../public/assets/css/app.css" />
  <style>
    body { background:#0b1020; color:#e6ecff; font:14px system-ui,-apple-system,"Segoe UI",Roboto,Arial; }
    .wrap { max-width: 1100px; margin: 24px auto; padding: 0 16px; }
    .card { background:#0f1530; border:1px solid rgba(255,255,255,0.08); border-radius:12px; padding:16px; margin-bottom:16px; }
    .row { display:flex; gap:8px; flex-wrap:wrap; align-items:center; }
    .btn { padding:8px 10px; border-radius:8px; background:#1a2350; border:1px solid #2c3a7a; color:#e6ecff; cursor:pointer; }
    .btn.warn { background:#4d1a1a; border-color:#7a2c2c; }
    label input, input, select { background:#111936; color:#e6ecff; border:1px solid #1e2a5a; border-radius:8px; padding:6px 8px; }
    h1 { font-size: 20px; font-weight: 800; margin: 0; }
    table { width:100%; border-collapse: collapse; }
    th, td { padding:8px; border-top:1px solid rgba(255,255,255,0.08); text-align:left; }
    .nav { display:flex; flex-wrap:wrap; gap:8px; }
    code { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace; font-size:12px; }
  </style>
</head>
<body>
<div class="wrap">
  <div class="card">
    <div class="row" style="justify-content:space-between">
      <div>
        <div class="kicker">Kings Walk Week</div>
        <h1>Phones</h1>
      </div>
      <div class="nav">
        <a class="btn" href="index.php">Home</a>
        <a class="btn" href="weeks.php">Weeks</a>
        <a class="btn" href="entries.php">Entries</a>
        <a class="btn" href="users.php">Users</a>
        <a class="btn" href="ai.php">AI</a>
        <a class="btn" href="photos.php">Photos</a>
        <a class="btn" href="../site/">Dashboard</a>
      </div>
    </div>
  </div>

  <div class="card">
    <table>
      <thead>
        <tr><th style="width:220px">Name</th><th style="width:360px">Phone (E.164)</th><th>Test curl</th></tr>
      </thead>
      <tbody>
      <?php foreach($rows as $r): $n=htmlspecialchars($r['name']); $p=htmlspecialchars($r['phone_e164']); ?>
        <tr>
          <td><?= $n ?></td>
          <td>
            <form method="post" class="row" style="gap:6px">
              <input type="hidden" name="name" value="<?= $n ?>" />
              <input type="hidden" name="csrf" value="<?= htmlspecialchars($csrfToken) ?>" />
              <input name="phone" value="<?= $p ?>" placeholder="+18015551234" style="min-width:200px">
              <button class="btn" name="action" value="save">Save</button>
              <button class="btn" name="action" value="normalize" type="submit">Normalize</button>
              <button class="btn warn" name="action" value="clear" type="submit">Clear</button>
            </form>
          </td>
          <td><code>curl -X POST ../api/sms.php --data-urlencode "From=<?= $p ?: '+1XXXXXXXXXX' ?>" --data-urlencode "Body=123"</code></td>
        </tr>
      <?php endforeach; ?>
      </tbody>
    </table>
  </div>
</div>
</body>
</html>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/scripts/rotate_audit.php =====

<?php
require __DIR__.'/../api/util.php';
$pdo = pdo();
$cut = (new DateTime('-90 days', new DateTimeZone('UTC')))->format(DateTime::ATOM);
$st = $pdo->prepare("DELETE FROM sms_audit WHERE created_at < ?");
$st->execute([$cut]);
echo "pruned\n";


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/scripts/twilio_sign.py =====

#!/usr/bin/env python3
import os, base64, hmac, hashlib

# Environment inputs
URL  = os.environ["URL"]
AUTH = os.environ["AUTH"]

# Use the exact POST values the server will see after form decoding.
# curl --data with '+' in number becomes a leading space when decoded.
POST = {
  "From": " 18015550123",
  "MessageSid": "SM_test123",
  "MessageStatus": "delivered",
  "To": " 13855032310",
}

joined = URL + "".join(k + POST[k] for k in sorted(POST))
sig = base64.b64encode(hmac.new(AUTH.encode(), joined.encode(), hashlib.sha1).digest()).decode()
print(sig)


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/scripts/test_awards.php =====

<?php
declare(strict_types=1);

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));

use App\Config\DB;

try {
    $userId = isset($argv[1]) ? (int)$argv[1] : 9998;
    $pdo = DB::pdo();
    require_once __DIR__ . '/../api/lib/awards.php';
    $awards = get_lifetime_awards($pdo, $userId);
    echo json_encode($awards, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT) . PHP_EOL;
} catch (Throwable $e) {
    fwrite(STDERR, "Error: " . $e->getMessage() . PHP_EOL);
    exit(1);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/scripts/repair_weeks.php =====

<?php
declare(strict_types=1);

require __DIR__ . '/../api/util.php';
$pdo = pdo();

function logln(string $msg): void { fwrite(STDOUT, $msg . "\n"); }

function iso_date(string $s): ?string {
  $s = trim($s);
  if ($s === '') return null;
  // Accept YYYY-M-D and pad
  if (preg_match('~^(\d{4})-(\d{1,2})-(\d{1,2})$~', $s, $m)) {
    $y = (int)$m[1]; $mo = (int)$m[2]; $d = (int)$m[3];
    if (!checkdate($mo, $d, $y)) return null;
    return sprintf('%04d-%02d-%02d', $y, $mo, $d);
  }
  return null;
}

$pdo->exec('BEGIN IMMEDIATE');
$rows = $pdo->query('PRAGMA table_info(weeks)')->fetchAll(PDO::FETCH_ASSOC);
$hasStarts = in_array('starts_on', array_map(fn($r)=>$r['name']??'', $rows), true);
if (!$hasStarts) {
  $pdo->exec("ALTER TABLE weeks ADD COLUMN starts_on TEXT");
}

// Pass 1: pad/normalize any malformed starts_on or week values into starts_on.
$bad = $pdo->query("SELECT rowid, week, starts_on FROM weeks WHERE starts_on IS NULL OR starts_on='' OR starts_on NOT GLOB '____-__-__'")->fetchAll(PDO::FETCH_ASSOC);
$fixed = 0; $skipped = 0;
foreach ($bad as $r) {
  $candidates = [ (string)($r['starts_on'] ?? ''), (string)($r['week'] ?? '') ];
  $iso = null;
  foreach ($candidates as $s) { if ($iso = iso_date($s)) break; }
  if ($iso) {
    $st = $pdo->prepare('UPDATE weeks SET starts_on = :d WHERE rowid = :id');
    $st->execute([':d'=>$iso, ':id'=>$r['rowid']]);
    $fixed++;
  } else {
    $skipped++;
    logln("Skipped rowid {$r['rowid']} (unfixable): week='{$r['week']}', starts_on='{$r['starts_on']}'");
  }
}

// Pass 2: dedupe rows that normalize to the same ISO date; keep a canonical row.
$rows = $pdo->query('SELECT rowid, week, starts_on, label, finalized, finalized_at FROM weeks')->fetchAll(PDO::FETCH_ASSOC);
$groups = [];
foreach ($rows as $r) {
  $iso = iso_date((string)($r['starts_on'] ?? '')) ?? iso_date((string)($r['week'] ?? ''));
  if (!$iso) continue; // skip invalid
  $groups[$iso] = $groups[$iso] ?? [];
  $groups[$iso][] = $r;
}

foreach ($groups as $iso => $rowsForDate) {
  if (count($rowsForDate) <= 1) continue;
  // Choose canonical: prefer finalized row, else first
  usort($rowsForDate, function($a,$b){
    $af = ((int)($a['finalized'] ?? 0)) || (!empty($a['finalized_at']));
    $bf = ((int)($b['finalized'] ?? 0)) || (!empty($b['finalized_at']));
    if ($af === $bf) return 0; return $af ? -1 : 1;
  });
  $keep = $rowsForDate[0];
  $keepId = (int)$keep['rowid'];
  // Ensure canonical row has starts_on normalized and label set
  $label = trim((string)($keep['label'] ?? '')) ?: $iso;
  $pdo->prepare('UPDATE weeks SET starts_on = :d, label = :l WHERE rowid = :id')->execute([':d'=>$iso, ':l'=>$label, ':id'=>$keepId]);
  // For the rest, move entries then delete
  for ($i=1; $i<count($rowsForDate); $i++) {
    $r = $rowsForDate[$i];
    $rid = (int)$r['rowid'];
    $cands = array_filter([(string)($r['week'] ?? ''), (string)($r['starts_on'] ?? '')]);
    foreach ($cands as $w) {
      $pdo->prepare('UPDATE entries SET week = :iso WHERE week = :w')->execute([':iso'=>$iso, ':w'=>$w]);
    }
    $pdo->prepare('DELETE FROM weeks WHERE rowid = :id')->execute([':id'=>$rid]);
  }
}

$pdo->exec('COMMIT');

// Create indexes after cleanup
$pdo->exec('CREATE UNIQUE INDEX IF NOT EXISTS weeks_starts_on_uq ON weeks(starts_on)');
$pdo->exec('CREATE INDEX IF NOT EXISTS idx_weeks_starts_on ON weeks(starts_on)');

logln("Repaired weeks: fixed={$fixed}, skipped={$skipped}");


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/scripts/gather_code.py =====

#!/usr/bin/env python3
"""
gather_code.py  –  Consolidate source files across a project.

Usage:
  gather_code.py [--root ROOT] [--ext EXTENSIONS] [--skip DIRS] [--skip-files NAMES] [--output FILE]
                 [--version]

Examples:
  # Consolidate all .py and .md files, skipping venv and .git:
  gather_code.py --ext .py,.md --skip .git,venv --output all_code.txt

  # Just print version and exit:
  gather_code.py --version
"""

import os
import sys
import argparse
import logging

__version__ = "1.1.0"

# default extensions and directories to skip
DEFAULT_EXTS = [".py", ".php", ".js", ".jsx", ".ts", ".tsx", ".mjs", ".cjs", ".json", ".yml", ".yaml", ".html", ".htm"]
DEFAULT_SKIP_DIRS = {".git", "backup", "__pycache__", "venv", ".venv", "env", ".env", "node_modules", "vendor", "dist", "build", ".idea", ".vscode", "tmp", "temp", "cache", "logs", "log", ".cache", ".logs", ".next", ".nuxt", ".svelte-kit", ".turbo", ".vite", ".parcel-cache", ".rollup.cache", ".pnpm-store", ".yarn", ".yalc", "coverage", ".nyc_output", "storybook-static", ".vercel", "out", "public", "assets", "_bak"}
DEFAULT_SKIP_FILES = {"package-lock.json", "pnpm-lock.yaml", "yarn.lock", "bun.lockb"}

def parse_args():
    p = argparse.ArgumentParser(
        description="Consolidate code files into a single text file."
    )
    p.add_argument(
        "--root",
        "-r",
        default=".",
        help="Root directory to start searching (default: current dir)."
    )
    p.add_argument(
        "--ext",
        "-e",
        default=",".join(DEFAULT_EXTS),
        help="Comma-separated list of file extensions to include (e.g. .py,.js)."
    )
    p.add_argument(
        "--skip",
        "-s",
        default=",".join(DEFAULT_SKIP_DIRS),
        help="Comma-separated list of directory names to skip."
    )
    p.add_argument(
        "--skip-files",
        "-F",
        default=",".join(DEFAULT_SKIP_FILES),
        help="Comma-separated list of file names to skip (e.g. lockfiles)."
    )
    p.add_argument(
        "--output",
        "-o",
        default="consolidated_code.txt",
        help="Path of the output file (default: consolidated_code.txt)."
    )
    p.add_argument(
        "--version",
        action="store_true",
        help="Show script version and exit."
    )
    return p.parse_args()

def should_skip_dir(dirname, skip_set):
    """Return True if `dirname` should be skipped."""
    return dirname in skip_set

def gather_files(root, exts, skip_dirs, skip_files):
    """Yield full paths of files under root with allowed extensions."""
    for dirpath, dirs, files in os.walk(root):
        # modify dirs in-place to skip unwanted subdirs
        dirs[:] = [d for d in dirs if not should_skip_dir(d, skip_dirs)]
        for fname in files:
            if fname in skip_files:
                continue
            if os.path.splitext(fname)[1] in exts:
                yield os.path.join(dirpath, fname)

def consolidate(files, out_path):
    """Read each file, append to out_path, logging errors per file."""
    total = 0
    errors = 0
    with open(out_path, "w", encoding="utf-8") as out_f:
        out_f.write(f"# Consolidated on {os.path.abspath(out_path)}\n")
        out_f.write(f"# Script version: {__version__}\n\n")
        for filepath in files:
            total += 1
            try:
                with open(filepath, "r", encoding="utf-8", errors="replace") as f:
                    content = f.read()
                out_f.write(f"\n\n# ===== FILE: {filepath} =====\n\n")
                out_f.write(content)
            except Exception as e:
                errors += 1
                logging.warning(f"Error reading {filepath}: {e}")
    return total, errors

def main():
    args = parse_args()
    if args.version:
        print(f"gather_code.py version {__version__}")
        sys.exit(0)

    # configure logging
    logging.basicConfig(
        level=logging.INFO,
        format="%(levelname)-8s %(message)s"
    )

    exts = {e.strip() for e in args.ext.split(",") if e.strip()}
    skip_dirs = {d.strip() for d in args.skip.split(",") if d.strip()}
    skip_files = {f.strip() for f in args.skip_files.split(",") if f.strip()}

    logging.info(f"Starting walk at root: {args.root}")
    logging.info(f"Including extensions: {sorted(exts)}")
    logging.info(f"Skipping directories: {sorted(skip_dirs)}")
    logging.info(f"Skipping files: {sorted(skip_files)}")
    logging.info(f"Output will be saved to: {args.output}")

    files = list(gather_files(args.root, exts, skip_dirs, skip_files))
    logging.info(f"Found {len(files)} files to process.")

    total, errors = consolidate(files, args.output)
    logging.info(f"Consolidated {total} files with {errors} errors.")
    if errors:
        logging.warning("Some files could not be read; check warnings above.")

if __name__ == "__main__":
    main()


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/.github/workflows/ci.yml =====

name: CI
on:
  push:
    branches: [ main ]
  pull_request:
jobs:
  php:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
      - run: composer install --no-interaction --prefer-dist
      - run: cp .env.example .env
      - run: composer migrate || true
      - run: composer test
      - run: composer stan
      - run: composer cs


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/site/index.html =====

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Kings Walk Week</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
  <link rel="stylesheet" href="../public/assets/css/app.css" />
  <link rel="icon" href="../favicon.ico" />
</head>
<body class="min-h-screen">
  <header class="px-4 py-4 sm:px-6 sm:py-5 sticky top-0 backdrop-blur supports-[backdrop-filter]:bg-[#0b1020]/80 z-30 border-b border-white/10">
    <div class="max-w-6xl mx-auto flex items-center justify-between gap-3">
      <div>
        <div class="kicker">Kings Walk Week</div>
        <h1 class="text-2xl sm:text-3xl font-extrabold leading-tight">Walk together. Win today.</h1>
        <p class="text-xs sm:text-sm text-white/70 mt-1">Data comes from a SQLite database. Weeks are finalized by admin; snapshots freeze awards.</p>
      </div>
      <div class="hidden sm:flex items-center gap-2">
        <span id="loadStatus" class="badge">Loading…</span>
      </div>
    </div>
  </header>

  <main class="max-w-6xl mx-auto px-4 sm:px-6 py-4 sm:py-6 space-y-4 sm:space-y-6">
    <!-- Week Selector -->
    <section class="card p-3 sm:p-4 shadow-soft">
      <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3">
        <div class="space-y-1">
          <div class="kicker">Week</div>
          <h2 class="text-lg sm:text-xl font-bold">Select a week</h2>
          <p class="text-white/70 text-sm">Finalized weeks are read-only (snapshot).</p>
        </div>
        <div class="flex items-center gap-3 w-full sm:w-auto">
          <select id="weekSelector" class="px-2 py-2 rounded bg-white/5 text-sm w-full sm:w-auto"></select>
        </div>
      </div>
    </section>

    <!-- Summary + Awards Row -->
    <section class="grid-auto-fit">
      <div class="card p-4 space-y-3">
        <div class="kicker">Summary</div>
        <h3 class="text-xl font-bold">Live Leaderboard</h3>
        <div id="leaderboardPosition" class="text-xs text-white/60 mb-1"></div>
        <div class="overflow-x-auto">
          <table id="leaderboard" class="w-full text-sm">
            <thead class="text-white/70">
              <tr>
                <th class="text-left py-2">Rank</th>
                <th class="text-left py-2 cursor-pointer" data-sort="name">Name</th>
                <th class="text-right py-2 px-3 cursor-pointer" data-sort="total">Total</th>
                <th class="text-right py-2 px-3">Avg</th>
                <th class="text-right py-2 px-3">Best Day</th>
                <th class="text-right py-2">Days ≥30k</th>
                <th class="text-right py-2">Days ≥20k</th>
                <th class="text-right py-2">Days ≥15k</th>
                <th class="text-right py-2">Days ≥10k</th>
                <th class="text-right py-2">Days ≥2.5k</th>
                <th class="text-right py-2">Days ≥1k</th>
              </tr>
            </thead>
            <tbody></tbody>
          </table>
        </div>
      </div>

      <div class="card p-4 space-y-3">
        <div class="kicker">Awards</div>
        <h3 class="text-xl font-bold">Badges and Bragging Rights</h3>
        <ul id="awardsList" class="space-y-2 text-sm"></ul>
      </div>
    </section>

    <!-- Charts -->
    <section class="grid-auto-fit">
      <div class="card p-4 space-y-3">
        <div class="kicker">Chart</div>
        <h3 class="text-xl font-bold">Steps by Day</h3>
        <canvas id="perDayChart" height="220"></canvas>
      </div>
      <div class="card p-4 space-y-3">
        <div class="kicker">Chart</div>
        <h3 class="text-xl font-bold">Family Total by Day</h3>
        <canvas id="stackedTotalChart" height="220"></canvas>
      </div>
      <div class="card p-4 space-y-3">
        <div class="kicker">Chart</div>
        <h3 class="text-xl font-bold">Trajectories</h3>
        <canvas id="linesChart" height="220"></canvas>
      </div>
    </section>

    <!-- Personal Cards -->
    <section id="cards" class="grid-auto-fit"></section>

    <!-- Missing Data Callouts -->
    <section class="card p-4 space-y-3">
      <div class="kicker">Accountability</div>
      <h3 class="text-xl font-bold">Missing Check-ins</h3>
      <ul id="missingList" class="space-y-2 text-sm"></ul>
      <p class="text-xs text-white/60">Blank = no report. Nudge each other kindly.</p>
    </section>

    <footer class="py-6 text-center text-xs text-white/60">
      Built for the King family. Tutu approved.
    </footer>
  </main>

  <script type="module" src="../public/assets/js/app/main.js" defer></script>
</body>
</html>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/site/lifetime.html =====

<!DOCTYPE html><html lang="en"><head>
<meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Lifetime Steps</title>
<script src="https://cdn.tailwindcss.com"></script>
<link rel="stylesheet" href="../public/assets/css/app.css"/>
<link rel="icon" href="../favicon.ico"/>
</head><body class="min-h-screen">
<header class="px-4 py-4 border-b border-white/10">
  <div class="max-w-6xl mx-auto flex items-center justify-between">
    <h1 class="text-2xl font-bold">Lifetime Totals</h1>
    <a class="text-sm text-blue-300" href="./">← Back to Dashboard</a>
  </div>
</header>
<main class="max-w-6xl mx-auto px-4 py-6">
  <div id="status" class="text-white/70 mb-3">Loading…</div>
  <div class="card p-4">
    <div class="overflow-x-auto">
      <table class="w-full text-sm" id="lifeTable">
        <thead class="text-white/70">
          <tr><th class="text-left py-2">#</th><th class="text-left py-2">Name</th>
              <th class="text-left py-2">Tag</th><th class="text-left py-2">Sex</th>
              <th class="text-right py-2">Age</th><th class="text-right py-2">Weeks</th>
              <th class="text-right py-2">Total Steps</th></tr>
        </thead><tbody></tbody>
      </table>
    </div>
  </div>
</main>
<script>
(async () => {
  const base = location.pathname.replace(/site\\/lifetime\\.html$/, '');
  const res = await fetch(base + 'api/lifetime.php', { cache: 'no-store' });
  if (!res.ok) { document.getElementById('status').textContent = 'Failed to load'; return; }
  const json = await res.json();
  const rows = Array.isArray(json.lifetime) ? json.lifetime : [];
  document.getElementById('status').textContent = `${rows.length} users`;
  const tbody = document.querySelector('#lifeTable tbody');
  tbody.innerHTML = rows.map((r,i)=>`
    <tr class="border-t border-white/5">
      <td class="py-2 pr-2">${i+1}</td>
      <td class="py-2 pr-2">${(r.name||'').replace(/[&<>]/g,c=>({ '&':'&', '<':'<', '>':'>' }[c]))}</td>
      <td class="py-2 pr-2 text-white/60">${(r.tag||'').replace(/[&<>]/g,c=>({ '&':'&', '<':'<', '>':'>' }[c]))}</td>
      <td class="py-2 pr-2">${r.sex||''}</td>
      <td class="py-2 text-right">${r.age??''}</td>
      <td class="py-2 text-right">${r.weeks_with_data??0}</td>
      <td class="py-2 text-right">${(r.total_steps||0).toLocaleString()}</td>
    </tr>`).join('');
})();
</script>
</body></html>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/site/config.json =====

{
  "DAY_ORDER": ["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],
  "GOALS": {
    "DAILY_GOAL_10K": 10000,
    "DAILY_GOAL_15K": 15000,
    "DAILY_GOAL_2_5K": 2500,
    "DAILY_GOAL_1K": 1000
  },
  "THRESHOLDS": {
    "CHERYL_THRESHOLD": 20000,
    "THIRTY_K_THRESHOLD": 30000
  },
  "AWARD_LIMIT": 1,
  "DISPLAY_NAME_OVERRIDES": {
    "Tutu": "Tutu"
  },
  "NUDGES": [
    "Your shoes miss you.",
    "Take a lap and report back.",
    "Screenshot the counter tonight.",
    "Walk-n-talk with the fam, then log it.",
    "30 minutes. No debate."
  ],
  "LEVELS": {
    "K": 1500,
    "P": 1.6,
    "LABEL": "Level"
  },
  "CUSTOM_AWARD_LABELS": {
    "FIRST_30K": "Megan Award",
    "FIRST_20K": "Cheryl Award",
    "FIRST_15K": "Dean Award"
  },
  "LIFETIME_STEP_MILESTONES": [100000, 250000, 500000, 1000000],
  "LIFETIME_ATTENDANCE_MILESTONES": [25, 50, 100]
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/site/user.php =====

<?php
declare(strict_types=1);

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));

use App\Config\DB;

function e($s){ return htmlspecialchars((string)$s, ENT_QUOTES, 'UTF-8'); }

$pdo = DB::pdo();
ob_start(); require_once __DIR__ . '/../api/migrate.php'; ob_end_clean();

$id = isset($_GET['id']) ? (int)$_GET['id'] : 0;
if ($id <= 0) { http_response_code(400); echo 'Bad id'; exit; }

$u = $pdo->prepare('SELECT id,name,sex,age,tag,photo_path FROM users WHERE id = :id');
$u->execute([':id'=>$id]);
$user = $u->fetch(PDO::FETCH_ASSOC);
if (!$user) { http_response_code(404); echo 'User not found'; exit; }

// Lifetime totals
$name = (string)$user['name'];
$sum = $pdo->prepare("SELECT 
  COALESCE(SUM(COALESCE(monday,0)+COALESCE(tuesday,0)+COALESCE(wednesday,0)+COALESCE(thursday,0)+COALESCE(friday,0)+COALESCE(saturday,0)),0) AS total,
  SUM((CASE WHEN monday IS NOT NULL THEN 1 ELSE 0 END)
      +(CASE WHEN tuesday IS NOT NULL THEN 1 ELSE 0 END)
      +(CASE WHEN wednesday IS NOT NULL THEN 1 ELSE 0 END)
      +(CASE WHEN thursday IS NOT NULL THEN 1 ELSE 0 END)
      +(CASE WHEN friday IS NOT NULL THEN 1 ELSE 0 END)
      +(CASE WHEN saturday IS NOT NULL THEN 1 ELSE 0 END)) AS days,
  COALESCE(MAX(COALESCE(monday,0)),0) AS max_mon,
  COALESCE(MAX(COALESCE(tuesday,0)),0) AS max_tue,
  COALESCE(MAX(COALESCE(wednesday,0)),0) AS max_wed,
  COALESCE(MAX(COALESCE(thursday,0)),0) AS max_thu,
  COALESCE(MAX(COALESCE(friday,0)),0) AS max_fri,
  COALESCE(MAX(COALESCE(saturday,0)),0) AS max_sat
  FROM entries WHERE name = :n");
$sum->execute([':n'=>$name]);
$row = $sum->fetch(PDO::FETCH_ASSOC) ?: ['total'=>0,'days'=>0,'max_mon'=>0,'max_tue'=>0,'max_wed'=>0,'max_thu'=>0,'max_fri'=>0,'max_sat'=>0];
$total = (int)$row['total'];
$days  = (int)$row['days'];
$best  = max((int)$row['max_mon'],(int)$row['max_tue'],(int)$row['max_wed'],(int)$row['max_thu'],(int)$row['max_fri'],(int)$row['max_sat']);

// weeks participated (>0 total in week)
$stWeeks = $pdo->prepare("SELECT COUNT(1) FROM entries WHERE name = :n AND 
  (COALESCE(monday,0)+COALESCE(tuesday,0)+COALESCE(wednesday,0)+COALESCE(thursday,0)+COALESCE(friday,0)+COALESCE(saturday,0)) > 0");
$stWeeks->execute([':n'=>$name]);
$weeks = (int)$stWeeks->fetchColumn();
$avg = $days > 0 ? (int)round($total / $days) : 0;

// rank
$stTotals = $pdo->query("SELECT name,
    COALESCE((SELECT SUM(COALESCE(monday,0)+COALESCE(tuesday,0)+COALESCE(wednesday,0)+COALESCE(thursday,0)+COALESCE(friday,0)+COALESCE(saturday,0)) FROM entries e WHERE e.name = u.name),0) AS total
  FROM users u");
$higher = 0; foreach ($stTotals->fetchAll(PDO::FETCH_ASSOC) as $t) { if ((int)$t['total'] > $total) $higher++; }
$rank = $higher + 1;

 // Dynamic daily milestones driven by admin setting 'daily.milestones'
 // Read admin setting; fallback to site/config.json public defaults
 require_once __DIR__ . '/../api/lib/settings.php';
 $rawMilestones = setting_get('daily.milestones', null);
 if ($rawMilestones && is_string($rawMilestones) && trim($rawMilestones) !== '') {
   $parsedMilestones = json_decode($rawMilestones, true);
 } else {
   $cfgJson = @file_get_contents(__DIR__ . '/config.json');
   $cfg = $cfgJson ? json_decode($cfgJson, true) : [];
   $parsedMilestones = $cfg['daily_milestones'] ?? $cfg['dailyMilestones'] ?? $cfg['DAILY_MILESTONES'] ?? [];
 }
 $milestones = [];
 if (is_array($parsedMilestones)) {
   foreach ($parsedMilestones as $it) {
     if (!is_array($it)) continue;
     $steps = isset($it['steps']) ? (int)$it['steps'] : 0;
     $label = isset($it['label']) ? trim((string)$it['label']) : '';
     if ($steps > 0 && $label !== '') $milestones[] = ['steps'=>$steps, 'label'=>$label];
   }
 }
 // sort ascending by steps
 usort($milestones, function($a,$b){ return $a['steps'] <=> $b['steps']; });

 // Build single SQL that computes a column per milestone (single table scan)
 $milestonesCounts = [];
 if (!empty($milestones)) {
   $cols = [];
   $binds = [':n' => $name];
   foreach ($milestones as $i => $m) {
     $param = ':t' . $i;
     $cols[] = "SUM((CASE WHEN monday IS NOT NULL AND monday >= {$param} THEN 1 ELSE 0 END)"
            . " + (CASE WHEN tuesday IS NOT NULL AND tuesday >= {$param} THEN 1 ELSE 0 END)"
            . " + (CASE WHEN wednesday IS NOT NULL AND wednesday >= {$param} THEN 1 ELSE 0 END)"
            . " + (CASE WHEN thursday IS NOT NULL AND thursday >= {$param} THEN 1 ELSE 0 END)"
            . " + (CASE WHEN friday IS NOT NULL AND friday >= {$param} THEN 1 ELSE 0 END)"
            . " + (CASE WHEN saturday IS NOT NULL AND saturday >= {$param} THEN 1 ELSE 0 END)) AS c{$i}";
     $binds[$param] = $m['steps'];
   }
   $sql = "SELECT\n  " . implode(",\n  ", $cols) . "\nFROM entries WHERE name = :n";
   $stmt = $pdo->prepare($sql);
   $stmt->execute($binds);
   $row = $stmt->fetch(PDO::FETCH_NUM);
   if ($row !== false) {
     foreach ($row as $i => $val) {
       $milestonesCounts[$milestones[$i]['steps']] = (int)$val;
     }
   } else {
     foreach ($milestones as $m) $milestonesCounts[$m['steps']] = 0;
   }
 } 

// small helper to pick chip color classes that match the dashboard JS
function badge_class_for_steps(int $steps): array {
  if ($steps >= 30000) return ['bg'=>'bg-emerald-500/15','text'=>'text-emerald-300'];
  if ($steps >= 20000) return ['bg'=>'bg-yellow-500/15','text'=>'text-yellow-300'];
  if ($steps >= 15000) return ['bg'=>'bg-lime-500/15','text'=>'text-lime-300'];
  if ($steps >= 10000) return ['bg'=>'bg-green-500/15','text'=>'text-green-300'];
  if ($steps >= 2500)  return ['bg'=>'bg-cyan-500/15','text'=>'text-cyan-300'];
  if ($steps >= 1000)  return ['bg'=>'bg-blue-500/15','text'=>'text-blue-300'];
  return ['bg'=>'bg-white/5','text'=>'text-white/70'];
}

// awards
$aw = $pdo->prepare('SELECT kind, milestone_value, image_path, created_at FROM ai_awards WHERE user_id = :id ORDER BY created_at ASC');
$aw->execute([':id'=>$id]);
$awards = $aw->fetchAll(PDO::FETCH_ASSOC);

// photo path (resolve relative under site/assets)
$photo = (string)($user['photo_path'] ?? '');
if ($photo) {
  if (preg_match('~^https?://~i', $photo)) { $p = parse_url($photo, PHP_URL_PATH) ?: $photo; $photo = $p; }
  $photo = ltrim(preg_replace('#^site/#','', preg_replace('#^/+#','',$photo)), '/');
  $photo = 'assets/' . ltrim($photo, '/');
}
if ($photo === '') { $photo = 'assets/admin/no-photo.svg'; }

 // compute dynamic base paths so site works under any mount point (e.g. /dev/html/walk)
$script = $_SERVER['SCRIPT_NAME'] ?? '';
// expect script like /dev/html/walk/site/user.php — remove /site/... to get root
$siteDir = '/site';
$root = preg_replace('#' . preg_quote($siteDir) . '/.*$#', '', $script);
$root = rtrim($root, '/'); // e.g. /dev/html/walk or ''
$public = ($root !== '' ? $root : '') . '/public';
$site = ($root !== '' ? $root : '') . '/site';
function asset($p){ return htmlspecialchars((string)$p, ENT_QUOTES, 'UTF-8'); }
?>

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title><?= e($user['name']) ?> — Lifetime</title>
  <link rel="icon" href="../favicon.ico" />
  <link rel="stylesheet" href="<?= asset($public . '/assets/css/app.css') ?>" />
  <link rel="stylesheet" href="<?= asset($site . '/assets/css/user_awards.css') ?>" />
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="min-h-screen">
  <header class="px-4 py-4 sm:px-6 sm:py-5 sticky top-0 backdrop-blur supports-[backdrop-filter]:bg-[#0b1020]/80 z-30 border-b border-white/10">
    <div class="max-w-6xl mx-auto flex items-center justify-between gap-3">
      <div class="flex items-center gap-3">
        <img src="<?= e($photo) ?>" alt="photo" class="w-12 h-12 rounded-full object-cover border border-white/10">
        <div>
          <div class="kicker">User Profile</div>
          <h1 class="text-2xl sm:text-3xl font-extrabold leading-tight"><?= e($user['name']) ?> <?= $user['tag'] ? '<span class="text-white/60 text-base">('.e($user['tag']).')</span>' : '' ?></h1>
        </div>
      </div>
      <div class="hidden sm:flex items-center gap-2">
        <a href="./" class="btn">← Back</a>
      </div>
    </div>
  </header>

  <main class="max-w-6xl mx-auto px-4 sm:px-6 py-4 sm:py-6 space-y-4 sm:space-y-6">
    <section class="grid-auto-fit">
      <div class="card p-4">
        <div class="kicker">Lifetime</div>
        <h3 class="text-xl font-bold">Totals</h3>
        <div class="grid grid-cols-2 sm:grid-cols-5 gap-3 mt-2 text-center">
          <div class="bg-white/5 rounded-lg p-3">
            <div class="text-xs text-white/60">Total Steps</div>
            <div class="text-2xl font-extrabold stat"><?= number_format($total) ?></div>
          </div>
          <div class="bg-white/5 rounded-lg p-3">
            <div class="text-xs text-white/60">Avg / Day</div>
            <div class="text-2xl font-extrabold stat"><?= number_format($avg) ?></div>
          </div>
          <div class="bg-white/5 rounded-lg p-3">
            <div class="text-xs text-white/60">Best Day</div>
            <div class="text-2xl font-extrabold stat"><?= number_format($best) ?></div>
          </div>
          <div class="bg-white/5 rounded-lg p-3">
            <div class="text-xs text-white/60">Weeks</div>
            <div class="text-2xl font-extrabold stat"><?= number_format($weeks) ?></div>
          </div>
          <div class="bg-white/5 rounded-lg p-3">
            <div class="text-xs text-white/60">Days</div>
            <div class="text-2xl font-extrabold stat"><?= number_format($days) ?></div>
          </div>
        </div>
        <div class="mt-2 text-white/70 text-sm">Rank: #<?= (int)$rank ?></div>
      </div>

      <div class="card p-4">
        <div class="kicker">Milestones</div>
        <h3 class="text-xl font-bold">Daily Milestone Counts</h3>
        <div class="mt-3 flex flex-wrap gap-2 items-start">
          <?php if (empty($milestones)): ?>
            <div style="grid-column: 1 / -1; color: rgba(230,236,255,0.6);">No daily milestones configured.</div>
          <?php else: ?>
            <div class="flex-1 flex flex-wrap gap-2">
              <?php foreach ($milestones as $m):
                $steps = (int)$m['steps'];
                $label = htmlspecialchars($m['label'], ENT_QUOTES, 'UTF-8');
                $count = isset($milestonesCounts[$steps]) ? number_format((int)$milestonesCounts[$steps]) : '0';
                $cls = badge_class_for_steps($steps);
              ?>
                <div class="flex items-center gap-2">
                  <span class="chip <?= $cls['bg'] ?> <?= $cls['text'] ?>"><?= $label ?></span>
                  <div class="text-sm font-semibold"><?= $count ?></div>
                </div>
              <?php endforeach; ?>
            </div>

            <div class="w-full md:w-56 mt-6 md:mt-4 text-sm text-white/60">
              <div class="font-semibold text-white/80 mb-2">Legend</div>
              <?php foreach ($milestones as $m):
                $steps = (int)$m['steps'];
                $label = htmlspecialchars($m['label'], ENT_QUOTES, 'UTF-8');
                $cls = badge_class_for_steps($steps);
              ?>
                <div class="flex items-center gap-3 mb-2">
                  <span class="chip <?= $cls['bg'] ?> <?= $cls['text'] ?>"><?= $label ?></span>
                  <div class="text-white/60"><?= number_format($steps) ?> steps</div>
                </div>
              <?php endforeach; ?>
            </div>
          <?php endif; ?>
        </div>
      </div>

      <div class="card p-4">
        <div class="kicker">Awards</div>
        <h3 class="text-xl font-bold">Lifetime Awards</h3>
        <div id="awards-grid"></div>
      </div>
    </section>
  </main>

  <!-- Lightbox -->
  <div id="lightbox" class="lightbox" hidden>
    <div class="lightbox-backdrop"></div>
    <div class="lightbox-content">
      <button class="lightbox-close" aria-label="Close">×</button>
      <button class="lightbox-prev" aria-label="Previous award">‹</button>
      <img id="lb-img" class="lightbox-image" alt="" />
      <div class="lightbox-caption">
        <div class="lightbox-title"></div>
        <div class="lightbox-date"></div>
      </div>
      <button class="lightbox-next" aria-label="Next award">›</button>
    </div>
  </div>

  <script src="assets/js/user_awards.js"></script>
  <script>
    // Initialize awards system on page load
    initUserAwards(<?= (int)$id ?>);
  </script>
</body>
</html>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/ai_models_refresh.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/lib/admin_auth.php';
require_admin();

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));

require_once __DIR__ . '/../app/Security/Csrf.php';

function j200($a){ echo json_encode($a, JSON_UNESCAPED_SLASHES); exit; }

try {
  if (session_status() !== PHP_SESSION_ACTIVE) session_start();
  $csrf = $_SERVER['HTTP_X_CSRF'] ?? '';
  if (!\App\Security\Csrf::validate((string)$csrf)) { j200(['ok'=>false,'error'=>'invalid_csrf']); }

  // Fetch model list from OpenRouter
  $ch = curl_init('https://openrouter.ai/api/v1/models');
  curl_setopt_array($ch, [
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_TIMEOUT => 12,
    CURLOPT_HTTPHEADER => [ 'Accept: application/json' ],
  ]);
  $res = curl_exec($ch);
  $http = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $err = curl_error($ch);
  curl_close($ch);
  if ($res === false || $http >= 400) {
    j200(['ok'=>false,'error'=>'fetch_failed','http'=>$http]);
  }

  $json = json_decode($res, true);
  if (!is_array($json) || !isset($json['data']) || !is_array($json['data'])) {
    j200(['ok'=>false,'error'=>'bad_response']);
  }

  $out = [];
  foreach ($json['data'] as $m) {
    $arch = $m['architecture'] ?? [];
    $outs = $arch['output_modalities'] ?? [];
    if (!is_array($outs)) continue;
    $outs = array_map('strtolower', $outs);
    if (!in_array('image', $outs, true)) continue; // image-capable only
    $out[] = [ 'id' => (string)($m['id'] ?? ''), 'name' => (string)($m['name'] ?? ($m['id'] ?? '')) ];
  }

  // Sort by name to keep stable
  usort($out, function($a,$b){ return strcasecmp($a['name'], $b['name']); });

  // Save to data/models (writable on server) — admin fetches via api/ai_models_list.php
  $root = dirname(__DIR__);
  $dir = $root . '/data/models';
  if (!is_dir($dir)) { @mkdir($dir, 0775, true); }
  $path = $dir . '/ai_image_models.json';
  $payload = [ 'updated_at' => date('c'), 'models' => $out ];
  $ok = @file_put_contents($path, json_encode($payload, JSON_UNESCAPED_SLASHES|JSON_PRETTY_PRINT)) !== false;
  if (!$ok) { j200(['ok'=>false,'error'=>'write_failed']); }

  j200(['ok'=>true, 'count'=>count($out)]);
} catch (Throwable $e) {
  j200(['ok'=>false,'error'=>'server_error']);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/ai_models_list.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));

try {
  $path = dirname(__DIR__) . '/data/models/ai_image_models.json';
  if (!is_file($path)) {
    echo json_encode(['updated_at'=>null,'models'=>[]], JSON_UNESCAPED_SLASHES);
    exit;
  }
  $txt = file_get_contents($path);
  if ($txt === false) { echo json_encode(['updated_at'=>null,'models'=>[]]); exit; }
  $j = json_decode($txt, true);
  if (!is_array($j) || !isset($j['models'])) { echo json_encode(['updated_at'=>null,'models'=>[]]); exit; }
  echo json_encode($j, JSON_UNESCAPED_SLASHES);
} catch (Throwable $e) {
  echo json_encode(['updated_at'=>null,'models'=>[]], JSON_UNESCAPED_SLASHES);
}



# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/entries_add_active.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));

require_once __DIR__ . '/util.php';
require_once __DIR__ . '/lib/admin_auth.php';

require_once __DIR__ . '/../app/Security/Csrf.php';
require_admin();
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
$csrf = $_SERVER['HTTP_X_CSRF'] ?? ($_POST['csrf'] ?? '');
if (!\App\Security\Csrf::validate((string)$csrf)) { http_response_code(403); echo json_encode(['ok'=>false,'error'=>'invalid_csrf']); exit; }

function json_input(): array { $raw=file_get_contents('php://input')?:''; $j=json_decode($raw,true); return is_array($j)?$j:[]; }

try {
  $in = array_merge($_POST, json_input());
  $week = trim((string)($in['week'] ?? ''));
  if ($week === '') { echo json_encode(['ok'=>false,'error'=>'week_required']); exit; }
  $pdo = pdo();

  $added = 0; $skipped = 0;
  $pdo->beginTransaction();
  try {
    $q = $pdo->query("SELECT name,sex,age,tag FROM users WHERE is_active=1");
    $ins = $pdo->prepare("INSERT INTO entries(week,name,monday,tuesday,wednesday,thursday,friday,saturday,sex,age,tag)
                          VALUES(:w,:n,NULL,NULL,NULL,NULL,NULL,NULL,:sex,:age,:tag)
                          ON CONFLICT(week,name) DO NOTHING");
    foreach ($q as $u) {
      $ins->execute([':w'=>$week, ':n'=>$u['name'], ':sex'=>$u['sex']?:null, ':age'=>$u['age']?:null, ':tag'=>$u['tag']?:null]);
      $added += ($ins->rowCount() > 0) ? 1 : 0;
      $skipped += ($ins->rowCount() === 0) ? 1 : 0;
    }
    $pdo->commit();
  } catch (Throwable $e) { if ($pdo->inTransaction()) $pdo->rollBack(); throw $e; }

  echo json_encode(['ok'=>true, 'added'=>$added, 'skipped'=>$skipped]);
} catch (Throwable $e) {
  http_response_code(400);
  echo json_encode(['ok'=>false,'error'=>$e->getMessage()]);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/settings_get.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
App\Core\Env::bootstrap(dirname(__DIR__));
require_once __DIR__ . '/lib/admin_auth.php';
require_once __DIR__ . '/lib/settings.php';

require_admin();

try {
  $resp = [
    'ai.enabled' => setting_get('ai.enabled', '1') === '1',
    'ai.nudge.enabled' => setting_get('ai.nudge.enabled', '1') === '1',
    'ai.recap.enabled' => setting_get('ai.recap.enabled', '1') === '1',
    'ai.award.enabled' => setting_get('ai.award.enabled', '1') === '1',
    // Thresholds and labels for awards
    'thresholds.cheryl' => setting_get('thresholds.cheryl', '20000'),
    'thresholds.thirty_k' => setting_get('thresholds.thirty_k', '30000'),
    'awards.first_20k' => setting_get('awards.first_20k', 'Cheryl Award'),
    'awards.first_30k' => setting_get('awards.first_30k', 'Megan Award'),
    'awards.first_15k' => setting_get('awards.first_15k', 'Dean Award'),
    // Daily milestones (JSON string)
    'daily.milestones' => setting_get('daily.milestones', ''),
    // Milestone settings returned as comma-separated strings for the admin UI
    'milestones.lifetime_steps' => setting_get('milestones.lifetime_steps', '100000,250000,500000,750000,1000000'),
    'milestones.attendance_weeks' => setting_get('milestones.attendance_weeks', '25,50,100'),
  ];
  echo json_encode($resp);
} catch (Throwable $e) {
  http_response_code(500);
  echo json_encode(['error'=>'server_error']);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/admin_users_export.php =====

<?php
declare(strict_types=1);

try {
  require_once __DIR__ . '/../vendor/autoload.php';
  \App\Core\Env::bootstrap(dirname(__DIR__));
  require_once __DIR__ . '/lib/admin_auth.php';
  require_admin();

  if (session_status() !== PHP_SESSION_ACTIVE) session_start();

  // Admin auth already required by require_admin(); accept request without consuming the one-time CSRF token.
  // Read JSON body (optional)
  $raw = file_get_contents('php://input') ?: '';
  $data = json_decode($raw, true) ?: $_POST;

  $pdo = \App\Config\DB::pdo();

  $stmt = $pdo->query("SELECT id, name, sex, age, tag, photo_path, photo_consent, phone_e164, is_active, ai_opt_in, interests, rival_id, created_at, updated_at FROM users ORDER BY id");
  $users = $stmt->fetchAll(PDO::FETCH_ASSOC);

  header('Content-Type: application/json; charset=utf-8');
  echo json_encode(['ok'=>true, 'users'=>$users]);
}
catch (Throwable $e) {
  http_response_code(500);
  header('Content-Type: application/json; charset=utf-8');
  echo json_encode(['ok'=>false, 'error'=>$e->getMessage()]);
  exit;
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/send_sms.php =====

<?php
declare(strict_types=1);

// DEPRECATED: This endpoint will be removed; use router /api/... instead
header('X-Deprecated: This endpoint will be removed; use router /api/... instead');
require __DIR__.'/lib/env.php';
require __DIR__.'/util.php';
header('Content-Type: application/json; charset=utf-8');

$pdo = pdo();

// Internal auth
$secret = env('INTERNAL_API_SECRET','');
$hdr = $_SERVER['HTTP_X_INTERNAL_SECRET'] ?? '';
if ($secret === '' || !hash_equals($secret, $hdr)) { http_response_code(403); echo json_encode(['error'=>'forbidden']); exit; }

// Read params
$to = $_POST['to'] ?? $_POST['To'] ?? '';
$body = $_POST['body'] ?? $_POST['Body'] ?? '';

if ($to === '' || $body === '') { http_response_code(400); echo json_encode(['error'=>'missing to/body']); exit; }

// Env
$sid  = env('TWILIO_ACCOUNT_SID','');
$tok  = env('TWILIO_AUTH_TOKEN','');
$from = env('TWILIO_FROM_NUMBER','');
if ($sid==='' || $tok==='' || $from==='') { http_response_code(500); echo json_encode(['error'=>'twilio env missing']); exit; }

// Build request
$url = "https://api.twilio.com/2010-04-01/Accounts/{$sid}/Messages.json";
$post = http_build_query(['From'=>$from,'To'=>$to,'Body'=>$body]);

$ch = curl_init($url);
curl_setopt_array($ch, [
  CURLOPT_POST => true,
  CURLOPT_POSTFIELDS => $post,
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_USERPWD => $sid.':'.$tok,
  CURLOPT_TIMEOUT => 15,
]);
$resp = curl_exec($ch);
$code = (int)curl_getinfo($ch, CURLINFO_RESPONSE_CODE);
$err  = curl_error($ch);
curl_close($ch);

// Audit
$ins = $pdo->prepare("INSERT INTO sms_outbound_audit(created_at,to_number,body,http_code,sid,error) VALUES(datetime('now'),?,?,?,?,?)");
$sidResp = null;
if ($code===201 && $resp) {
  $j = json_decode($resp, true);
  $sidResp = $j['sid'] ?? null;
}
$auditParams = [ $to, $body, $code, $sidResp, $err ?: (($code===201)?null:($resp ?: null)) ];

// Use the same file-lock used elsewhere to serialize long-running audit writes
with_file_lock(__DIR__ . '/../data/sqlite.write.lock', function() use ($ins, $auditParams) {
  for ($i = 0; $i < 5; $i++) {
    try { $ins->execute($auditParams); break; }
    catch (PDOException $e) {
      $m = $e->getMessage();
      if (stripos($m, 'locked') !== false || stripos($m, 'SQLITE_BUSY') !== false) { usleep(200000); continue; }
      throw $e;
    }
  }
});

if ($code===201) { echo json_encode(['ok'=>true,'sid'=>$sidResp]); }
else { http_response_code(502); echo json_encode(['error'=>'twilio_failed','code'=>$code,'detail'=>$err ?: $resp]); }


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/user_data.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
App\Core\Env::bootstrap(dirname(__DIR__));
use App\Config\DB;

function jerr(int $code, string $msg) { http_response_code($code); echo json_encode(['ok'=>false,'error'=>$msg]); exit; }

try {
  $pdo = DB::pdo();
  ob_start(); require_once __DIR__ . '/migrate.php'; ob_end_clean();

  $id = isset($_GET['id']) ? (int)$_GET['id'] : 0;
  if ($id <= 0) jerr(400, 'bad_id');

  $st = $pdo->prepare('SELECT id,name,sex,age,tag,photo_path,is_active FROM users WHERE id = :id LIMIT 1');
  $st->execute([':id'=>$id]);
  $u = $st->fetch(PDO::FETCH_ASSOC);
  if (!$u) jerr(404, 'not_found');
  $name = (string)$u['name'];

  // lifetime totals across entries by name
  $sum = $pdo->prepare("SELECT 
    COALESCE(SUM(COALESCE(monday,0)+COALESCE(tuesday,0)+COALESCE(wednesday,0)+COALESCE(thursday,0)+COALESCE(friday,0)+COALESCE(saturday,0)),0) AS total,
    SUM((CASE WHEN monday IS NOT NULL THEN 1 ELSE 0 END)
        +(CASE WHEN tuesday IS NOT NULL THEN 1 ELSE 0 END)
        +(CASE WHEN wednesday IS NOT NULL THEN 1 ELSE 0 END)
        +(CASE WHEN thursday IS NOT NULL THEN 1 ELSE 0 END)
        +(CASE WHEN friday IS NOT NULL THEN 1 ELSE 0 END)
        +(CASE WHEN saturday IS NOT NULL THEN 1 ELSE 0 END)) AS days,
    COALESCE(MAX(COALESCE(monday,0)),0) AS max_mon,
    COALESCE(MAX(COALESCE(tuesday,0)),0) AS max_tue,
    COALESCE(MAX(COALESCE(wednesday,0)),0) AS max_wed,
    COALESCE(MAX(COALESCE(thursday,0)),0) AS max_thu,
    COALESCE(MAX(COALESCE(friday,0)),0) AS max_fri,
    COALESCE(MAX(COALESCE(saturday,0)),0) AS max_sat
    FROM entries WHERE name = :n");
  $sum->execute([':n'=>$name]);
  $row = $sum->fetch(PDO::FETCH_ASSOC) ?: ['total'=>0,'days'=>0,'max_mon'=>0,'max_tue'=>0,'max_wed'=>0,'max_thu'=>0,'max_fri'=>0,'max_sat'=>0];
  $total = (int)$row['total'];
  $days  = (int)$row['days'];
  $best  = max((int)$row['max_mon'],(int)$row['max_tue'],(int)$row['max_wed'],(int)$row['max_thu'],(int)$row['max_fri'],(int)$row['max_sat']);

  // weeks participated (>0 total in week)
  $weeks = (int)$pdo->prepare("SELECT COUNT(1) FROM entries WHERE name = :n AND 
    (COALESCE(monday,0)+COALESCE(tuesday,0)+COALESCE(wednesday,0)+COALESCE(thursday,0)+COALESCE(friday,0)+COALESCE(saturday,0)) > 0")
    ->execute([':n'=>$name]) || 0;
  // above won't fetch; do properly:
  $stWeeks = $pdo->prepare("SELECT COUNT(1) FROM entries WHERE name = :n AND 
    (COALESCE(monday,0)+COALESCE(tuesday,0)+COALESCE(wednesday,0)+COALESCE(thursday,0)+COALESCE(friday,0)+COALESCE(saturday,0)) > 0");
  $stWeeks->execute([':n'=>$name]);
  $weeks = (int)$stWeeks->fetchColumn();

  $avg = $days > 0 ? (int)round($total / $days) : 0;

  // compute rank: number of users with higher lifetime total + 1
  $stTotals = $pdo->query("SELECT name,
      COALESCE((SELECT SUM(COALESCE(monday,0)+COALESCE(tuesday,0)+COALESCE(wednesday,0)+COALESCE(thursday,0)+COALESCE(friday,0)+COALESCE(saturday,0)) FROM entries e WHERE e.name = u.name),0) AS total
    FROM users u");
  $rank = 1; $higher = 0;
  foreach ($stTotals->fetchAll(PDO::FETCH_ASSOC) as $t) { if ((int)$t['total'] > $total) $higher++; }
  $rank = $higher + 1;

  // awards
  $aw = $pdo->prepare('SELECT kind, milestone_value, image_path, created_at FROM ai_awards WHERE user_id = :id ORDER BY created_at ASC');
  $aw->execute([':id'=>$id]);
  $awards = array_map(function($r){
    return [
      'kind' => $r['kind'],
      'milestone_value' => (int)$r['milestone_value'],
      'image_path' => $r['image_path'],
      'created_at' => $r['created_at'],
    ];
  }, $aw->fetchAll(PDO::FETCH_ASSOC));

  echo json_encode(['ok'=>true,
    'user' => [
      'id'=>(int)$u['id'], 'name'=>$u['name'], 'sex'=>$u['sex'], 'age'=>$u['age'], 'tag'=>$u['tag'], 'photo_path'=>$u['photo_path'], 'is_active'=>$u['is_active']
    ],
    'lifetime' => [ 'total'=>$total, 'days'=>$days, 'avg'=>$avg, 'best'=>$best, 'weeks'=>$weeks, 'rank'=>$rank ],
    'awards' => $awards
  ], JSON_UNESCAPED_SLASHES);
} catch (Throwable $e) {
  http_response_code(500);
  echo json_encode(['ok'=>false,'error'=>'server_error']);
}



# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/sms.php =====

<?php
// DEPRECATED: This endpoint will be removed; use router /api/... instead
header('X-Deprecated: This endpoint will be removed; use router /api/... instead');
require __DIR__.'/util.php';
require __DIR__.'/lib/env.php';
require __DIR__.'/lib/phone.php';
require __DIR__.'/lib/dates.php';
require __DIR__.'/lib/entries.php';
require __DIR__.'/lib/twilio.php';
require __DIR__.'/lib/config.php';
require __DIR__.'/lib/ai_sms.php';
require __DIR__.'/lib/outbound.php';
require __DIR__.'/lib/settings.php';
// Content-Type set dynamically below (JSON for internal/testing, TwiML for Twilio)

$secret = env('INTERNAL_API_SECRET','');
$is_local = in_array($_SERVER['REMOTE_ADDR'] ?? '', ['127.0.0.1','::1']);
$has_secret = $secret !== '' && (isset($_SERVER['HTTP_X_INTERNAL_SECRET']) && hash_equals($secret, $_SERVER['HTTP_X_INTERNAL_SECRET']));
$is_internal = $is_local || $has_secret;

require_once __DIR__ . '/../vendor/autoload.php';
App\Core\Env::bootstrap(dirname(__DIR__));
use App\Config\DB;
use App\Support\Tx;
$pdo = DB::pdo();
$from = $_POST['From'] ?? '';
$body = trim($_POST['Body'] ?? '');
$e164 = to_e164($from);
$now  = now_in_tz();
$createdAt = $now->format(DateTime::ATOM);

$insAudit = $pdo->prepare("INSERT INTO sms_audit(created_at,from_number,raw_body,parsed_day,parsed_steps,resolved_week,resolved_day,status) VALUES(?,?,?,?,?,?,?,?)");

$audit_exec = function(array $params) use ($insAudit) {
  with_file_lock(__DIR__ . '/../data/sqlite.write.lock', function() use ($insAudit, $params) {
    for ($i = 0; $i < 5; $i++) {
      try { $insAudit->execute($params); return; }
      catch (PDOException $e) {
        $m = $e->getMessage();
        if (stripos($m, 'locked') !== false || stripos($m, 'SQLITE_BUSY') !== false) { usleep(200000); continue; }
        throw $e;
      }
    }
  });
};


$auth = env('TWILIO_AUTH_TOKEN','');
$is_twilio = isset($_SERVER['HTTP_X_TWILIO_SIGNATURE']);
if (!$is_internal && $auth !== '') {
  $url = (isset($_SERVER['HTTPS'])?'https':'http').'://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];
  $ok  = verify_twilio_signature($auth, $url, $_POST, $_SERVER['HTTP_X_TWILIO_SIGNATURE'] ?? null);
  if (!$ok) { $audit_exec([$createdAt,$e164,$body,null,null,null,null,'bad_signature']); http_response_code(403); echo json_encode(['error'=>'bad_signature']); exit; }
}

if (!$e164 || $body==='') {
  $audit_exec([$createdAt,$from,$body,null,null,null,null,'bad_request']);
  $errMsg = 'Sorry, we could not read your number or message. Please try again.';
  if (!$is_internal && $is_twilio) { header('Content-Type: text/xml; charset=utf-8'); http_response_code(200); echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Response><Message>".htmlspecialchars($errMsg, ENT_QUOTES, 'UTF-8')."</Message></Response>"; }
  else { header('Content-Type: application/json; charset=utf-8'); http_response_code(400); echo json_encode(['error'=>'bad_request','message'=>$errMsg]); }
  exit;
}

# rate limit 60s per number on last ok
$cut = (clone $now)->modify('-60 seconds')->format(DateTime::ATOM);
$stRL = $pdo->prepare("SELECT 1 FROM sms_audit WHERE from_number=? AND status='ok' AND created_at>=? LIMIT 1");
$stRL->execute([$e164, $cut]);
if ($stRL->fetchColumn()) {
  $audit_exec([$createdAt,$e164,$body,null,null,null,null,'rate_limited']);
  $errMsg = 'Got it! Please wait a minute before sending another update.';
  if (!$is_internal && $is_twilio) { header('Content-Type: text/xml; charset=utf-8'); http_response_code(200); echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Response><Message>".htmlspecialchars($errMsg, ENT_QUOTES, 'UTF-8')."</Message></Response>"; }
  else { header('Content-Type: application/json; charset=utf-8'); http_response_code(429); echo json_encode(['error'=>'rate_limited','message'=>$errMsg]); }
  exit;
}

# parse input with single numeric group rule
// Preserve original text for audits
$raw_body = $body;
// Normalize thousands separators that appear between digit groups (commas, dots, and various spaces).
// This converts "12,345", "12 345", "12.345" -> "12345" but does NOT remove commas that separate distinct numbers like "3, 4".
$body_norm = preg_replace('/(?<=\d)[\p{Zs}\x{00A0}\x{202F},\.](?=\d{3}\b)/u', '', $body);
$body_norm = trim($body_norm);

if (preg_match_all('/\d+/', $body_norm, $mm) && count($mm[0]) > 1) {
  $audit_exec([$createdAt,$e164,$raw_body,null,null,null,null,'too_many_numbers']);
  $errMsg = "Please send one number like 12345 or 'Tue 12345'.";
  if (!$is_internal && $is_twilio) { header('Content-Type: text/xml; charset=utf-8'); http_response_code(200); echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Response><Message>".htmlspecialchars($errMsg, ENT_QUOTES, 'UTF-8')."</Message></Response>"; }
  else { header('Content-Type: application/json; charset=utf-8'); http_response_code(400); echo json_encode(['error'=>'too_many_numbers','message'=>$errMsg]); }
  exit;
}

$dayOverride = null; $steps = null;
if (preg_match('/^\s*([A-Za-z]{3,9})\b\D*([0-9]{2,})\s*$/', $body_norm, $m)) { $dayOverride=$m[1]; $steps=intval($m[2]); }
elseif (preg_match('/^\s*([0-9]{2,})\s*$/', $body_norm, $m)) { $steps=intval($m[1]); }
else { $audit_exec([$createdAt,$e164,$raw_body,null,null,null,null,'no_steps']); $errMsg = "Please send one number like 12345 or 'Tue 12345'."; if (!$is_internal && $is_twilio) { header('Content-Type: text/xml; charset=utf-8'); http_response_code(200); echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Response><Message>".htmlspecialchars($errMsg, ENT_QUOTES, 'UTF-8')."</Message></Response>"; } else { header('Content-Type: application/json; charset=utf-8'); http_response_code(400); echo json_encode(['error'=>'no_steps','message'=>$errMsg]); } exit; }

if ($steps < 0 || $steps > 200000) { $audit_exec([$createdAt,$e164,$raw_body,$dayOverride,$steps,null,null,'invalid_steps']); $errMsg='That number looks off. Try a value between 0 and 200,000.'; if (!$is_internal && $is_twilio) { header('Content-Type: text/xml; charset=utf-8'); http_response_code(200); echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Response><Message>".htmlspecialchars($errMsg, ENT_QUOTES, 'UTF-8')."</Message></Response>"; } else { header('Content-Type: application/json; charset=utf-8'); http_response_code(400); echo json_encode(['error'=>'invalid_steps','message'=>$errMsg]); } exit; }

$stU = $pdo->prepare("SELECT name FROM users WHERE phone_e164=?");
$stU->execute([$e164]);
$u = $stU->fetch(PDO::FETCH_ASSOC);
if (!$u) { $audit_exec([$createdAt,$e164,$raw_body,$dayOverride,$steps,null,null,'unknown_number']); $errMsg='We do not recognize this number. Ask admin to enroll your phone.'; if (!$is_internal && $is_twilio) { header('Content-Type: text/xml; charset=utf-8'); http_response_code(200); echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Response><Message>".htmlspecialchars($errMsg, ENT_QUOTES, 'UTF-8')."</Message></Response>"; } else { header('Content-Type: application/json; charset=utf-8'); http_response_code(404); echo json_encode(['error'=>'unknown_number','message'=>$errMsg]); } exit; }
$name = $u['name'];

$dayCol = resolve_target_day($now, $dayOverride);
if (!$dayCol) { $audit_exec([$createdAt,$e164,$raw_body,$dayOverride,$steps,null,null,'bad_day']); $errMsg='Unrecognized day. Use Mon..Sat or leave it out.'; if (!$is_internal && $is_twilio) { header('Content-Type: text/xml; charset=utf-8'); http_response_code(200); echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Response><Message>".htmlspecialchars($errMsg, ENT_QUOTES, 'UTF-8')."</Message></Response>"; } else { header('Content-Type: application/json; charset=utf-8'); http_response_code(400); echo json_encode(['error'=>'bad_day','message'=>$errMsg]); } exit; }

$week = resolve_active_week($pdo);
if (!$week) { $audit_exec([$createdAt,$e164,$raw_body,$dayOverride,$steps,null,$dayCol,'no_active_week']); $errMsg='No active week to record to. Please try again later.'; if (!$is_internal && $is_twilio) { header('Content-Type: text/xml; charset=utf-8'); http_response_code(200); echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Response><Message>".htmlspecialchars($errMsg, ENT_QUOTES, 'UTF-8')."</Message></Response>"; } else { header('Content-Type: application/json; charset=utf-8'); http_response_code(404); echo json_encode(['error'=>'no_active_week','message'=>$errMsg]); } exit; }

Tx::with(function(\PDO $pdo) use ($week, $name, $dayCol, $steps) {
  upsert_steps($pdo, $week, $name, $dayCol, $steps);
});
$audit_exec([$createdAt,$e164,$raw_body,$dayOverride,$steps,$week,$dayCol,'ok']);

$aiOn = setting_get('ai.enabled', '1');
if ($aiOn === '1') {
  // Rate limit per user: 1 gen / 2 minutes
  try {
    $stUId = $pdo->prepare('SELECT id, phone_e164 FROM users WHERE name = :n');
    $stUId->execute([':n'=>$name]);
    $usr = $stUId->fetch(PDO::FETCH_ASSOC);
    $userId = (int)($usr['id'] ?? 0);
    $toPhone = (string)($usr['phone_e164'] ?? '');

    $pdo->exec("CREATE TABLE IF NOT EXISTS user_stats(user_id INTEGER PRIMARY KEY, last_ai_at TEXT)");
    $last = $pdo->prepare('SELECT last_ai_at FROM user_stats WHERE user_id = ?');
    $last->execute([$userId]);
    $lastAt = (string)($last->fetchColumn() ?: '');
    $can = true;
    if ($lastAt !== '') {
      $diff = time() - strtotime($lastAt);
      if ($diff < 120) $can = false;
    }
    if ($can) {
      $gen = generate_ai_sms_reply($name, $raw_body, ['week_label' => $label]);
      $content = (string)$gen['content'];
      $model   = (string)$gen['model'];
      $rawJson = json_encode($gen['raw'], JSON_UNESCAPED_SLASHES);
      $cost    = $gen['cost_usd'];
      $ins = $pdo->prepare("INSERT INTO ai_messages(type,scope_key,user_id,week,content,model,prompt_hash,approved_by,created_at,sent_at,provider,raw_json,cost_usd)
                            VALUES('sms',NULL,:uid,:wk,:body,:model,NULL,NULL,datetime('now'),NULL,:prov,:raw,:cost)");
      $ins->execute([':uid'=>$userId, ':wk'=>$week, ':body'=>$content, ':model'=>$model, ':prov'=>'openrouter', ':raw'=>$rawJson, ':cost'=>$cost]);
      $pdo->prepare('INSERT INTO user_stats(user_id,last_ai_at) VALUES(:u, datetime(\'now\')) ON CONFLICT(user_id) DO UPDATE SET last_ai_at = excluded.last_ai_at')->execute([':u'=>$userId]);

      $auto = get_setting('ai_autosend');
      if ($auto === '1' && $toPhone !== '') {
        // Auto-approve and send immediately
        $lastId = (int)$pdo->query('SELECT last_insert_rowid()')->fetchColumn();
        $pdo->prepare('UPDATE ai_messages SET approved_by = :u WHERE id = :id')->execute([':u'=>'auto', ':id'=>$lastId]);
        try { send_outbound_sms($toPhone, $content); $pdo->prepare('UPDATE ai_messages SET sent_at = datetime(\'now\') WHERE id = :id')->execute([':id'=>$lastId]); } catch (Throwable $e) { /* leave unsent */ }
      }
    }
  } catch (Throwable $e) {
    // Swallow AI errors; core SMS path must succeed
    error_log('sms.php AI error: ' . $e->getMessage());
  }
}

$noonRule = !$dayOverride ? (intval($now->format('H'))<12 ? 'yesterday' : 'today') : strtolower($dayCol);
$msg = "Recorded ".number_format($steps)." for $name on $noonRule.";

  // If this is a real Twilio webhook (signature header present) and not an internal call,
  // respond with TwiML so Twilio replies via SMS to the sender.
  if (!$is_internal && $is_twilio) {
    header('Content-Type: text/xml; charset=utf-8');
    echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Response><Message>" . htmlspecialchars($msg, ENT_QUOTES, 'UTF-8') . "</Message></Response>";
  } else {
    header('Content-Type: application/json; charset=utf-8');
    echo json_encode(['ok'=>true,'message'=>$msg,'name'=>$name,'steps'=>$steps,'day'=>$noonRule]);
  }


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/family_weekday_avg.php =====

<?php
// DEPRECATED: This endpoint will be removed; use router /api/... instead
header('X-Deprecated: This endpoint will be removed; use router /api/... instead');
require_once __DIR__ . '/util.php';  // provides pdo()

header('Content-Type: application/json');

try {
  $db = pdo();

  // 1) For each week, sum family totals per day
  // 2) Average those weekly sums across weeks
  $sql = "
    WITH week_sums AS (
      SELECT
        week,
        SUM(COALESCE(monday,0))    AS mon,
        SUM(COALESCE(tuesday,0))   AS tue,
        SUM(COALESCE(wednesday,0)) AS wed,
        SUM(COALESCE(thursday,0))  AS thu,
        SUM(COALESCE(friday,0))    AS fri,
        SUM(COALESCE(saturday,0))  AS sat
      FROM entries
      GROUP BY week
    )
    SELECT
      ROUND(AVG(mon)) AS mon_avg,
      ROUND(AVG(tue)) AS tue_avg,
      ROUND(AVG(wed)) AS wed_avg,
      ROUND(AVG(thu)) AS thu_avg,
      ROUND(AVG(fri)) AS fri_avg,
      ROUND(AVG(sat)) AS sat_avg
    FROM week_sums
  ";

  $avg = $db->query($sql)->fetch(PDO::FETCH_ASSOC);

  echo json_encode([
    "labels" => ["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],
    "averages" => [
      intval($avg['mon_avg'] ?? 0),
      intval($avg['tue_avg'] ?? 0),
      intval($avg['wed_avg'] ?? 0),
      intval($avg['thu_avg'] ?? 0),
      intval($avg['fri_avg'] ?? 0),
      intval($avg['sat_avg'] ?? 0),
    ]
  ], JSON_UNESCAPED_SLASHES);
} catch (Throwable $e) {
  http_response_code(500);
  echo json_encode(["error" => "weekday_avg_failed", "message" => $e->getMessage()]);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/_sig_diag.php =====

<?php
declare(strict_types=1);

// DEPRECATED: This endpoint will be removed; use router /api/... instead
header('X-Deprecated: This endpoint will be removed; use router /api/... instead');

/**
/**
 * Diagnostic endpoint for Twilio signature verification.
 * Only active when TWILIO_SIG_DEBUG=== '1'.
 * Requires either ?once=<ts> OR header X-Diag-Token matching env TWILIO_DIAG_TOKEN.
 *
 * Outputs JSON:
 * {
 *  "url_seen": "...",
 *  "post_sorted": [ "From:+1801...", "MessageSid:...", ... ],
 *  "joined": "...",
 *  "expected_sig": "...",
 *  "header_sig": "...",
 *  "match": true|false
 * }
 */

if (getenv('TWILIO_SIG_DEBUG') !== '1') {
  header('Content-Type: application/json; charset=utf-8');
  http_response_code(404);
  echo json_encode(['error' => 'not_found']);
  exit;
}

$once = $_GET['once'] ?? null;
$diagHeader = $_SERVER['HTTP_X_DIAG_TOKEN'] ?? '';
$diagToken = getenv('TWILIO_DIAG_TOKEN') ?: '';

if (!$once && ($diagToken === '' || $diagHeader !== $diagToken)) {
  header('Content-Type: application/json; charset=utf-8');
  http_response_code(403);
  echo json_encode(['error' => 'forbidden']);
  exit;
}

require_once __DIR__ . '/common_sig.php';

$headerSig = $_SERVER['HTTP_X_TWILIO_SIGNATURE'] ?? '';

$info = twilio_verify($_POST, $headerSig, getenv('TWILIO_AUTH_TOKEN') ?: '');

// build post_sorted array "Key:Value"
$post_sorted = [];
$keys = array_keys($_POST);
sort($keys, SORT_STRING);
foreach ($keys as $k) {
  $post_sorted[] = $k . ':' . ($_POST[$k] ?? '');
}

$out = [
  'url_seen' => $info['url'],
  'post_sorted' => $post_sorted,
  'joined' => $info['joined'],
  'expected' => $info['expected'],
  'header_sig' => $info['header'] ?? '',
  'match' => (bool)$info['match'],
];

header('Content-Type: application/json; charset=utf-8');
echo json_encode($out, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/migrate.php =====

<?php
declare(strict_types=1);

// DEPRECATED: This endpoint will be removed; use router /api/... instead
header('X-Deprecated: This endpoint will be removed; use router /api/... instead');
require_once __DIR__ . '/../vendor/autoload.php';
App\Core\Env::bootstrap(dirname(__DIR__));
use App\Config\DB;
$pdo = DB::pdo();

/* tables:
   - weeks(week PK, label, finalized, created_at, finalized_at)
   - entries(id PK, week, name, monday..saturday, sex, age, tag, updated_at)
   - snapshots(week PK FK->weeks.week, json, created_at)
*/

$pdo->exec("
CREATE TABLE IF NOT EXISTS weeks (
  week TEXT PRIMARY KEY,
  label TEXT,
  finalized INTEGER DEFAULT 0,
  created_at TEXT DEFAULT (datetime('now')),
  finalized_at TEXT
);
");

$pdo->exec("
CREATE TABLE IF NOT EXISTS entries (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  week TEXT NOT NULL,
  name TEXT NOT NULL,
  monday INTEGER CHECK(monday IS NULL OR monday >= 0),
  tuesday INTEGER CHECK(tuesday IS NULL OR tuesday >= 0),
  wednesday INTEGER CHECK(wednesday IS NULL OR wednesday >= 0),
  thursday INTEGER CHECK(thursday IS NULL OR thursday >= 0),
  friday INTEGER CHECK(friday IS NULL OR friday >= 0),
  saturday INTEGER CHECK(saturday IS NULL OR saturday >= 0),
  sex TEXT,
  age INTEGER,
  tag TEXT,
  updated_at TEXT DEFAULT (datetime('now')),
  CONSTRAINT fk_entries_week FOREIGN KEY (week) REFERENCES weeks(week) ON DELETE CASCADE
);
");

// Add per-day first-report timestamp columns (nullable integers) if missing.
// These store the unix epoch seconds (UTC) for the first time a day's value
// was set to a positive integer for a given week/name.
$cols = $pdo->query("PRAGMA table_info(entries)")->fetchAll(PDO::FETCH_ASSOC);
$colNames = array_map(function($c){ return $c['name'] ?? ''; }, $cols);
$reportCols = [
  'mon_reported_at','tue_reported_at','wed_reported_at',
  'thu_reported_at','fri_reported_at','sat_reported_at'
];
foreach ($reportCols as $c) {
  if (!in_array($c, $colNames, true)) {
    // ALTER TABLE ADD COLUMN is safe and idempotent when guarded above.
    $pdo->exec("ALTER TABLE entries ADD COLUMN $c INTEGER");
  }
}

// Create triggers to set the reported_at timestamp only the first time a day
// transitions from NULL/0 to a positive integer. We create an AFTER INSERT
// trigger (for new rows) and an AFTER UPDATE OF <day> trigger (for updates).
$days = [
  ['day'=>'monday','rep'=>'mon_reported_at'],
  ['day'=>'tuesday','rep'=>'tue_reported_at'],
  ['day'=>'wednesday','rep'=>'wed_reported_at'],
  ['day'=>'thursday','rep'=>'thu_reported_at'],
  ['day'=>'friday','rep'=>'fri_reported_at'],
  ['day'=>'saturday','rep'=>'sat_reported_at']
];

$stmtExists = $pdo->prepare("SELECT 1 FROM sqlite_master WHERE type='trigger' AND name = ? LIMIT 1");
foreach ($days as $d) {
  $day = $d['day']; $rep = $d['rep'];
  // UPDATE trigger
  $trgUpd = "trg_entries_set_{$day}_reported_at_update";
  $stmtExists->execute([$trgUpd]);
  if (!$stmtExists->fetchColumn()) {
    $sql = "
    CREATE TRIGGER $trgUpd
    AFTER UPDATE OF $day ON entries
    WHEN NEW.$day IS NOT NULL AND (OLD.$day IS NULL OR OLD.$day = 0) AND NEW.$day != OLD.$day AND NEW.$rep IS NULL
    BEGIN
      UPDATE entries SET $rep = CAST(strftime('%s','now') AS INTEGER)
      WHERE week = NEW.week AND name = NEW.name;
    END;
    ";
    $pdo->exec($sql);
  }

  // INSERT trigger
  $trgIns = "trg_entries_set_{$day}_reported_at_insert";
  $stmtExists->execute([$trgIns]);
  if (!$stmtExists->fetchColumn()) {
    $sql2 = "
    CREATE TRIGGER $trgIns
    AFTER INSERT ON entries
    WHEN NEW.$day IS NOT NULL AND NEW.$day > 0 AND NEW.$rep IS NULL
    BEGIN
      UPDATE entries SET $rep = CAST(strftime('%s','now') AS INTEGER)
      WHERE week = NEW.week AND name = NEW.name;
    END;
    ";
    $pdo->exec($sql2);
  }
}

/* Do a quick integrity check; log problems but do not echo to output.
   We avoid ALTER TABLE for existing installs to keep migration safe on Pi.
   New installs will get the CHECK constraints above. */
try {
  $res = $pdo->query("PRAGMA integrity_check")->fetchColumn();
  if ($res !== 'ok') {
    error_log("migrate.php: PRAGMA integrity_check returned: " . $res);
  }
} catch (Throwable $e) {
  error_log("migrate.php: integrity_check failed: " . $e->getMessage());
}

$pdo->exec("CREATE INDEX IF NOT EXISTS idx_entries_week_name ON entries(week, name);");
$pdo->exec("CREATE UNIQUE INDEX IF NOT EXISTS entries_week_name_uq ON entries(week, name);");

$pdo->exec("
CREATE TABLE IF NOT EXISTS snapshots (
  week TEXT PRIMARY KEY,
  json TEXT NOT NULL,
  created_at TEXT DEFAULT (datetime('now')),
  CONSTRAINT fk_snapshots_week FOREIGN KEY (week) REFERENCES weeks(week) ON DELETE CASCADE
);
");

$pdo->exec("
CREATE TABLE IF NOT EXISTS users (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  sex TEXT,
  age INTEGER,
  tag TEXT
);
");

$pdo->exec("CREATE UNIQUE INDEX IF NOT EXISTS users_name_uq ON users(name)");
$cols = $pdo->query("PRAGMA table_info(users)")->fetchAll(PDO::FETCH_ASSOC);

// phone_e164 (idempotent)
$hasPhone = false;
foreach ($cols as $c) { if (isset($c['name']) && $c['name'] === 'phone_e164') { $hasPhone = true; break; } }
if (!$hasPhone) { $pdo->exec("ALTER TABLE users ADD COLUMN phone_e164 TEXT"); }

// photo_path and photo_consent (idempotent)
$hasPhotoPath = false;
$hasPhotoConsent = false;
foreach ($cols as $c) {
  if (isset($c['name'])) {
    if ($c['name'] === 'photo_path') $hasPhotoPath = true;
    if ($c['name'] === 'photo_consent') $hasPhotoConsent = true;
  }
}
if (!$hasPhotoPath) { $pdo->exec("ALTER TABLE users ADD COLUMN photo_path TEXT"); }
if (!$hasPhotoConsent) { $pdo->exec("ALTER TABLE users ADD COLUMN photo_consent INTEGER DEFAULT 0"); }

$pdo->exec("CREATE UNIQUE INDEX IF NOT EXISTS users_phone_e164_uq ON users(phone_e164)");

// AI scaffolding: idempotent tables, columns, and indexes for offline AI features.
// - app_settings
// - additional users columns: ai_opt_in, interests, rival_id
// - user_ai_profile
// - ai_messages (+ indexes)
// - ai_awards (+ index)
$pdo->exec("
CREATE TABLE IF NOT EXISTS app_settings (
  key TEXT PRIMARY KEY,
  value TEXT
);
");

// Add new user columns if missing (idempotent)
$cols = $pdo->query("PRAGMA table_info(users)")->fetchAll(PDO::FETCH_ASSOC);
$colNames = array_map(function($c){ return $c['name'] ?? ''; }, $cols);

if (!in_array('ai_opt_in', $colNames, true)) {
  $pdo->exec("ALTER TABLE users ADD COLUMN ai_opt_in INTEGER DEFAULT 0");
}
if (!in_array('interests', $colNames, true)) {
  $pdo->exec("ALTER TABLE users ADD COLUMN interests TEXT");
}
if (!in_array('rival_id', $colNames, true)) {
  $pdo->exec("ALTER TABLE users ADD COLUMN rival_id INTEGER");
}

// Per-user AI profile table
$pdo->exec("
CREATE TABLE IF NOT EXISTS user_ai_profile (
  user_id INTEGER PRIMARY KEY,
  tone TEXT,
  fun_facts TEXT,
  do_not_use TEXT,
  last_reviewed_at TEXT,
  CONSTRAINT fk_user_ai_profile_user FOREIGN KEY (user_id) REFERENCES users(id)
);
");

// AI-generated messages tracking
$pdo->exec("
CREATE TABLE IF NOT EXISTS ai_messages (
  id INTEGER PRIMARY KEY,
  type TEXT NOT NULL,
  scope_key TEXT,
  user_id INTEGER,
  week TEXT,
  content TEXT NOT NULL,
  model TEXT NOT NULL,
  prompt_hash TEXT,
  approved_by TEXT,
  created_at TEXT DEFAULT (datetime('now')),
  sent_at TEXT,
  CONSTRAINT fk_ai_messages_user FOREIGN KEY (user_id) REFERENCES users(id)
);
");
$pdo->exec("CREATE INDEX IF NOT EXISTS idx_ai_messages_week ON ai_messages(week);");
$pdo->exec("CREATE INDEX IF NOT EXISTS idx_ai_messages_user ON ai_messages(user_id);");
$pdo->exec("CREATE INDEX IF NOT EXISTS idx_ai_messages_sendable ON ai_messages(approved_by, sent_at);");

// Extend ai_messages with provider/model/raw_json/cost_usd if missing (idempotent)
try {
  $cols = $pdo->query("PRAGMA table_info(ai_messages)")->fetchAll(PDO::FETCH_ASSOC);
  $colNames = array_map(function($c){ return $c['name'] ?? ''; }, $cols);
  if (!in_array('provider', $colNames, true)) { $pdo->exec("ALTER TABLE ai_messages ADD COLUMN provider TEXT"); }
  if (!in_array('raw_json', $colNames, true)) { $pdo->exec("ALTER TABLE ai_messages ADD COLUMN raw_json TEXT"); }
  if (!in_array('cost_usd', $colNames, true)) { $pdo->exec("ALTER TABLE ai_messages ADD COLUMN cost_usd REAL"); }
} catch (Throwable $e) {
  error_log('migrate.php: ai_messages alter failed: ' . $e->getMessage());
}

// Seed ai_autosend setting if missing
try { $pdo->exec("INSERT OR IGNORE INTO settings(key,value) VALUES('ai_autosend','0')"); } catch (Throwable $e) {}

// AI awards / milestones
$pdo->exec("
CREATE TABLE IF NOT EXISTS ai_awards (
  id INTEGER PRIMARY KEY,
  user_id INTEGER NOT NULL,
  kind TEXT NOT NULL,
  milestone_value INTEGER NOT NULL,
  week TEXT,
  image_path TEXT,
  meta TEXT,
  created_at TEXT DEFAULT (datetime('now')),
  CONSTRAINT fk_ai_awards_user FOREIGN KEY (user_id) REFERENCES users(id)
);
");
$pdo->exec("CREATE INDEX IF NOT EXISTS idx_ai_awards_user ON ai_awards(user_id);");

// User awards cache table for computed award dates (idempotent)
$pdo->exec("
CREATE TABLE IF NOT EXISTS user_awards_cache (
  user_id INTEGER NOT NULL,
  award_key TEXT NOT NULL,
  threshold INTEGER NOT NULL,
  awarded_at TEXT NOT NULL,
  PRIMARY KEY (user_id, award_key),
  FOREIGN KEY (user_id) REFERENCES users(id)
);
");
$pdo->exec("CREATE INDEX IF NOT EXISTS idx_awardscache_user ON user_awards_cache(user_id);");

// Global settings table (idempotent). Simple key/value store.
// Prompt 1 — Add AI toggle field support via `settings` table
try {
  $pdo->exec("CREATE TABLE IF NOT EXISTS settings (key TEXT PRIMARY KEY, value TEXT)");
  // Add updated_at column if missing
  try {
    $cols = $pdo->query("PRAGMA table_info(settings)")->fetchAll(PDO::FETCH_ASSOC);
    $names = array_map(fn($c)=>$c['name']??'', $cols);
    if (!in_array('updated_at', $names, true)) { $pdo->exec("ALTER TABLE settings ADD COLUMN updated_at TEXT"); }
  } catch (Throwable $e) {}
  // Seed canonical keys if missing
  $pdo->exec("INSERT OR IGNORE INTO settings(key, value, updated_at) VALUES('ai.enabled','1',datetime('now'))");
  $pdo->exec("INSERT OR IGNORE INTO settings(key, value, updated_at) VALUES('ai.nudge.enabled','1',datetime('now'))");
  $pdo->exec("INSERT OR IGNORE INTO settings(key, value, updated_at) VALUES('ai.recap.enabled','1',datetime('now'))");
  $pdo->exec("INSERT OR IGNORE INTO settings(key, value, updated_at) VALUES('ai.award.enabled','1',datetime('now'))");
} catch (Throwable $e) {
  error_log('migrate.php: settings table setup failed: ' . $e->getMessage());
}

// Backfill AI awards (idempotent).
// - lifetime_steps milestones: 100000, 250000, 500000, 1000000
// - attendance_weeks milestones: 25, 50, 100
// This runs safely on existing installs and will only insert missing awards.
try {
  $stmtUsers = $pdo->query("
    SELECT u.id, u.name,
      COALESCE((
        SELECT SUM(COALESCE(monday,0)+COALESCE(tuesday,0)+COALESCE(wednesday,0)+COALESCE(thursday,0)+COALESCE(friday,0)+COALESCE(saturday,0))
        FROM entries e WHERE e.name = u.name
      ),0) AS total_steps,
      COALESCE((
        SELECT COUNT(1)
        FROM entries e WHERE e.name = u.name AND (
          COALESCE(monday,0)+COALESCE(tuesday,0)+COALESCE(wednesday,0)+COALESCE(thursday,0)+COALESCE(friday,0)+COALESCE(saturday,0)
        ) > 0
      ),0) AS weeks_with_data
    FROM users u
  ")->fetchAll(PDO::FETCH_ASSOC);

  $checkStmt = $pdo->prepare("SELECT 1 FROM ai_awards WHERE user_id = :uid AND kind = :kind AND milestone_value = :val LIMIT 1");
  $insStmt = $pdo->prepare("INSERT INTO ai_awards (user_id, kind, milestone_value, week, image_path, meta) VALUES (:uid, :kind, :val, NULL, :img, NULL)");

  $lifetimeThresholds = [100000, 250000, 500000, 1000000];
  $attendanceThresholds = [25, 50, 100];

  foreach ($stmtUsers as $u) {
    $uid = (int)($u['id'] ?? 0);
    if ($uid === 0) continue;
    $total = (int)($u['total_steps'] ?? 0);
    $weeks = (int)($u['weeks_with_data'] ?? 0);

    foreach ($lifetimeThresholds as $t) {
      if ($total >= $t) {
        $checkStmt->execute([':uid'=>$uid, ':kind'=>'lifetime_steps', ':val'=>$t]);
        if (!$checkStmt->fetchColumn()) {
          $insStmt->execute([':uid'=>$uid, ':kind'=>'lifetime_steps', ':val'=>$t, ':img'=>null]);
        }
      }
    }

    foreach ($attendanceThresholds as $t) {
      if ($weeks >= $t) {
        $checkStmt->execute([':uid'=>$uid, ':kind'=>'attendance_weeks', ':val'=>$t]);
        if (!$checkStmt->fetchColumn()) {
          $insStmt->execute([':uid'=>$uid, ':kind'=>'attendance_weeks', ':val'=>$t, ':img'=>null]);
        }
      }
    }
  }
} catch (Throwable $e) {
  error_log("migrate.php: ai_awards backfill failed: " . $e->getMessage());
}

$pdo->exec("
CREATE TABLE IF NOT EXISTS sms_audit(
  id INTEGER PRIMARY KEY,
  created_at TEXT NOT NULL,
  from_number TEXT NOT NULL,
  raw_body TEXT NOT NULL,
  parsed_day TEXT,
  parsed_steps INTEGER,
  resolved_week TEXT,
  resolved_day TEXT,
  status TEXT
);
");
$pdo->exec("CREATE TABLE IF NOT EXISTS sms_outbound_audit(
  id INTEGER PRIMARY KEY,
  created_at TEXT,
  to_number TEXT,
  body TEXT,
  http_code INTEGER,
  sid TEXT,
  error TEXT
)");

/* Backfill users from distinct entry names, if not already present */
$pdo->exec("
INSERT INTO users(name, sex, age, tag)
SELECT e.name,
       (SELECT sex FROM entries e2 WHERE e2.name=e.name AND e2.sex IS NOT NULL ORDER BY updated_at DESC LIMIT 1),
       (SELECT age FROM entries e2 WHERE e2.name=e.name AND e2.age IS NOT NULL ORDER BY updated_at DESC LIMIT 1),
       (SELECT tag FROM entries e2 WHERE e2.name=e.name AND e2.tag IS NOT NULL ORDER BY updated_at DESC LIMIT 1)
FROM (SELECT DISTINCT name FROM entries WHERE name IS NOT NULL AND name != '') e
WHERE NOT EXISTS (SELECT 1 FROM users u WHERE u.name = e.name);
");

$pdo->exec("
CREATE VIEW IF NOT EXISTS lifetime_stats AS
SELECT
  u.name AS name,
  COALESCE(u.sex, '') AS sex,
  u.age AS age,
  COALESCE(u.tag, '') AS tag,
  COALESCE((
    SELECT SUM(COALESCE(monday,0)+COALESCE(tuesday,0)+COALESCE(wednesday,0)+COALESCE(thursday,0)+COALESCE(friday,0)+COALESCE(saturday,0))
    FROM entries e WHERE e.name = u.name
  ),0) AS total_steps,
  COALESCE((
    SELECT COUNT(1)
    FROM entries e WHERE e.name = u.name AND (
      COALESCE(monday,0)+COALESCE(tuesday,0)+COALESCE(wednesday,0)+COALESCE(thursday,0)+COALESCE(friday,0)+COALESCE(saturday,0)
    ) > 0
  ),0) AS weeks_with_data
FROM users u
WHERE u.is_active = 1
ORDER BY total_steps DESC, name ASC;
");


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/ai_log.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));
require_once __DIR__ . '/lib/admin_auth.php';

// Protect: admin only
require_admin();

// Prefer the real LLM generation log; fall back to stub log if missing.
$prefer = __DIR__ . '/../data/logs/ai/ai_generation.log';
$fallback = __DIR__ . '/../data/logs/ai_stub.log';
$path = file_exists($prefer) ? $prefer : $fallback;

if (!file_exists($path)) { echo json_encode(['ok'=>true,'entries'=>[],'source'=>null]); exit; }

// Read last N lines (default 50)
$n = 50;
$lines = @file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
if ($lines === false) { echo json_encode(['ok'=>false,'error'=>'read_failed']); exit; }
$slice = array_slice($lines, -$n);
$slice = array_reverse($slice);

echo json_encode(['ok'=>true,'entries'=>$slice,'source'=> (strpos($path, 'ai_generation.log') !== false ? 'llm' : 'stub')]);


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/get_setting.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));

require_once __DIR__ . '/util.php';
require_once __DIR__ . '/lib/config.php';
require_once __DIR__ . '/lib/admin_auth.php';

// Protect this endpoint; admin page fetches it with Basic Auth
require_admin();

$key = isset($_GET['key']) ? (string)$_GET['key'] : '';
if ($key === '') { echo json_encode(['ok'=>false,'error'=>'missing_key']); exit; }

$val = get_setting($key);
echo json_encode(['ok'=>true, 'key'=>$key, 'value'=>$val]);



# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/entries_save.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));

require_once __DIR__ . '/util.php';
require_once __DIR__ . '/lib/admin_auth.php';

require_once __DIR__ . '/../app/Security/Csrf.php';
require_admin();
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
$csrf = $_SERVER['HTTP_X_CSRF'] ?? ($_POST['csrf'] ?? '');
if (!\App\Security\Csrf::validate((string)$csrf)) { http_response_code(403); echo json_encode(['ok'=>false,'error'=>'invalid_csrf']); exit; }

function json_input(): array {
  $raw = file_get_contents('php://input') ?: '';
  $j = json_decode($raw, true);
  return is_array($j) ? $j : [];
}

function norm_int($v) {
  if ($v === '' || $v === null) return null;
  if (!is_numeric($v)) return null;
  $i = (int)$v;
  if ($i < 0) $i = 0;
  return $i;
}

try {
  $in = array_merge($_POST, json_input());
  $pdo = pdo();

  // Delete by id
  if (($in['action'] ?? '') === 'delete' || ($in['action'] ?? '') === 'delete_entry') {
    $id = (int)($in['id'] ?? 0);
    if ($id <= 0) { echo json_encode(['ok'=>false,'error'=>'invalid_id']); exit; }
    $pdo->prepare('DELETE FROM entries WHERE id = :id')->execute([':id'=>$id]);
    echo json_encode(['ok'=>true]);
    exit;
  }

  // Save single entry
  if (($in['action'] ?? '') === 'save_entry' || isset($in['entries'])) {
    $rows = [];
    if (isset($in['entries']) && is_array($in['entries'])) {
      $rows = $in['entries'];
    } else {
      $rows[] = $in;
    }

    $pdo->beginTransaction();
    try {
      foreach ($rows as $r) {
        $week = trim((string)($r['week'] ?? ''));
        $name = trim((string)($r['name'] ?? ''));
        if ($week === '' || $name === '') throw new Exception('week and name required');

        // Ensure week row exists (label defaults to ISO date)
        $pdo->prepare("INSERT INTO weeks(week, label, finalized) VALUES(:w,:l,0) ON CONFLICT(week) DO NOTHING")
            ->execute([':w'=>$week, ':l'=>$week]);

        $vals = [
          ':mo'=> norm_int($r['monday']    ?? $r['mon'] ?? null),
          ':tu'=> norm_int($r['tuesday']   ?? $r['tue'] ?? null),
          ':we'=> norm_int($r['wednesday'] ?? $r['wed'] ?? null),
          ':th'=> norm_int($r['thursday']  ?? $r['thu'] ?? null),
          ':fr'=> norm_int($r['friday']    ?? $r['fri'] ?? null),
          ':sa'=> norm_int($r['saturday']  ?? $r['sat'] ?? null),
          ':tag'=> ($r['tag'] ?? null),
        ];

        if (!empty($r['id'])) {
          // update by id
          $vals[':id'] = (int)$r['id'];
          $pdo->prepare("UPDATE entries SET monday=:mo,tuesday=:tu,wednesday=:we,thursday=:th,friday=:fr,saturday=:sa,tag=:tag,updated_at=datetime('now') WHERE id=:id")
              ->execute($vals);
        } else {
          // upsert by (week,name) if present, otherwise insert
          $sel = $pdo->prepare('SELECT id FROM entries WHERE week=:w AND name=:n LIMIT 1');
          $sel->execute([':w'=>$week, ':n'=>$name]);
          $id = $sel->fetchColumn();
          if ($id) {
            $vals[':id'] = (int)$id;
            $pdo->prepare("UPDATE entries SET monday=:mo,tuesday=:tu,wednesday=:we,thursday=:th,friday=:fr,saturday=:sa,tag=:tag,updated_at=datetime('now') WHERE id=:id")
                ->execute($vals);
          } else {
            $pdo->prepare("INSERT INTO entries(week,name,monday,tuesday,wednesday,thursday,friday,saturday,sex,age,tag)
                           VALUES(:w,:n,:mo,:tu,:we,:th,:fr,:sa,NULL,NULL,:tag)")
                ->execute(array_merge([':w'=>$week, ':n'=>$name], $vals));
          }
        }
      }
      $pdo->commit();
      echo json_encode(['ok'=>true]);
    } catch (Throwable $e) {
      if ($pdo->inTransaction()) $pdo->rollBack();
      throw $e;
    }
    exit;
  }

  echo json_encode(['ok'=>false,'error'=>'bad_request']);
} catch (Throwable $e) {
  http_response_code(400);
  echo json_encode(['ok'=>false,'error'=>$e->getMessage()]);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/ai_delete_message.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));

require_once __DIR__ . '/util.php';
require_once __DIR__ . '/lib/admin_auth.php';
require_once __DIR__ . '/../app/Security/Csrf.php';

require_admin();
$csrf = $_SERVER['HTTP_X_CSRF'] ?? ($_POST['csrf'] ?? '');
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
if (!\App\Security\Csrf::validate((string)$csrf)) { http_response_code(403); echo json_encode(['ok'=>false,'error'=>'invalid_csrf']); exit; }
$pdo = pdo();

if (($_SERVER['REQUEST_METHOD'] ?? 'GET') !== 'POST') { echo json_encode(['ok'=>false,'error'=>'bad_method']); exit; }
$id = (int)($_POST['id'] ?? 0);
if ($id <= 0) { echo json_encode(['ok'=>false,'error'=>'bad_id']); exit; }

$st = $pdo->prepare('DELETE FROM ai_messages WHERE id = :id AND sent_at IS NULL');
$st->execute([':id' => $id]);
echo json_encode(['ok'=>true,'deleted'=> ($st->rowCount() > 0 ? 1 : 0)]);


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/admin_users_import.php =====

<?php
declare(strict_types=1);

try {
  require_once __DIR__ . '/../vendor/autoload.php';
  \App\Core\Env::bootstrap(dirname(__DIR__));
  require_once __DIR__ . '/lib/admin_auth.php';
  require_admin();

  if (session_status() !== PHP_SESSION_ACTIVE) session_start();

  $raw = file_get_contents('php://input') ?: '';
  $data = json_decode($raw, true) ?: $_POST;
  $csrf = (string)($data['csrf'] ?? '');

  if (!\App\Security\Csrf::validate($csrf)) {
    header('Content-Type: application/json; charset=utf-8');
    echo json_encode(['ok'=>false, 'error'=>'invalid_csrf']);
    exit;
  }

  $users = $data['users'] ?? null;
  if (!is_array($users)) {
    header('Content-Type: application/json; charset=utf-8');
    echo json_encode(['ok'=>false, 'error'=>'invalid_payload', 'message'=>'Expected "users" array.']);
    exit;
  }

  if (count($users) === 0) {
    header('Content-Type: application/json; charset=utf-8');
    echo json_encode(['ok'=>false, 'error'=>'empty_payload', 'message'=>'No users provided.']);
    exit;
  }

  $pdo = \App\Config\DB::pdo();

  $insertWithIdSql = "INSERT INTO users(id, name, sex, age, tag, photo_path, photo_consent, phone_e164, is_active, ai_opt_in, interests, rival_id, created_at, updated_at)
VALUES(:id, :name, :sex, :age, :tag, :photo_path, :photo_consent, :phone_e164, :is_active, :ai_opt_in, :interests, :rival_id, :created_at, :updated_at)
ON CONFLICT(id) DO UPDATE SET
  name=excluded.name,
  sex=excluded.sex,
  age=excluded.age,
  tag=excluded.tag,
  photo_path=excluded.photo_path,
  photo_consent=excluded.photo_consent,
  phone_e164=excluded.phone_e164,
  is_active=excluded.is_active,
  ai_opt_in=excluded.ai_opt_in,
  interests=excluded.interests,
  rival_id=excluded.rival_id,
  created_at=excluded.created_at,
  updated_at=excluded.updated_at
";
  // Prepared statements
  $stmtWithId = $pdo->prepare($insertWithIdSql);

  $insertNoIdSql = "INSERT INTO users(name, sex, age, tag, photo_path, photo_consent, phone_e164, is_active, ai_opt_in, interests, rival_id, created_at, updated_at)
VALUES(:name, :sex, :age, :tag, :photo_path, :photo_consent, :phone_e164, :is_active, :ai_opt_in, :interests, :rival_id, :created_at, :updated_at)";
  $stmtNoId = $pdo->prepare($insertNoIdSql);

  $inserted = 0;
  $updated = 0;
  $errors = [];

  $pdo->beginTransaction();
  try {
    foreach ($users as $i => $u) {
      if (!is_array($u)) { $errors[] = "item[$i] is not an object/array"; continue; }

      // Normalize keys we expect
      $id = isset($u['id']) && $u['id'] !== '' ? (int)$u['id'] : null;
      $name = isset($u['name']) ? (string)$u['name'] : null;
      if ($name === null || $name === '') { $errors[] = "item[$i] missing name"; continue; }
      $sex = array_key_exists('sex', $u) ? ($u['sex'] === null ? null : (string)$u['sex']) : null;
      $age = isset($u['age']) && $u['age'] !== '' ? (int)$u['age'] : null;
      $tag = array_key_exists('tag', $u) ? ($u['tag'] === null ? null : (string)$u['tag']) : null;
      $photo_path = array_key_exists('photo_path', $u) ? ($u['photo_path'] === null ? null : (string)$u['photo_path']) : null;
      $photo_consent = array_key_exists('photo_consent', $u) ? (int)$u['photo_consent'] : 0;
      $phone_e164 = array_key_exists('phone_e164', $u) ? ($u['phone_e164'] === null ? null : (string)$u['phone_e164']) : null;
      $is_active = array_key_exists('is_active', $u) ? (int)$u['is_active'] : 0;
      $ai_opt_in = array_key_exists('ai_opt_in', $u) ? (int)$u['ai_opt_in'] : 0;
      $interests = array_key_exists('interests', $u) ? ($u['interests'] === null ? '' : (string)$u['interests']) : '';
      $rival_id = array_key_exists('rival_id', $u) && $u['rival_id'] !== '' && $u['rival_id'] !== null ? (int)$u['rival_id'] : null;
      $created_at = array_key_exists('created_at', $u) ? ($u['created_at'] === null ? null : (string)$u['created_at']) : null;
      $updated_at = array_key_exists('updated_at', $u) ? ($u['updated_at'] === null ? null : (string)$u['updated_at']) : null;

      if ($id !== null) {
        $ok = $stmtWithId->execute([
          ':id'=>$id,
          ':name'=>$name,
          ':sex'=>$sex,
          ':age'=>$age,
          ':tag'=>$tag,
          ':photo_path'=>$photo_path,
          ':photo_consent'=>$photo_consent,
          ':phone_e164'=>$phone_e164,
          ':is_active'=>$is_active,
          ':ai_opt_in'=>$ai_opt_in,
          ':interests'=>$interests,
          ':rival_id'=>$rival_id,
          ':created_at'=>$created_at,
          ':updated_at'=>$updated_at
        ]);
        if ($ok) {
          // Determine whether insert or update by checking changes: rowCount==1 for insert, 0 for update when values same.
          // SQLite returns 1 for insert, 1 for update (??). We'll detect existence prior to operation to classify.
          // Simpler: check whether a user with that id existed before.
          $pre = $pdo->prepare("SELECT 1 FROM users WHERE id = :id LIMIT 1");
          $pre->execute([':id'=>$id]);
          $existed = (bool)$pre->fetchColumn();
          if ($existed) $updated++;
          else $inserted++;
        } else {
          $errors[] = "db_error on item[$i]";
        }
      } else {
        $ok = $stmtNoId->execute([
          ':name'=>$name,
          ':sex'=>$sex,
          ':age'=>$age,
          ':tag'=>$tag,
          ':photo_path'=>$photo_path,
          ':photo_consent'=>$photo_consent,
          ':phone_e164'=>$phone_e164,
          ':is_active'=>$is_active,
          ':ai_opt_in'=>$ai_opt_in,
          ':interests'=>$interests,
          ':rival_id'=>$rival_id,
          ':created_at'=>$created_at,
          ':updated_at'=>$updated_at
        ]);
        if ($ok) $inserted++;
        else $errors[] = "db_error on item[$i]";
      }
    }

    if (count($errors) > 0) {
      $pdo->rollBack();
      header('Content-Type: application/json; charset=utf-8');
      echo json_encode(['ok'=>false, 'error'=>'validation_errors', 'errors'=>$errors]);
      exit;
    }

    $pdo->commit();

    header('Content-Type: application/json; charset=utf-8');
    echo json_encode(['ok'=>true, 'inserted'=>$inserted, 'updated'=>$updated]);
    exit;
  } catch (Throwable $e) {
    if ($pdo->inTransaction()) $pdo->rollBack();
    throw $e;
  }
}
catch (Throwable $e) {
  http_response_code(500);
  header('Content-Type: application/json; charset=utf-8');
  echo json_encode(['ok'=>false, 'error'=>$e->getMessage()]);
  exit;
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/ai_rules.php =====

<?php
declare(strict_types=1);

// DEPRECATED: This endpoint will be removed; use router /api/... instead
header('X-Deprecated: This endpoint will be removed; use router /api/... instead');
header('Content-Type: application/json; charset=utf-8');

try {
  require_once __DIR__ . '/../vendor/autoload.php';
  App\Core\Env::bootstrap(dirname(__DIR__));
  use App\Config\DB;
  $pdo = DB::pdo();
  ob_start(); require_once __DIR__ . '/migrate.php'; ob_end_clean();
  require_once __DIR__ . '/lib/admin_auth.php';
  require_once __DIR__ . '/lib/settings.php';
  require_admin();
  if (session_status() !== PHP_SESSION_ACTIVE) session_start();
  require_once __DIR__ . '/../app/Security/Csrf.php';
  $csrf = $_SERVER['HTTP_X_CSRF'] ?? ($_POST['csrf'] ?? '');
  if (!\App\Security\Csrf::validate((string)$csrf)) {
    http_response_code(403);
    echo json_encode(['error' => 'invalid_csrf']);
    exit;
  }

  if (($_SERVER['REQUEST_METHOD'] ?? '') !== 'POST') {
    http_response_code(405);
    echo json_encode(['error' => 'POST required']);
    exit;
  }

  // Global/category flags
  $globalOn = setting_get('ai.enabled', '1') === '1';
  $nudgeOn  = setting_get('ai.nudge.enabled', '1') === '1';
  $recapOn  = setting_get('ai.recap.enabled', '1') === '1';
  if (!$globalOn) { error_log('[ai] skipped category=all reason=ai.disabled'); echo json_encode(['ok'=>true,'skipped'=>true,'reason'=>'ai.disabled']); exit; }

  $week = trim((string)($_POST['week'] ?? ''));
  if ($week === '') {
    // pick latest week
    $week = (string)($pdo->query("SELECT week FROM weeks ORDER BY week DESC LIMIT 1")->fetchColumn() ?? '');
  }
  if ($week === '') {
    http_response_code(400);
    echo json_encode(['error' => 'No week available']);
    exit;
  }

  // Load users
  $usersRaw = $pdo->query("SELECT id, name, rival_id FROM users")->fetchAll(PDO::FETCH_ASSOC);
  $users = [];
  foreach ($usersRaw as $u) {
    $users[(int)$u['id']] = ['id'=>(int)$u['id'], 'name'=>$u['name'], 'rival_id'=> ($u['rival_id']===null?null:(int)$u['rival_id'])];
  }

  // Helper to compute a week's total for a given user name
  $getWeekTotalStmt = $pdo->prepare("SELECT COALESCE(monday,0)+COALESCE(tuesday,0)+COALESCE(wednesday,0)+COALESCE(thursday,0)+COALESCE(friday,0)+COALESCE(saturday,0) AS total,
    (CASE WHEN monday IS NULL OR monday = 0 THEN 1 ELSE 0 END)
    + (CASE WHEN tuesday IS NULL OR tuesday = 0 THEN 1 ELSE 0 END)
    + (CASE WHEN wednesday IS NULL OR wednesday = 0 THEN 1 ELSE 0 END)
    + (CASE WHEN thursday IS NULL OR thursday = 0 THEN 1 ELSE 0 END)
    + (CASE WHEN friday IS NULL OR friday = 0 THEN 1 ELSE 0 END)
    + (CASE WHEN saturday IS NULL OR saturday = 0 THEN 1 ELSE 0 END) AS missing_days
    FROM entries WHERE week = :week AND name = :name LIMIT 1");

  // Load totals for target week (map by user_id)
  $totals = [];
  foreach ($users as $uid => $u) {
    $getWeekTotalStmt->execute([':week'=>$week, ':name'=>$u['name']]);
    $row = $getWeekTotalStmt->fetch(PDO::FETCH_ASSOC);
    if ($row) {
      $totals[$uid] = ['total' => (int)$row['total'], 'missing_days' => (int)$row['missing_days']];
    } else {
      // no entry -> total 0, missing_days = 6
      $totals[$uid] = ['total' => 0, 'missing_days' => 6];
    }
  }

  // Compute historical best per user (max single-week total)
  $bestStmt = $pdo->prepare("SELECT MAX(COALESCE(monday,0)+COALESCE(tuesday,0)+COALESCE(wednesday,0)+COALESCE(thursday,0)+COALESCE(friday,0)+COALESCE(saturday,0)) AS best
    FROM entries WHERE name = :name");
  $bests = [];
  foreach ($users as $uid => $u) {
    $bestStmt->execute([':name'=>$u['name']]);
    $bests[$uid] = (int)($bestStmt->fetchColumn() ?? 0);
  }

  // Determine prior week (if any)
  $priorWeek = (string)($pdo->prepare("SELECT week FROM weeks WHERE week < :week ORDER BY week DESC LIMIT 1")->execute([':week'=>$week]) ?: '');
  $priorWeekRow = $pdo->prepare("SELECT week FROM weeks WHERE week < :week ORDER BY week DESC LIMIT 1");
  $priorWeekRow->execute([':week'=>$week]);
  $priorWeek = (string)($priorWeekRow->fetchColumn() ?? '');

  $priorTotals = [];
  if ($priorWeek !== '') {
    foreach ($users as $uid => $u) {
      $getWeekTotalStmt->execute([':week'=>$priorWeek, ':name'=>$u['name']]);
      $row = $getWeekTotalStmt->fetch(PDO::FETCH_ASSOC);
      $priorTotals[$uid] = $row ? (int)$row['total'] : 0;
    }
  }

  // Build ranking for top3 for this week
  $rank = [];
  foreach ($users as $uid => $u) {
    $rank[] = ['id'=>$uid, 'name'=>$u['name'], 'total'=>$totals[$uid]['total']];
  }
  usort($rank, function($a,$b){ return $b['total'] <=> $a['total'] ?: strcmp($a['name'],$b['name']); });
  $top3 = array_slice($rank, 0, 3);

  // Compute most improved
  $mostImproved = null; // ['id'=>, 'name'=>, 'delta'=>]
  if ($priorWeek !== '') {
    foreach ($users as $uid => $u) {
      $delta = $totals[$uid]['total'] - ($priorTotals[$uid] ?? 0);
      if ($mostImproved === null || $delta > $mostImproved['delta']) {
        $mostImproved = ['id'=>$uid, 'name'=>$u['name'], 'delta'=>$delta];
      }
    }
    if ($mostImproved !== null && $mostImproved['delta'] <= 0) $mostImproved = null;
  }

  // Build missing list
  $missingList = [];
  foreach ($users as $uid => $u) {
    $md = $totals[$uid]['missing_days'];
    if ($md > 0) $missingList[] = ['name'=>$u['name'], 'missing'=>$md];
  }

  // Load ai_messages rows to update
  $q = $pdo->prepare("SELECT id, type, user_id FROM ai_messages WHERE model = 'rules-v0' AND (content = '' OR content IS NULL) AND week = :week");
  $q->execute([':week'=>$week]);
  $rows = $q->fetchAll(PDO::FETCH_ASSOC);

  $updateStmt = $pdo->prepare("UPDATE ai_messages SET content = :content WHERE id = :id");

  $updated = 0; $skipped = 0;
  foreach ($rows as $r) {
    $id = (int)$r['id'];
    $type = (string)$r['type'];
    $user_id = $r['user_id'] !== null ? (int)$r['user_id'] : null;
    $content = '';

    if ($type === 'nudge' && !$nudgeOn) { $skipped++; error_log('[ai] skipped category=nudge reason=nudge.disabled id='.$id.' week='.$week); continue; }
    if ($type === 'recap' && !$recapOn) { $skipped++; error_log('[ai] skipped category=recap reason=recap.disabled id='.$id.' week='.$week); continue; }

    if ($type === 'nudge' && $user_id !== null && isset($users[$user_id])) {
      $name = $users[$user_id]['name'] ?? 'You';
      $userTotal = $totals[$user_id]['total'] ?? 0;
      $userBest = $bests[$user_id] ?? 0;
      $deltaBest = $userBest - $userTotal;
      if ($deltaBest < 0) $deltaBest = 0;
      $deltaBestText = number_format($deltaBest, 0, '.', ',');

      // Rival sentence
      $rivalSentence = '';
      $gap = null;
      $rivalId = $users[$user_id]['rival_id'] ?? null;
      if ($rivalId !== null && isset($users[$rivalId])) {
        $rivalTotal = $totals[$rivalId]['total'] ?? 0;
        $gap = $rivalTotal - $userTotal;
        if ($gap < 0) $gap = 0;
        if ($gap > 0) {
          $rivalName = $users[$rivalId]['name'] ?? '';
          $rivalSentence = "{$rivalName} is {$gap} ahead.";
        }
      } else {
        // find nearest higher total
        $found = null;
        foreach ($rank as $candidate) {
          if ($candidate['id'] === $user_id) continue;
          if ($candidate['total'] > $userTotal) { $found = $candidate; break; }
        }
        if ($found) {
          $gap = $found['total'] - $userTotal;
          if ($gap < 0) $gap = 0;
          if ($gap > 0) $rivalSentence = "{$found['name']} is {$gap} ahead.";
        }
      }

      $parts = [];
      $parts[] = "{$name}, you're {$deltaBestText} from your weekly best.";
      if ($rivalSentence !== '') $parts[] = $rivalSentence;
      $parts[] = "One solid day puts you back in it.";
      $content = trim(preg_replace('/\s+/', ' ', implode(' ', $parts)));

      // Clamp length to 160 (use mb_* when available, fall back to byte-safe functions)
      if (function_exists('mb_strlen')) {
        if (mb_strlen($content) > 160) {
          $content = mb_substr($content, 0, 157) . '...';
        }
      } else {
        if (strlen($content) > 160) {
          $content = substr($content, 0, 157) . '...';
        }
      }

    } elseif ($type === 'recap') {
      $pieces = [];
      // Top 3
      $tops = [];
      foreach ($top3 as $i => $t) {
        $rankNo = $i + 1;
        $tops[] = "{$rankNo} {$t['name']} {$t['total']}";
      }
      $pieces[] = 'Top: ' . implode(', ', $tops) . '.';

      // Most improved
      if ($mostImproved !== null) {
        $pieces[] = "Most improved: {$mostImproved['name']}+{$mostImproved['delta']}.";
      }

      // Missing
      if (count($missingList) > 0) {
        $missStr = [];
        foreach ($missingList as $m) {
          $missStr[] = "{$m['name']}({$m['missing']})";
        }
        $pieces[] = 'Missing: ' . implode(', ', $missStr) . '.';
      }

      $content = trim(preg_replace('/\s+/', ' ', implode(' ', $pieces)));
      if (function_exists('mb_strlen')) {
        if (mb_strlen($content) > 1000) {
          $content = mb_substr($content, 0, 997) . '...';
        }
      } else {
        if (strlen($content) > 1000) {
          $content = substr($content, 0, 997) . '...';
        }
      }
    } else {
      // Unknown type or missing user -> skip
      continue;
    }

    // Update row
    $updateStmt->execute([':content'=>$content, ':id'=>$id]);
    $updated++;
  }

  echo json_encode(['ok'=>true,'updated'=>$updated, 'skipped'=>$skipped, 'week'=>$week]);

} catch (Throwable $e) {
  http_response_code(500);
  echo json_encode(['error' => $e->getMessage()]);
  exit;
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/entries_finalize.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));

require_once __DIR__ . '/util.php';
require_once __DIR__ . '/lib/admin_auth.php';

require_once __DIR__ . '/../app/Security/Csrf.php';
require_admin();
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
$csrf = $_SERVER['HTTP_X_CSRF'] ?? ($_POST['csrf'] ?? '');
if (!\App\Security\Csrf::validate((string)$csrf)) { http_response_code(403); echo json_encode(['ok'=>false,'error'=>'invalid_csrf']); exit; }

function json_input(): array {
  $raw = file_get_contents('php://input') ?: '';
  $j = json_decode($raw, true);
  return is_array($j) ? $j : [];
}

try {
  $in = array_merge($_POST, json_input());
  $week = trim((string)($in['week'] ?? ''));
  $action = (string)($in['action'] ?? 'finalize');
  if ($week === '') { echo json_encode(['ok'=>false,'error'=>'week_required']); exit; }
  $pdo = pdo();

  if ($action === 'unfinalize') {
    $pdo->beginTransaction();
    try {
      $pdo->prepare('DELETE FROM snapshots WHERE week = :w')->execute([':w'=>$week]);
      $pdo->prepare("UPDATE weeks SET finalized=0, finalized_at=NULL WHERE week=:w")->execute([':w'=>$week]);
      $pdo->commit();
      echo json_encode(['ok'=>true, 'unfinalized'=>1]);
    } catch (Throwable $e) { if ($pdo->inTransaction()) $pdo->rollBack(); throw $e; }
    exit;
  }

  // finalize: snapshot rows and mark finalized
  $q = $pdo->prepare("SELECT name,monday,tuesday,wednesday,thursday,friday,saturday,sex,age,tag FROM entries WHERE week=:w ORDER BY LOWER(name)");
  $q->execute([':w'=>$week]);
  $rows = $q->fetchAll();
  $json = json_encode($rows, JSON_UNESCAPED_SLASHES);

  $pdo->beginTransaction();
  try {
    $pdo->prepare("INSERT INTO snapshots(week,json) VALUES(:w,:j)
                   ON CONFLICT(week) DO UPDATE SET json=excluded.json, created_at=datetime('now')")
        ->execute([':w'=>$week, ':j'=>$json]);
    $pdo->prepare("UPDATE weeks SET finalized=1, finalized_at=datetime('now') WHERE week=:w")->execute([':w'=>$week]);
    // Best-effort: lock entries if column exists
    try { $pdo->prepare('UPDATE entries SET locked=1 WHERE week=:w')->execute([':w'=>$week]); } catch (Throwable $e) { /* ignore */ }
    $pdo->commit();
    echo json_encode(['ok'=>true, 'finalized'=>1]);
  } catch (Throwable $e) {
    if ($pdo->inTransaction()) $pdo->rollBack();
    throw $e;
  }
} catch (Throwable $e) {
  http_response_code(400);
  echo json_encode(['ok'=>false,'error'=>$e->getMessage()]);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/set_setting.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));

require_once __DIR__ . '/util.php';
require_once __DIR__ . '/lib/config.php';
require_once __DIR__ . '/lib/admin_auth.php';
require_once __DIR__ . '/../app/Security/Csrf.php';

// Protect: only admin may modify settings
require_admin();

// CSRF check
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
$csrf = $_SERVER['HTTP_X_CSRF'] ?? ($_POST['csrf'] ?? '');
if (!\App\Security\Csrf::validate((string)$csrf)) { echo json_encode(['ok'=>false,'error'=>'invalid_csrf']); exit; }

$method = $_SERVER['REQUEST_METHOD'] ?? 'GET';
if ($method !== 'POST') { echo json_encode(['ok'=>false,'error'=>'bad_method']); exit; }

$key = isset($_POST['key']) ? (string)$_POST['key'] : '';
$value = isset($_POST['value']) ? (string)$_POST['value'] : '';
if ($key === '') { echo json_encode(['ok'=>false,'error'=>'missing_key']); exit; }

// Optionally constrain keys in future; for now accept generic
set_setting($key, $value);
echo json_encode(['ok'=>true, 'key'=>$key, 'value'=>$value]);


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/ai_approve_message.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));

require_once __DIR__ . '/util.php';
require_once __DIR__ . '/lib/admin_auth.php';
require_once __DIR__ . '/../app/Security/Csrf.php';

require_admin();
$csrf = $_SERVER['HTTP_X_CSRF'] ?? ($_POST['csrf'] ?? '');
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
if (!\App\Security\Csrf::validate((string)$csrf)) { http_response_code(403); echo json_encode(['ok'=>false,'error'=>'invalid_csrf']); exit; }
$admin = require_admin_username();
$pdo = pdo();

if (($_SERVER['REQUEST_METHOD'] ?? 'GET') !== 'POST') { echo json_encode(['ok'=>false,'error'=>'bad_method']); exit; }
$id = (int)($_POST['id'] ?? 0);
$approved = (string)($_POST['approved'] ?? '0') === '1';
if ($id <= 0) { echo json_encode(['ok'=>false,'error'=>'bad_id']); exit; }

if ($approved) {
  $st = $pdo->prepare('UPDATE ai_messages SET approved_by = :u WHERE id = :id');
  $st->execute([':u'=> $admin, ':id'=>$id]);
} else {
  $st = $pdo->prepare('UPDATE ai_messages SET approved_by = NULL WHERE id = :id');
  $st->execute([':id'=>$id]);
}
echo json_encode(['ok'=>true]);


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/lifetime.php =====

<?php
declare(strict_types=1);

// DEPRECATED: This endpoint will be removed; use router /api/... instead
header('X-Deprecated: This endpoint will be removed; use router /api/... instead');
require_once __DIR__ . '/../vendor/autoload.php';
require_once __DIR__ . '/lib/settings.php';
App\Core\Env::bootstrap(dirname(__DIR__));
use App\Config\DB;
$pdo = DB::pdo();
header('Content-Type: application/json; charset=utf-8');

try {
  $sql = "
  SELECT
    u.name,
    u.sex,
    u.age,
    u.tag,
    COUNT(DISTINCT e.week) AS weeks_with_data,
    COALESCE(SUM(
      COALESCE(e.monday,0)+COALESCE(e.tuesday,0)+COALESCE(e.wednesday,0)+
      COALESCE(e.thursday,0)+COALESCE(e.friday,0)+COALESCE(e.saturday,0)
    ),0) AS total_steps,
    COALESCE(SUM(
      (e.monday IS NOT NULL)+(e.tuesday IS NOT NULL)+(e.wednesday IS NOT NULL)+
      (e.thursday IS NOT NULL)+(e.friday IS NOT NULL)+(e.saturday IS NOT NULL)
    ),0) AS total_days,
    COALESCE(MAX((
      SELECT MAX(v) FROM (
        SELECT COALESCE(e.monday,0) AS v
        UNION ALL SELECT COALESCE(e.tuesday,0)
        UNION ALL SELECT COALESCE(e.wednesday,0)
        UNION ALL SELECT COALESCE(e.thursday,0)
        UNION ALL SELECT COALESCE(e.friday,0)
        UNION ALL SELECT COALESCE(e.saturday,0)
      )
    )),0) AS lifetime_best
  FROM users u
  LEFT JOIN entries e ON e.name = u.name
  GROUP BY u.name
  ORDER BY u.name COLLATE NOCASE
  ";
  $rows = $pdo->query($sql)->fetchAll(PDO::FETCH_ASSOC);

  foreach ($rows as &$r) {
    $r['weeks_with_data'] = (int)($r['weeks_with_data'] ?? 0);
    $r['total_steps'] = (int)($r['total_steps'] ?? 0);
    $r['total_days'] = (int)($r['total_days'] ?? 0);
    $r['lifetime_best'] = (int)($r['lifetime_best'] ?? 0);
    $r['lifetime_avg'] = $r['total_days'] > 0 ? (int)round($r['total_steps'] / $r['total_days']) : 0;

    // Compute milestone counts per user (counts of days where steps >= milestone)
    // Read 'daily.milestones' directly from settings table to avoid depending on helper functions
    $raw = '';
    try {
      $stSetting = $pdo->prepare('SELECT value FROM settings WHERE key = :k LIMIT 1');
      $stSetting->execute([':k' => 'daily.milestones']);
      $val = $stSetting->fetchColumn();
      if ($val !== false && $val !== null) $raw = (string)$val;
    } catch (Throwable $e) {
      // settings table may not exist yet or query failed — fall back to config file below
      $raw = '';
    }

    $milestones = [];
    if (is_string($raw) && strlen(trim($raw)) > 0) {
      $decoded = json_decode($raw, true);
      if (is_array($decoded)) $milestones = $decoded;
    } else {
      // Fallback to site/config.json defaults
      $cfgPath = __DIR__ . '/../site/config.json';
      if (is_readable($cfgPath)) {
        $cfg = json_decode(file_get_contents($cfgPath) ?: 'null', true);
        if (is_array($cfg)) {
          $goals = $cfg['GOALS'] ?? [];
          $thresholds = $cfg['THRESHOLDS'] ?? [];
          $defaults = [];
          $defaults[] = ['steps' => (int)($goals['DAILY_GOAL_1K'] ?? 1000), 'label' => '1k'];
          $defaults[] = ['steps' => (int)($goals['DAILY_GOAL_2_5K'] ?? 2500), 'label' => '2.5k'];
          $defaults[] = ['steps' => (int)($goals['DAILY_GOAL_10K'] ?? 10000), 'label' => '10k'];
          $defaults[] = ['steps' => (int)($goals['DAILY_GOAL_15K'] ?? 15000), 'label' => '15k'];
          $defaults[] = ['steps' => (int)($thresholds['CHERYL_THRESHOLD'] ?? 20000), 'label' => 'Cheryl'];
          $defaults[] = ['steps' => (int)($thresholds['THIRTY_K_THRESHOLD'] ?? 30000), 'label' => '30k'];
          $milestones = $defaults;
        }
      }
    }

    $counts = [];
    if (is_array($milestones) && count($milestones) > 0) {
      foreach ($milestones as $m) {
        $k = (string)($m['steps'] ?? '');
        if ($k === '') continue;
        $counts[$k] = 0;
      }
      // fetch user's entries and count days across all weeks
      $st = $pdo->prepare('SELECT monday,tuesday,wednesday,thursday,friday,saturday FROM entries WHERE name = :name');
      $st->execute([':name' => $r['name']]);
      $entries = $st->fetchAll(PDO::FETCH_ASSOC) ?: [];
      foreach ($entries as $e) {
        foreach ($counts as $k => $_) {
          $steps = (int)$k;
          foreach (['monday','tuesday','wednesday','thursday','friday','saturday'] as $d) {
            $v = isset($e[$d]) && $e[$d] !== null ? (int)$e[$d] : 0;
            if ($v >= $steps) $counts[$k] += 1;
          }
        }
      }
    }
    $r['milestone_counts'] = $counts;
  }
  unset($r);

  echo json_encode(['lifetime' => $rows], JSON_UNESCAPED_SLASHES);
} catch (Throwable $e) {
  http_response_code(500);
  echo json_encode(['error'=>$e->getMessage()]);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/common_sig.php =====

<?php
declare(strict_types=1);

// DEPRECATED: This endpoint will be removed; use router /api/... instead
header('X-Deprecated: This endpoint will be removed; use router /api/... instead');

/**
 * Build the URL Twilio would have seen for signature verification.
 * Uses X-Forwarded headers when present (for Cloudflare / proxies).
 */
function twilio_seen_url(): string {
  // Scheme: prefer X-Forwarded-Proto if it's present and valid
  if (isset($_SERVER['HTTP_X_FORWARDED_PROTO'])) {
    $proto = trim(explode(',', $_SERVER['HTTP_X_FORWARDED_PROTO'])[0]);
    if ($proto === 'https' || $proto === 'http') {
      $scheme = $proto;
    } else {
      $scheme = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on') ? 'https' : 'http';
    }
  } else {
    $scheme = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on') ? 'https' : 'http';
  }

  // Host: prefer X-Forwarded-Host if present, else HTTP_HOST.
  $host = $_SERVER['HTTP_X_FORWARDED_HOST'] ?? ($_SERVER['HTTP_HOST'] ?? '');
  if (strpos($host, ',') !== false) {
    $host = trim(explode(',', $host)[0]);
  }

  // Path: use the path portion of REQUEST_URI (no query string)
  $path = parse_url($_SERVER['REQUEST_URI'] ?? '/', PHP_URL_PATH) ?: '/';

  return $scheme . '://' . $host . $path;
}

/**
 * Verify Twilio signature and return diagnostic info.
 * - $post: POST params as-assoc
 * - $headerSig: value from X-Twilio-Signature header
 * - $authToken: Twilio auth token
 *
 * Returns array: ['url','joined','expected','header','match']
 */
function twilio_verify(array $post, string $headerSig, string $authToken): array {
  // Sort by key using string sort
  ksort($post, SORT_STRING);

  $url = twilio_seen_url();

  // Build joined string: url + concat(key . value) for sorted keys
  $joinedParts = array_map(function($k) use ($post) { return $k . ($post[$k] ?? ''); }, array_keys($post));
  $joined = $url . implode('', $joinedParts);

  // HMAC-SHA1 and base64 encode
  $expected = base64_encode(hash_hmac('sha1', $joined, $authToken, true));
  $match = hash_equals($expected, $headerSig ?? '');

  return [
    'url' => $url,
    'joined' => $joined,
    'expected' => $expected,
    'header' => $headerSig ?? '',
    'match' => $match,
  ];
}

/**
 * When running local tests or when TWILIO_TEST_MODE=1, allow unsigned requests.
 * Also allow some safe local IPs.
 */
function twilio_should_skip(): bool {
  if (getenv('TWILIO_TEST_MODE') === '1') return true;
  $remote = $_SERVER['REMOTE_ADDR'] ?? '';
  return in_array($remote, ['127.0.0.1','::1','192.168.0.134'], true);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/settings_debug.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
App\Core\Env::bootstrap(dirname(__DIR__));
require_once __DIR__ . '/lib/admin_auth.php';
require_once __DIR__ . '/lib/config.php';

require_admin();

try {
  $pdo = cfg_pdo();
  $stmt = $pdo->query("SELECT key, value, updated_at FROM settings WHERE key LIKE 'ai.%' ORDER BY key");
  $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
  
  echo json_encode([
    'ok' => true,
    'settings' => $rows,
    'count' => count($rows)
  ], JSON_PRETTY_PRINT);
} catch (Throwable $e) {
  http_response_code(500);
  echo json_encode(['error' => 'server_error', 'message' => $e->getMessage()]);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/user_awards.php =====

<?php
declare(strict_types=1);

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));

use App\Config\DB;

require_once __DIR__ . '/lib/awards.php';

header('Content-Type: application/json; charset=utf-8');

try {
    // Validate user_id parameter
    if (!isset($_GET['user_id']) || !is_numeric($_GET['user_id'])) {
        http_response_code(400);
        echo json_encode(['error' => 'Missing or invalid user_id parameter']);
        exit;
    }
    
    $userId = (int)$_GET['user_id'];
    
    if ($userId <= 0) {
        http_response_code(400);
        echo json_encode(['error' => 'Invalid user_id']);
        exit;
    }
    
    // Validate type parameter (currently only 'lifetime' supported)
    $type = $_GET['type'] ?? 'lifetime';
    if ($type !== 'lifetime') {
        http_response_code(400);
        echo json_encode(['error' => 'Invalid type parameter. Only "lifetime" is supported.']);
        exit;
    }
    
    // Get database connection
    $pdo = DB::pdo();
    
    // Verify user exists
    $userStmt = $pdo->prepare("SELECT id FROM users WHERE id = :id");
    $userStmt->execute([':id' => $userId]);
    if (!$userStmt->fetch()) {
        http_response_code(404);
        echo json_encode(['error' => 'User not found']);
        exit;
    }
    
    // Get awards
    $awards = get_lifetime_awards($pdo, $userId);
    
    // Return success response
    echo json_encode($awards, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT);
    
} catch (Throwable $e) {
    error_log('user_awards.php error: ' . $e->getMessage() . "\n" . $e->getTraceAsString());
    http_response_code(500);
    echo json_encode(['error' => 'Internal server error: ' . $e->getMessage()]);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/entries_copy_roster.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));

require_once __DIR__ . '/util.php';
require_once __DIR__ . '/lib/admin_auth.php';

require_once __DIR__ . '/../app/Security/Csrf.php';
require_admin();
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
$csrf = $_SERVER['HTTP_X_CSRF'] ?? ($_POST['csrf'] ?? '');
if (!\App\Security\Csrf::validate((string)$csrf)) { http_response_code(403); echo json_encode(['ok'=>false,'error'=>'invalid_csrf']); exit; }

function json_input(): array { $raw=file_get_contents('php://input')?:''; $j=json_decode($raw,true); return is_array($j)?$j:[]; }

try {
  $in = array_merge($_POST, json_input());
  $target = trim((string)($in['target'] ?? $in['week'] ?? ''));
  $source = trim((string)($in['source'] ?? ''));
  if ($target === '') { echo json_encode(['ok'=>false,'error'=>'target_required']); exit; }
  $pdo = pdo();

  if ($source === '') {
    $st = $pdo->prepare('SELECT week FROM weeks WHERE week < :t ORDER BY week DESC LIMIT 1');
    $st->execute([':t'=>$target]);
    $source = (string)($st->fetchColumn() ?: '');
  }
  if ($source === '') { echo json_encode(['ok'=>false,'error'=>'no_source_week']); exit; }

  $pdo->beginTransaction();
  try {
    // Ensure target week exists
    $pdo->prepare('INSERT INTO weeks(week,label,finalized) VALUES(:w,:l,0) ON CONFLICT(week) DO NOTHING')
        ->execute([':w'=>$target, ':l'=>$target]);

    $sel = $pdo->prepare('SELECT name,sex,age,tag FROM entries WHERE week = :w');
    $sel->execute([':w'=>$source]);
    $rows = $sel->fetchAll();

    $ins = $pdo->prepare("INSERT INTO entries(week,name,monday,tuesday,wednesday,thursday,friday,saturday,sex,age,tag)
                          VALUES(:w,:n,NULL,NULL,NULL,NULL,NULL,NULL,:sex,:age,:tag)
                          ON CONFLICT(week,name) DO NOTHING");
    $added = 0;
    foreach ($rows as $u) {
      $ins->execute([':w'=>$target, ':n'=>$u['name'], ':sex'=>$u['sex']?:null, ':age'=>$u['age']?:null, ':tag'=>$u['tag']?:null]);
      $added += ($ins->rowCount() > 0) ? 1 : 0;
    }
    $pdo->commit();
    echo json_encode(['ok'=>true,'source'=>$source,'target'=>$target,'added'=>$added]);
  } catch (Throwable $e) { if ($pdo->inTransaction()) $pdo->rollBack(); throw $e; }
} catch (Throwable $e) {
  http_response_code(400);
  echo json_encode(['ok'=>false,'error'=>$e->getMessage()]);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/ai_delete_all.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));

require_once __DIR__ . '/util.php';
require_once __DIR__ . '/lib/admin_auth.php';
require_once __DIR__ . '/../app/Security/Csrf.php';

require_admin();
$csrf = $_SERVER['HTTP_X_CSRF'] ?? ($_POST['csrf'] ?? '');
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
if (!\App\Security\Csrf::validate((string)$csrf)) { http_response_code(403); echo json_encode(['ok'=>false,'error'=>'invalid_csrf']); exit; }
$pdo = pdo();

if (($_SERVER['REQUEST_METHOD'] ?? 'GET') !== 'POST') { echo json_encode(['ok'=>false,'error'=>'bad_method']); exit; }
$week = isset($_POST['week']) ? (string)$_POST['week'] : '';

try {
  if ($week !== '') {
    $st = $pdo->prepare('DELETE FROM ai_messages WHERE sent_at IS NULL AND week = :w');
    $st->execute([':w'=>$week]);
  } else {
    $st = $pdo->prepare('DELETE FROM ai_messages WHERE sent_at IS NULL');
    $st->execute();
  }
  echo json_encode(['ok'=>true,'deleted'=>$st->rowCount()]);
} catch (Throwable $e) {
  echo json_encode(['ok'=>false,'error'=>'delete_failed']);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/data.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
App\Core\Env::bootstrap(dirname(__DIR__));
use App\Config\DB;

function api_log_data(string $msg): void {
  $dir = __DIR__ . '/../data/logs';
  if (!is_dir($dir)) @mkdir($dir, 0775, true);
  @file_put_contents($dir . '/app.log', '['.date('c')."] data.php " . $msg . "\n", FILE_APPEND);
}

function iso_date_norm(string $s): ?string {
  $s = trim($s);
  if ($s === '') return null;
  if (!preg_match('~^(\d{4})-(\d{1,2})-(\d{1,2})$~', $s, $m)) return null;
  $y=(int)$m[1]; $mo=(int)$m[2]; $d=(int)$m[3];
  if (!checkdate($mo, $d, $y)) return null;
  return sprintf('%04d-%02d-%02d', $y, $mo, $d);
}

try {
  $pdo = DB::pdo();
  // Ensure schema exists; silence output
  ob_start();
  require_once __DIR__ . '/migrate.php';
  ob_end_clean();

  $req = (string)($_GET['week'] ?? '');
  $iso = iso_date_norm($req) ?? $req;

  // If no date provided, select latest canonical
  if ($iso === '') {
    // Try starts_on first, then legacy week
    $wk = $pdo->query("SELECT COALESCE(starts_on, week) FROM weeks ORDER BY COALESCE(starts_on, week) DESC LIMIT 1")->fetchColumn();
    if (!$wk) { echo json_encode(['ok'=>true,'week'=>null,'rows'=>[],'finalized'=>0,'source'=>'none']); return; }
    $iso = iso_date_norm((string)$wk) ?? (string)$wk;
  }

  // Generate variants to resolve duplicates (e.g., 2025-10-5 vs 2025-10-05)
  $alts = [];
  if ($iso_date = iso_date_norm($iso)) {
    [$y,$m,$d] = explode('-', $iso_date);
    $alts = array_values(array_unique([
      $iso_date,
      sprintf('%d-%d-%d', (int)$y, (int)$m, (int)$d),
      sprintf('%04d-%d-%02d', (int)$y, (int)$m, (int)$d),
      sprintf('%04d-%02d-%d', (int)$y, (int)$m, (int)$d),
    ]));
  } else {
    $alts = [$iso];
  }

  // Resolve meta row and the key used for entries/snapshots (legacy uses entries.week)
  $wkKey = null; $label = null; $finalized = 0;
  $metaRow = null;
  foreach ($alts as $cand) {
    $st = $pdo->prepare("SELECT week, starts_on, COALESCE(label, COALESCE(starts_on, week)) AS label, COALESCE(finalized, CASE WHEN finalized_at IS NOT NULL THEN 1 ELSE 0 END, 0) AS finalized FROM weeks WHERE starts_on = :d OR week = :d LIMIT 1");
    $st->execute([':d'=>$cand]);
    $metaRow = $st->fetch(PDO::FETCH_ASSOC);
    if ($metaRow) { break; }
  }
  if ($metaRow) {
    $wkKey = (string)($metaRow['week'] ?? '') ?: (string)($metaRow['starts_on'] ?? '');
    $label = (string)($metaRow['label'] ?? ($wkKey ?: $iso));
    $finalized = (int)($metaRow['finalized'] ?? 0);
  } else {
    // No week row; fall back to iso
    $wkKey = $alts[0] ?? $iso;
    $label = $wkKey;
    $finalized = 0;
  }

  if ($finalized === 1) {
    $snap = $pdo->prepare("SELECT json FROM snapshots WHERE week = :w");
    $snap->execute([':w' => $wkKey]);
    $json = $snap->fetchColumn();
    $rows = $json ? json_decode((string)$json, true) : [];
    echo json_encode(['ok'=>true,'week'=>$wkKey,'label'=>$label,'finalized'=>1,'source'=>'snapshot','rows'=>is_array($rows)?$rows:[]], JSON_UNESCAPED_SLASHES);
    return;
  }

  // Select rows and include per-day reported_at timestamps so frontend can reason about first-reports and thresholds.
  $q = $pdo->prepare("
    SELECT
      name,
      monday,
      tuesday,
      wednesday,
      thursday,
      friday,
      saturday,
      sex,
      age,
      tag,
      mon_reported_at,
      tue_reported_at,
      wed_reported_at,
      thu_reported_at,
      fri_reported_at,
      sat_reported_at
    FROM entries
    WHERE week = :w
    ORDER BY LOWER(name)
  ");
  // Try entries lookup across variants until data is found; default to wkKey
  $used = null; $rows = [];
  foreach (array_values(array_unique(array_merge([$wkKey], $alts))) as $cand) {
    $q->execute([':w' => $cand]);
    $rows = $q->fetchAll(PDO::FETCH_ASSOC);
    if ($rows && count($rows)) { $used = $cand; break; }
  }
  if ($used === null) {
    $used = $wkKey;
    $q->execute([':w' => $used]);
    $rows = $q->fetchAll(PDO::FETCH_ASSOC);
  }

  // Attach AI awards for each row (if a matching user exists).
  // Awards returned as array of { kind, milestone_value, image_path, created_at }.
  try {
    // Build unique list of names present in rows.
    $names = array_values(array_unique(array_filter(array_map(function($r){ return $r['name'] ?? null; }, $rows), function($n){ return $n !== null && $n !== ''; })));
    if (count($names) > 0) {
      // Query users to map names -> user_id
      $placeholders = implode(',', array_fill(0, count($names), '?'));
      $st = $pdo->prepare("SELECT id, name FROM users WHERE name IN ($placeholders)");
      $st->execute($names);
      $userMap = [];
      $userIds = [];
      foreach ($st->fetchAll(PDO::FETCH_ASSOC) as $u) {
        $userMap[$u['name']] = (int)$u['id'];
        $userIds[] = (int)$u['id'];
      }

      // Fetch awards for these user IDs
      $awardsMap = [];
      if (count($userIds) > 0) {
        $ph2 = implode(',', array_fill(0, count($userIds), '?'));
        $st2 = $pdo->prepare("SELECT user_id, kind, milestone_value, image_path, created_at FROM ai_awards WHERE user_id IN ($ph2) ORDER BY created_at ASC");
        $st2->execute($userIds);
        foreach ($st2->fetchAll(PDO::FETCH_ASSOC) as $a) {
          $uid = (int)$a['user_id'];
          if (!isset($awardsMap[$uid])) $awardsMap[$uid] = [];
          $awardsMap[$uid][] = [
            'kind' => $a['kind'],
            'milestone_value' => (int)$a['milestone_value'],
            'image_path' => $a['image_path'],
            'created_at' => $a['created_at']
          ];
        }
      }

      // Attach awards and user_id to each row by name -> user_id -> awards
      foreach ($rows as &$r) {
        $r['awards'] = [];
        $n = $r['name'] ?? null;
        if ($n !== null && isset($userMap[$n])) {
          $uid = $userMap[$n];
          $r['user_id'] = $uid;
          $r['awards'] = $awardsMap[$uid] ?? [];
        }
      }
      unset($r);
    } else {
      // No rows/names; ensure awards key exists for consistency
      foreach ($rows as &$r) { $r['awards'] = []; } unset($r);
    }
  } catch (Throwable $e) {
    // Non-fatal: log and continue without awards
    error_log("data.php: failed to load ai_awards: " . $e->getMessage());
    foreach ($rows as &$r) { $r['awards'] = []; } unset($r);
  }

  // Map server weekday (0=Sun..6=Sat) to DAY_ORDER index (0=Mon..5=Sat), use -1 for Sunday
  $wday = (int)date('w'); // 0=Sun..6=Sat
  $todayIdx = ($wday === 0) ? -1 : $wday - 1;

  // Build per-day firstReports array (Mon..Sat => idx 0..5)
  $dayCols = [
    ['day'=>'monday','rep'=>'mon_reported_at'],
    ['day'=>'tuesday','rep'=>'tue_reported_at'],
    ['day'=>'wednesday','rep'=>'wed_reported_at'],
    ['day'=>'thursday','rep'=>'thu_reported_at'],
    ['day'=>'friday','rep'=>'fri_reported_at'],
    ['day'=>'saturday','rep'=>'sat_reported_at']
  ];
  $firstReports = [];
  foreach ($dayCols as $idx => $d) {
    $dayCol = $d['day'];
    $repCol = $d['rep'];
    $sql = "SELECT name, $dayCol AS value, $repCol AS reported_at FROM entries WHERE week = :w AND $repCol IS NOT NULL ORDER BY $repCol ASC LIMIT 1";
    $st = $pdo->prepare($sql);
    $st->execute([':w' => $used]);
    $r = $st->fetch(PDO::FETCH_ASSOC);
    if ($r) {
      $firstReports[$idx] = ['dayIdx' => $idx, 'name' => $r['name'], 'value' => (int)$r['value'], 'reported_at' => (int)$r['reported_at']];
    } else {
      $firstReports[$idx] = null;
    }
  }

  // Compute lifetimeStart: total steps strictly before this week for each person
  $stLifetime = $pdo->prepare("
    SELECT name,
      COALESCE(SUM(COALESCE(monday,0)+COALESCE(tuesday,0)+COALESCE(wednesday,0)+COALESCE(thursday,0)+COALESCE(friday,0)+COALESCE(saturday,0)),0) AS total_before
    FROM entries
    WHERE week < :w
    GROUP BY name
  ");
  $stLifetime->execute([':w' => $used]);
  $lifetimeStart = [];
  foreach ($stLifetime->fetchAll(PDO::FETCH_ASSOC) as $r) {
    $lifetimeStart[$r['name']] = (int)$r['total_before'];
  }

  echo json_encode([
    'ok'=>true,
    'week'=>$used,
    'label'=>$label,
    'finalized'=>0,
    'source'=>'live',
    'todayIdx'=>$todayIdx,
    'rows'=>$rows,
    'firstReports'=>$firstReports,
    'lifetimeStart'=>$lifetimeStart
  ], JSON_UNESCAPED_SLASHES);

} catch (Throwable $e) {
  api_log_data($e->getMessage());
  echo json_encode(['ok'=>false,'error'=>'server_error']);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/award_generate.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/lib/admin_auth.php';
require_admin();

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));
use App\Config\DB;

require_once __DIR__ . '/lib/settings.php';
require_once __DIR__ . '/lib/ai_images.php';

require_once __DIR__ . '/../app/Security/Csrf.php';

function j200($arr){ echo json_encode($arr, JSON_UNESCAPED_SLASHES); exit; }

try {
  if (session_status() !== PHP_SESSION_ACTIVE) session_start();
  $csrf = $_SERVER['HTTP_X_CSRF'] ?? '';
  if (!\App\Security\Csrf::validate((string)$csrf)) { j200(['ok'=>false,'error'=>'invalid_csrf']); }

  $raw = file_get_contents('php://input') ?: '';
  $j = json_decode($raw, true);
  if (!is_array($j)) { $j = $_POST ?: []; }

  $userId = (int)($j['user_id'] ?? 0);
  $kind = (string)($j['kind'] ?? '');
  $milestone = (int)($j['milestone_value'] ?? 0);
  $force = (bool)($j['force'] ?? false);

  if ($userId <= 0 || $kind === '' || $milestone <= 0) {
    j200(['ok'=>false,'error'=>'bad_request']);
  }

  $pdo = DB::pdo();
  ob_start(); require_once __DIR__ . '/migrate.php'; ob_end_clean();
  $st = $pdo->prepare('SELECT id,name,interests FROM users WHERE id = :id LIMIT 1');
  $st->execute([':id'=>$userId]);
  $u = $st->fetch(PDO::FETCH_ASSOC);
  if (!$u) { j200(['ok'=>false,'error'=>'user_not_found']); }
  $userName = (string)$u['name'];

  // Respect flags (log skips)
  $ai = (string)setting_get('ai.enabled', '1');
  if ($ai !== '1') { ai_image_log_event($userId, $userName, $kind, $milestone, 'skipped', 'ai.disabled', 'fallback', null, null, null); j200(['ok'=>true,'skipped'=>true,'reason'=>'ai.disabled']); }
  $aw = (string)setting_get('ai.award.enabled', '1');
  if ($aw !== '1') { ai_image_log_event($userId, $userName, $kind, $milestone, 'skipped', 'award.disabled', 'fallback', null, null, null); j200(['ok'=>true,'skipped'=>true,'reason'=>'award.disabled']); }

  // Ensure ai_awards row
  $chk = $pdo->prepare('SELECT id, image_path FROM ai_awards WHERE user_id = :uid AND kind = :k AND milestone_value = :v LIMIT 1');
  $chk->execute([':uid'=>$userId, ':k'=>$kind, ':v'=>$milestone]);
  $row = $chk->fetch(PDO::FETCH_ASSOC);
  if (!$row) {
    $pdo->prepare('INSERT INTO ai_awards(user_id,kind,milestone_value,week,image_path,meta) VALUES(:uid,:k,:v,NULL,NULL,NULL)')
        ->execute([':uid'=>$userId, ':k'=>$kind, ':v'=>$milestone]);
  }

  // Generate (or reuse) image
  $res = ai_image_generate([
    'user_id' => $userId,
    'user_name' => $userName,
    'user' => $u,  // Pass complete user object for lifetime awards
    'award_kind' => $kind,
    'milestone_value' => $milestone,
    'style' => 'badge',
    'force' => $force,
  ]);

  if (($res['ok'] ?? false) !== true) {
    j200(['ok'=>false,'error'=>$res['error'] ?? 'provider_failed']);
  }

  // Normalize stored image_path to omit leading 'assets/' (so site/user.php builds correctly)
  $retPath = (string)$res['path']; // e.g., assets/awards/{uid}/file.webp
  $storePath = preg_replace('#^assets/#', '', $retPath);
  $meta = $res['meta'] ?? null; $metaJson = $meta ? json_encode($meta, JSON_UNESCAPED_SLASHES) : null;

  // Update row (allow overwrite when force)
  $pdo->prepare('UPDATE ai_awards SET image_path = :p, meta = :m WHERE user_id = :uid AND kind = :k AND milestone_value = :v')
      ->execute([':p'=>$storePath, ':m'=>$metaJson, ':uid'=>$userId, ':k'=>$kind, ':v'=>$milestone]);

  j200(['ok'=>true, 'path'=>$retPath]);
} catch (Throwable $e) {
  // Do not leak; return clean JSON error
  try {
    $dir = dirname(__DIR__) . '/data/logs/ai'; if (!is_dir($dir)) { @mkdir($dir, 0775, true); }
    @file_put_contents($dir . '/award_images.log', '['.date('c')."] endpoint_error " . $e->getMessage() . "\n", FILE_APPEND);
  } catch (Throwable $e2) {}
  j200(['ok'=>false,'error'=>'server_error']);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/sms_status.php =====

<?php
// File: api/sms_status.php
// Twilio Messaging "Delivery Status Callback" webhook.
// Expects form-POST. Verifies X-Twilio-Signature if TWILIO_AUTH_TOKEN is set.
// Logs to SQLite: data/walkweek.sqlite (table message_status).

declare(strict_types=1);

// DEPRECATED: This endpoint will be removed; use router /api/... instead
header('X-Deprecated: This endpoint will be removed; use router /api/... instead');

$dbFile = __DIR__ . '/../data/walkweek.sqlite';
$authToken = getenv('TWILIO_AUTH_TOKEN') ?: '';

function done(int $code=200, string $body=''): void {
  http_response_code($code);
  if ($body !== '') header('Content-Type: text/plain; charset=utf-8');
  echo $body;
  exit;
}

require_once __DIR__ . '/common_sig.php';

function verify_sig(string $authToken): bool {
  if ($authToken === '') return true;
  $hdr = $_SERVER['HTTP_X_TWILIO_SIGNATURE'] ?? '';
  // Allow in test mode or trusted local addrs when no header present
  if (twilio_should_skip() && $hdr === '') return true;

  $info = twilio_verify($_POST, $hdr, $authToken);
  if (getenv('TWILIO_SIG_DEBUG') === '1') {
    error_log('SIG url=' . $info['url'] . ' match=' . (int)$info['match'] . ' hdr=' . $info['header'] . ' exp=' . $info['expected'] . ' post=' . json_encode($_POST, JSON_UNESCAPED_SLASHES));
  }
  return $info['match'];
}

if ($_SERVER['REQUEST_METHOD'] !== 'POST') done(405, 'Method Not Allowed');
if (!verify_sig($authToken)) done(403, 'Invalid signature');

$now = (new DateTimeImmutable('now', new DateTimeZone('UTC')))->format('c');

$rec = [
  ':message_sid' => $_POST['MessageSid'] ?? $_POST['SmsSid'] ?? null,
  ':message_status' => $_POST['MessageStatus'] ?? $_POST['SmsStatus'] ?? null, // queued|sent|delivered|undelivered|failed
  ':to_number' => $_POST['To'] ?? null,
  ':from_number' => $_POST['From'] ?? null,
  ':error_code' => $_POST['ErrorCode'] ?? null,
  ':error_message' => $_POST['ErrorMessage'] ?? null,
  ':messaging_service_sid' => $_POST['MessagingServiceSid'] ?? null,
  ':account_sid' => $_POST['AccountSid'] ?? null,
  ':api_version' => $_POST['ApiVersion'] ?? null,
  ':raw_payload' => json_encode($_POST, JSON_UNESCAPED_SLASHES|JSON_UNESCAPED_UNICODE),
  ':received_at_utc' => $now,
];

try {
  $pdo = new PDO('sqlite:' . $dbFile, null, null, [
    PDO::ATTR_ERRMODE=>PDO::ERRMODE_EXCEPTION,
    PDO::ATTR_DEFAULT_FETCH_MODE=>PDO::FETCH_ASSOC,
  ]);
  $pdo->exec('PRAGMA foreign_keys=ON');

  $pdo->exec("
    CREATE TABLE IF NOT EXISTS message_status (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      message_sid TEXT UNIQUE,
      message_status TEXT,
      to_number TEXT,
      from_number TEXT,
      error_code TEXT,
      error_message TEXT,
      messaging_service_sid TEXT,
      account_sid TEXT,
      api_version TEXT,
      raw_payload TEXT,
      received_at_utc TEXT
    );
    CREATE INDEX IF NOT EXISTS idx_message_status_sid ON message_status(message_sid);
    CREATE INDEX IF NOT EXISTS idx_message_status_status ON message_status(message_status);
  ");

  $stmt = $pdo->prepare("
    INSERT INTO message_status (
      message_sid, message_status, to_number, from_number, error_code, error_message,
      messaging_service_sid, account_sid, api_version, raw_payload, received_at_utc
    ) VALUES (
      :message_sid, :message_status, :to_number, :from_number, :error_code, :error_message,
      :messaging_service_sid, :account_sid, :api_version, :raw_payload, :received_at_utc
    )
    ON CONFLICT(message_sid) DO UPDATE SET
      message_status=excluded.message_status,
      to_number=excluded.to_number,
      from_number=excluded.from_number,
      error_code=excluded.error_code,
      error_message=excluded.error_message,
      messaging_service_sid=excluded.messaging_service_sid,
      account_sid=excluded.account_sid,
      api_version=excluded.api_version,
      raw_payload=excluded.raw_payload,
      received_at_utc=excluded.received_at_utc
  ");
  $stmt->execute($rec);
} catch (Throwable $e) {
  error_log('sms_status error: '.$e->getMessage());
  // still acknowledge to stop Twilio retries
}

done(200);


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/award_regen_missing.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/lib/admin_auth.php';
require_admin();

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));
use App\Config\DB;

require_once __DIR__ . '/lib/settings.php';
require_once __DIR__ . '/lib/ai_images.php';
require_once __DIR__ . '/lib/award_labels.php';

require_once __DIR__ . '/../app/Security/Csrf.php';

function j200($a){ echo json_encode($a, JSON_UNESCAPED_SLASHES); exit; }

try {
  if (session_status() !== PHP_SESSION_ACTIVE) session_start();
  $csrf = $_SERVER['HTTP_X_CSRF'] ?? '';
  if (!\App\Security\Csrf::validate((string)$csrf)) { j200(['ok'=>false,'error'=>'invalid_csrf']); }

  // Respect flags
  $ai = (string)setting_get('ai.enabled', '1');
  if ($ai !== '1') { j200(['ok'=>true,'skipped'=>0,'generated'=>0,'errors'=>0,'reason'=>'ai.disabled']); }
  $aw = (string)setting_get('ai.award.enabled', '1');
  if ($aw !== '1') { j200(['ok'=>true,'skipped'=>0,'generated'=>0,'errors'=>0,'reason'=>'award.disabled']); }

  // Increase execution time for batch processing
  set_time_limit(120);

  $raw = file_get_contents('php://input') ?: '';
  $j = json_decode($raw, true);
  if (!is_array($j)) { $j = $_POST ?: []; }
  $kindFilter = isset($j['kind']) ? (string)$j['kind'] : '';
  $limit = isset($j['limit']) ? max(1, min((int)$j['limit'], 50)) : 10; // Default 10, max 50

  $pdo = DB::pdo();
  ob_start(); require_once __DIR__ . '/migrate.php'; ob_end_clean();

  // First, get total count of missing images
  $countSql = 'SELECT COUNT(*) FROM ai_awards a WHERE (a.image_path IS NULL OR a.image_path = "")';
  $countParams = [];
  if ($kindFilter !== '') { $countSql .= ' AND a.kind = :k'; $countParams[':k'] = $kindFilter; }
  $stCount = $pdo->prepare($countSql); $stCount->execute($countParams);
  $totalMissing = (int)$stCount->fetchColumn();

  // Now fetch limited batch to process
  $sql = 'SELECT a.user_id, a.kind, a.milestone_value, u.name FROM ai_awards a JOIN users u ON u.id = a.user_id WHERE (a.image_path IS NULL OR a.image_path = "")';
  $params = [];
  if ($kindFilter !== '') { $sql .= ' AND a.kind = :k'; $params[':k'] = $kindFilter; }
  $sql .= ' ORDER BY a.created_at ASC LIMIT ' . $limit;
  $st = $pdo->prepare($sql); $st->execute($params);
  $rows = $st->fetchAll(PDO::FETCH_ASSOC);

  $gen=0; $skip=0; $err=0;
  foreach ($rows as $r) {
    $uid = (int)$r['user_id'];
    $name = (string)$r['name'];
    $kind = (string)$r['kind'];
    $val = (int)$r['milestone_value'];
    try {
      $res = ai_image_generate(['user_id'=>$uid,'user_name'=>$name,'award_kind'=>$kind,'milestone_value'=>$val,'style'=>'badge','force'=>false]);
      if (($res['ok'] ?? false) !== true) { $err++; continue; }
      $retPath = (string)$res['path'];
      $storePath = preg_replace('#^assets/#', '', $retPath);
      $metaJson = isset($res['meta']) ? json_encode($res['meta'], JSON_UNESCAPED_SLASHES) : null;
      $pdo->prepare('UPDATE ai_awards SET image_path = :p, meta = :m WHERE user_id = :uid AND kind = :k AND milestone_value = :v')
          ->execute([':p'=>$storePath, ':m'=>$metaJson, ':uid'=>$uid, ':k'=>$kind, ':v'=>$val]);
      $gen++;
    } catch (Throwable $e) { $err++; }
  }

  // Calculate remaining count after this batch
  $remaining = max(0, $totalMissing - $gen - $err);
  j200(['ok'=>true, 'generated'=>$gen, 'skipped'=>$skip, 'errors'=>$err, 'remaining'=>$remaining, 'total_missing'=>$totalMissing]);
} catch (Throwable $e) {
  try {
    $dir = dirname(__DIR__) . '/data/logs/ai'; if (!is_dir($dir)) { @mkdir($dir, 0775, true); }
    @file_put_contents($dir . '/award_images.log', '['.date('c')."] endpoint_error " . $e->getMessage() . "\n", FILE_APPEND);
  } catch (Throwable $e2) {}
  j200(['ok'=>false,'error'=>'server_error']);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/admin_delete_photo.php =====

<?php
declare(strict_types=1);

// DEPRECATED: This endpoint will be removed; use router /api/... instead
header('X-Deprecated: This endpoint will be removed; use router /api/... instead');
require_once __DIR__ . '/lib/admin_auth.php';
require_once __DIR__ . '/../vendor/autoload.php';
App\Core\Env::bootstrap(dirname(__DIR__));
use App\Config\DB;
$pdo = DB::pdo();

function api_error(int $code, string $msg) {
  if (isset($_POST['redirect'])) {
    header('Location: ../admin/photos.php?err=' . urlencode($msg));
    exit;
  }
  http_response_code($code);
  exit($msg);
}

require_once __DIR__ . '/../app/Security/Csrf.php';
require_admin();
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
$csrf = $_SERVER['HTTP_X_CSRF'] ?? ($_POST['csrf'] ?? '');
if (!\App\Security\Csrf::validate((string)$csrf)) { api_error(403, 'invalid_csrf'); }

if ($_SERVER['REQUEST_METHOD'] !== 'POST') { api_error(400, 'bad_method'); }
$id = isset($_POST['user_id']) ? (int)$_POST['user_id'] : 0;
if ($id <= 0) { api_error(400, 'bad_input'); }

$st = $pdo->prepare('SELECT photo_path FROM users WHERE id = ?');
$st->execute([$id]);
$path = $st->fetchColumn();

if ($path) {
  $full = dirname(__DIR__) . '/site/' . ltrim($path, '/');
  if (file_exists($full)) @unlink($full);
  // try to remove directory if empty
  $dir = dirname($full);
  @rmdir($dir);
}

$pdo->prepare('UPDATE users SET photo_path = NULL, photo_consent = 0 WHERE id = ?')->execute([$id]);

if (isset($_POST['redirect'])) {
  header('Location: ../admin/photos.php?ok=1');
  exit;
}

header('Content-Type: application/json; charset=utf-8');
http_response_code(200);
echo json_encode(['ok' => true]);


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/settings_set.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
App\Core\Env::bootstrap(dirname(__DIR__));
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
require_once __DIR__ . '/lib/admin_auth.php';
require_once __DIR__ . '/lib/settings.php';
require_once __DIR__ . '/../app/Security/Csrf.php';

require_admin();

function json_input_assoc(): array {
  $raw = file_get_contents('php://input') ?: '';
  $j = json_decode($raw, true);
  return is_array($j) ? $j : [];
}

try {
  $in = json_input_assoc();
  if (empty($in)) { $in = $_POST; }
  $csrf = $_SERVER['HTTP_X_CSRF'] ?? ($in['csrf'] ?? '');
  if (!\App\Security\Csrf::validate((string)$csrf)) { http_response_code(403); echo json_encode(['error'=>'invalid_csrf']); exit; }

  $key = isset($in['key']) ? (string)$in['key'] : '';
  if ($key === '') { http_response_code(400); echo json_encode(['error'=>'missing_key']); exit; }
  // Allow milestone settings so admin UI can save comma-separated milestone lists
  $allowed = [
    'ai.enabled',
    'ai.nudge.enabled',
    'ai.recap.enabled',
    'ai.award.enabled',
    // Award thresholds and labels editable via admin UI
    'thresholds.cheryl',
    'thresholds.thirty_k',
    'awards.first_20k',
    'awards.first_30k',
    'awards.first_15k',
    // Daily milestones (JSON string) editable via admin UI
    'daily.milestones',
    // Milestone settings returned as comma-separated strings for the admin UI
    'milestones.lifetime_steps',
    'milestones.attendance_weeks'
  ];
  if (!in_array($key, $allowed, true)) { http_response_code(400); echo json_encode(['error'=>'bad_key']); exit; }
  $val = $in['value'] ?? null;
  if (is_bool($val)) { $val = $val ? '1' : '0'; }
  if (!is_string($val)) { $val = (string)$val; }
  // Accept arbitrary string values for milestone lists (comma-separated ints)
  setting_set($key, $val);
  echo json_encode(['ok'=>true]);
} catch (Throwable $e) {
  http_response_code(500);
  echo json_encode(['error'=>'server_error']);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/util.php =====

<?php
declare(strict_types=1);

// DEPRECATED: This endpoint will be removed; use router /api/... instead
header('X-Deprecated: This endpoint will be removed; use router /api/... instead');

if (!function_exists('pdo')) {
function pdo(): PDO {
  $dbPath = __DIR__ . '/../data/walkweek.sqlite';
  $dir = dirname($dbPath);
  if (!is_dir($dir)) { @mkdir($dir, 0775, true); }

  // Use a single shared PDO instance per-process where possible to avoid
  // repeatedly opening the SQLite file.
  static $instance = null;
  if ($instance instanceof PDO) {
    return $instance;
  }

  $instance = new PDO('sqlite:' . $dbPath);
  $instance->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  $instance->setAttribute(PDO::ATTR_TIMEOUT, 5);            // seconds
  // Enable foreign key constraints for SQLite.
  $instance->exec('PRAGMA foreign_keys=ON');
  $instance->exec('PRAGMA journal_mode=WAL;');               // readers+writer
  $instance->exec('PRAGMA busy_timeout=60000;');             // ms
  $instance->exec('PRAGMA synchronous=NORMAL;');             // faster WAL commits
  $instance->exec('PRAGMA wal_autocheckpoint=1000;');        // limit WAL size
  return $instance;
}
}

function with_file_lock(string $lockPath, callable $fn) {
  // Ensure lock directory exists
  $dir = dirname($lockPath);
  if (!is_dir($dir)) { @mkdir($dir, 0775, true); }

  $fp = @fopen($lockPath, 'c');
  if ($fp === false) {
    // If we can't open a lock file, fall back to running without locking.
    return $fn();
  }
  try {
    // Exclusive blocking lock
    if (!flock($fp, LOCK_EX)) {
      fclose($fp);
      return $fn();
    }
    $result = $fn();
    flock($fp, LOCK_UN);
    fclose($fp);
    return $result;
  } finally {
    if (isset($fp) && is_resource($fp)) {
      @fclose($fp);
    }
  }
}

function read_raw_post(): string {
  $s = file_get_contents('php://input');
  return $s === false ? '' : $s;
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/ai_list.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));

require_once __DIR__ . '/util.php';
require_once __DIR__ . '/lib/admin_auth.php';

require_admin();

$pdo = pdo();
$status = $_GET['status'] ?? 'unsent';
$where = '1=1';
if ($status === 'unsent') { $where = 'm.sent_at IS NULL'; }
elseif ($status === 'sent') { $where = 'm.sent_at IS NOT NULL'; }

$sql = "SELECT m.id, m.user_id, u.name AS user, m.week, m.content AS body, m.approved_by, m.sent_at, m.model
        FROM ai_messages m
        LEFT JOIN users u ON u.id = m.user_id
        WHERE $where
        ORDER BY m.created_at DESC, m.id DESC";
$rows = $pdo->query($sql)->fetchAll(PDO::FETCH_ASSOC);
$out = array_map(function($r){
  return [
    'id' => (int)$r['id'],
    'user' => (string)($r['user'] ?? ''),
    'week' => (string)($r['week'] ?? ''),
    'body' => (string)($r['body'] ?? ''),
    'approved' => ($r['approved_by'] !== null && $r['approved_by'] !== '') ? 1 : 0,
    'sent_at' => $r['sent_at'] ?? null,
    'model' => (string)($r['model'] ?? ''),
  ];
}, $rows);
echo json_encode(['ok'=>true,'messages'=>$out]);



# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/public_settings.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
App\Core\Env::bootstrap(dirname(__DIR__));
require_once __DIR__ . '/lib/settings.php';

// Public endpoint: return a small whitelist of settings useful for the public UI.
// Falls back to site/config.json defaults when DB value missing.
try {
  // Attempt to load from DB first
  $raw = setting_get('daily.milestones', '');

  if ($raw && is_string($raw) && strlen(trim($raw)) > 0) {
    $milestones = json_decode($raw, true);
    if (!is_array($milestones)) $milestones = [];
  } else {
    // Fallback to site/config.json
    $cfgPath = __DIR__ . '/../site/config.json';
    $milestones = [];
    if (is_readable($cfgPath)) {
      $cfg = json_decode(file_get_contents($cfgPath) ?: 'null', true);
      if (is_array($cfg)) {
        // Build defaults from known keys
        $goals = $cfg['GOALS'] ?? [];
        $thresholds = $cfg['THRESHOLDS'] ?? [];
        $labels = $cfg['CUSTOM_AWARD_LABELS'] ?? [];

        $defaults = [];

        // 1k
        $d1 = $goals['DAILY_GOAL_1K'] ?? 1000;
        $defaults[] = ['steps' => (int)$d1, 'label' => '1k'];

        // 2.5k
        $d25 = $goals['DAILY_GOAL_2_5K'] ?? 2500;
        $defaults[] = ['steps' => (int)$d25, 'label' => '2.5k'];

        // 10k
        $d10 = $goals['DAILY_GOAL_10K'] ?? 10000;
        $defaults[] = ['steps' => (int)$d10, 'label' => '10k'];

        // 15k
        $d15 = $goals['DAILY_GOAL_15K'] ?? 15000;
        $defaults[] = ['steps' => (int)$d15, 'label' => '15k'];

        // 20k (Cheryl)
        $c20 = $thresholds['CHERYL_THRESHOLD'] ?? 20000;
        $lbl20 = $labels['FIRST_20K'] ?? 'Cheryl Award';
        // Normalize label to short form if it contains number words
        $defaults[] = ['steps' => (int)$c20, 'label' => (strpos($lbl20, 'Cheryl') !== false) ? 'Cheryl' : $lbl20];

        // 30k
        $t30 = $thresholds['THIRTY_K_THRESHOLD'] ?? 30000;
        $lbl30 = $labels['FIRST_30K'] ?? 'Megan Award';
        $defaults[] = ['steps' => (int)$t30, 'label' => (strpos($lbl30, 'Megan') !== false) ? '30k' : $lbl30];

        $milestones = $defaults;
      }
    }
  }

  echo json_encode(['ok' => true, 'daily_milestones' => $milestones], JSON_UNESCAPED_SLASHES);
} catch (Throwable $e) {
  http_response_code(500);
  echo json_encode(['error' => 'server_error']);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/weeks.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
App\Core\Env::bootstrap(dirname(__DIR__));
use App\Config\DB;

function api_log(string $msg): void {
  $dir = __DIR__ . '/logs';
  if (!is_dir($dir)) @mkdir($dir, 0775, true);
  @file_put_contents($dir . '/app.log', '['.date('c')."] weeks.php " . $msg . "\n", FILE_APPEND);
}

function iso_date(string $s): ?string {
  $s = trim($s);
  if ($s === '') return null;
  if (!preg_match('~^(\d{4})-(\d{1,2})-(\d{1,2})$~', $s, $m)) return null;
  $y=(int)$m[1]; $mo=(int)$m[2]; $d=(int)$m[3];
  if (!checkdate($mo, $d, $y)) return null;
  return sprintf('%04d-%02d-%02d', $y, $mo, $d);
}

function columns(PDO $pdo, string $table): array {
  $cols = $pdo->query("PRAGMA table_info(".$table.")")->fetchAll(PDO::FETCH_ASSOC);
  return array_map(fn($c)=>$c['name'] ?? '', $cols);
}

try {
  $pdo = DB::pdo();
  // Ensure schema exists
  ob_start();
  require_once __DIR__ . '/migrate.php';
  ob_end_clean();

  $method = $_SERVER['REQUEST_METHOD'] ?? 'GET';

  if ($method === 'GET') {
    // List weeks sorted desc and normalize/dedupe output
    $cols = columns($pdo, 'weeks');
    $hasStarts = in_array('starts_on', $cols, true);
    $sql = $hasStarts
      ? "SELECT COALESCE(starts_on, week) AS starts_on, COALESCE(label, COALESCE(starts_on, week)) AS label, COALESCE(finalized, CASE WHEN finalized_at IS NOT NULL THEN 1 ELSE 0 END, 0) AS finalized FROM weeks WHERE COALESCE(starts_on, week) IS NOT NULL ORDER BY COALESCE(starts_on, week) DESC"
      : "SELECT week AS starts_on, COALESCE(label, week) AS label, COALESCE(finalized, CASE WHEN finalized_at IS NOT NULL THEN 1 ELSE 0 END, 0) AS finalized FROM weeks WHERE week IS NOT NULL ORDER BY week DESC";
    $rows = $pdo->query($sql)->fetchAll(PDO::FETCH_ASSOC);
    $map = [];
    foreach ($rows as $r) {
      $iso = iso_date((string)($r['starts_on'] ?? '')) ?? (string)($r['starts_on'] ?? '');
      if (!isset($map[$iso])) {
        $map[$iso] = [
          'starts_on' => $iso,
          'label' => (string)($r['label'] ?? $iso),
          'finalized' => (int)($r['finalized'] ?? 0)
        ];
      } else {
        // merge: prefer finalized=1 and keep a non-empty label
        if (($r['finalized'] ?? 0) && !($map[$iso]['finalized'] ?? 0)) $map[$iso]['finalized'] = 1;
        $lbl = trim((string)($r['label'] ?? ''));
        if ($lbl !== '' && ($map[$iso]['label'] ?? '') === '') $map[$iso]['label'] = $lbl;
      }
    }
    // sort desc by starts_on
    $out = array_values($map);
    usort($out, function($a,$b){ return strcmp($b['starts_on'], $a['starts_on']); });
    // Back-compat: include 'week' field expected by older clients
    foreach ($out as &$w) { $w['week'] = $w['starts_on']; }
    unset($w);
    echo json_encode(['ok'=>true, 'weeks'=>$out], JSON_UNESCAPED_SLASHES);
    return;
  }

  if ($method === 'POST') {
    // Admin-only with CSRF
    require_once __DIR__ . '/lib/admin_auth.php';
    require_admin();
    if (session_status() !== PHP_SESSION_ACTIVE) session_start();
    require_once __DIR__ . '/../app/Security/Csrf.php';
    $csrf = $_SERVER['HTTP_X_CSRF'] ?? ($_POST['csrf'] ?? '');
    if (!\App\Security\Csrf::validate((string)$csrf)) { http_response_code(403); echo json_encode(['ok'=>false,'error'=>'invalid_csrf']); return; }
    $action = $_POST['action'] ?? '';
    if ($action === 'create') {
      $raw = (string)($_POST['date'] ?? '');
      $iso = iso_date($raw);
      if (!$iso) {
        http_response_code(400);
        echo json_encode(['ok'=>false,'error'=>'bad_date']);
        return;
      }
      $cols = columns($pdo, 'weeks');
      $hasStarts = in_array('starts_on', $cols, true);
      $hasWeek = in_array('week', $cols, true);
      // Upsert semantics
      $pdo->beginTransaction();
      // Exists?
      $exists = false;
      if ($hasStarts) {
        $st = $pdo->prepare('SELECT 1 FROM weeks WHERE starts_on = :d LIMIT 1');
        $st->execute([':d'=>$iso]);
        $exists = (bool)$st->fetchColumn();
      }
      if (!$exists && $hasWeek) {
        $st = $pdo->prepare('SELECT 1 FROM weeks WHERE week = :d LIMIT 1');
        $st->execute([':d'=>$iso]);
        $exists = (bool)$st->fetchColumn();
      }
      if ($exists) {
        $pdo->commit();
        echo json_encode(['ok'=>true, 'created'=>false, 'starts_on'=>$iso]);
        return;
      }
      // Insert
      if ($hasStarts && $hasWeek) {
        $ins = $pdo->prepare('INSERT INTO weeks(starts_on, week, label, finalized) VALUES(:d, :d, :l, 0)');
        $ins->execute([':d'=>$iso, ':l'=>$iso]);
      } elseif ($hasStarts) {
        $ins = $pdo->prepare('INSERT INTO weeks(starts_on, label, finalized) VALUES(:d, :l, 0)');
        $ins->execute([':d'=>$iso, ':l'=>$iso]);
      } else { // fallback legacy
        $ins = $pdo->prepare('INSERT INTO weeks(week, label, finalized) VALUES(:d, :l, 0)');
        $ins->execute([':d'=>$iso, ':l'=>$iso]);
      }
      $pdo->commit();
      echo json_encode(['ok'=>true, 'created'=>true, 'starts_on'=>$iso]);
      return;
    }

    if ($action === 'delete') {
      $raw = (string)($_POST['date'] ?? '');
      $iso = iso_date($raw);
      if (!$iso) {
        http_response_code(400);
        echo json_encode(['ok'=>false,'error'=>'bad_date']);
        return;
      }
      $force = !!(($_POST['force'] ?? '0') === '1' || ($_POST['force'] ?? '') === 'true');
      $cols = columns($pdo, 'weeks'); $hasStarts = in_array('starts_on', $cols, true); $hasWeek = in_array('week', $cols, true);
      $pdo->beginTransaction();
      // Resolve the textual key used in entries table (legacy uses entries.week)
      $wk = $iso;
      if ($hasWeek) {
        $st = $pdo->prepare('SELECT COALESCE(week, starts_on) FROM weeks WHERE starts_on = :d OR week = :d LIMIT 1');
        $st->execute([':d'=>$iso]);
        $wk = (string)($st->fetchColumn() ?: $iso);
      }
      // Count entries
      $cnt = 0;
      try {
        $stc = $pdo->prepare('SELECT COUNT(1) FROM entries WHERE week = :w');
        $stc->execute([':w'=>$wk]);
        $cnt = (int)$stc->fetchColumn();
      } catch (Throwable $e) {
        // entries table may not exist; treat as 0
        $cnt = 0;
      }
      if ($cnt > 0 && !$force) {
        $pdo->rollBack();
        echo json_encode(['ok'=>false,'error'=>'week_has_entries','count'=>$cnt]);
        return;
      }
      if ($cnt > 0 && $force) {
        $delE = $pdo->prepare('DELETE FROM entries WHERE week = :w');
        $delE->execute([':w'=>$wk]);
      }
      // Delete week row
      if ($hasStarts) {
        $delW = $pdo->prepare('DELETE FROM weeks WHERE starts_on = :d OR week = :d');
        $delW->execute([':d'=>$iso]);
      } else {
        $delW = $pdo->prepare('DELETE FROM weeks WHERE week = :d');
        $delW->execute([':d'=>$iso]);
      }
      $pdo->commit();
      echo json_encode(['ok'=>true, 'deleted'=>true, 'starts_on'=>$iso]);
      return;
    }

    http_response_code(400);
    echo json_encode(['ok'=>false,'error'=>'bad_request']);
    return;
  }

  http_response_code(400);
  echo json_encode(['ok'=>false,'error'=>'bad_method']);
} catch (Throwable $e) {
  api_log($e->getMessage());
  // Never expose internal errors; keep UI alive.
  echo json_encode(['ok'=>false,'error'=>'server_error']);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/admin_delete_award.php =====

<?php
declare(strict_types=1);

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));
require_once __DIR__ . '/lib/admin_auth.php';
require_admin();

if (session_status() !== PHP_SESSION_ACTIVE) session_start();
$csrf = $_SERVER['HTTP_X_CSRF'] ?? ($_POST['csrf'] ?? '');
if (!\App\Security\Csrf::validate((string)$csrf)) {
  http_response_code(403);
  echo json_encode(['ok'=>false,'error'=>'invalid_csrf']);
  exit;
}

$in = json_decode(file_get_contents('php://input'), true);
if (empty($in)) { $in = $_POST; }

$id = isset($in['id']) ? (int)$in['id'] : 0;
if ($id <= 0) {
  http_response_code(400);
  echo json_encode(['ok'=>false,'error'=>'invalid_id']);
  exit;
}

try {
  $pdo = \App\Config\DB::pdo();

  // Fetch image_path so we can remove the file if desired
  $st = $pdo->prepare('SELECT image_path FROM ai_awards WHERE id = :id LIMIT 1');
  $st->execute([':id' => $id]);
  $row = $st->fetch(PDO::FETCH_ASSOC);

  // Delete DB row
  $del = $pdo->prepare('DELETE FROM ai_awards WHERE id = :id');
  $del->execute([':id' => $id]);

  // Attempt to remove file on disk if it exists and is under site/assets
  if (!empty($row['image_path'])) {
    // image_path is stored like "awards/7/filename.webp" -> actual file at site/assets/awards/7/filename.webp
    $rel = $row['image_path'];
    $fs = realpath(__DIR__ . '/../../site/assets') . '/' . ltrim($rel, '/');
    if ($fs && strpos($fs, realpath(__DIR__ . '/../../site/assets')) === 0 && file_exists($fs)) {
      @unlink($fs);
    }
  }

  echo json_encode(['ok'=>true]);
} catch (Throwable $e) {
  error_log('admin_delete_award error: ' . $e->getMessage());
  http_response_code(500);
  echo json_encode(['ok'=>false,'error'=>'server_error']);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/sign.py =====

# /Users/michaelking/Documents/projects/king-walk-week/api/sign.py
import base64, hashlib, hmac
auth = "71883e6161a91b33bc6163a5670db921"
url  = "https://mikebking.com/dev/html/walk/api/sms_status.php"
post = {
  "From": "+18015550123",
  "MessageSid": "SM_test123",
  "MessageStatus": "delivered",
  "To": "+13855032310",
}
to_sign = url + "".join(k + post[k] for k in sorted(post.keys()))
sig = base64.b64encode(hmac.new(auth.encode(), to_sign.encode(), hashlib.sha1).digest()).decode()
print(sig)

# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/admin_upload_photo.php =====

<?php
declare(strict_types=1);

// DEPRECATED: This endpoint will be removed; use router /api/... instead
header('X-Deprecated: This endpoint will be removed; use router /api/... instead');
require_once __DIR__ . '/lib/admin_auth.php';
require_once __DIR__ . '/../vendor/autoload.php';
App\Core\Env::bootstrap(dirname(__DIR__));
use App\Config\DB;
$pdo = DB::pdo();

function api_error(int $code, string $msg) {
  if (!empty($_POST['redirect'])) {
    header('Location: ../admin/photos.php?err=' . urlencode($msg));
    exit;
  }
  http_response_code($code);
  exit($msg);
}

require_once __DIR__ . '/../app/Security/Csrf.php';
require_admin();
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
$csrf = $_SERVER['HTTP_X_CSRF'] ?? ($_POST['csrf'] ?? '');
if (!\App\Security\Csrf::validate((string)$csrf)) { api_error(403, 'invalid_csrf'); }

if ($_SERVER['REQUEST_METHOD'] !== 'POST') { api_error(400, 'bad_method'); }

$id = isset($_POST['user_id']) ? (int)$_POST['user_id'] : 0;
if ($id <= 0 || !isset($_FILES['photo'])) { api_error(400, 'bad_input'); }

$f = $_FILES['photo'];
if ($f['error'] !== UPLOAD_ERR_OK) { api_error(400, 'upload_error'); }
if ($f['size'] > 4 * 1024 * 1024) { api_error(413, 'too_big'); }
if (!is_uploaded_file($f['tmp_name'])) { api_error(400, 'bad_input'); }

$mime = mime_content_type($f['tmp_name']);
if (!in_array($mime, ['image/jpeg','image/png','image/webp'], true)) { api_error(400, 'bad_type'); }
$ext = ($mime === 'image/png') ? 'png' : (($mime === 'image/webp') ? 'webp' : 'jpg');

$siteBase = dirname(__DIR__) . '/site';
$assetsBase = $siteBase . '/assets';
$dir = $assetsBase . '/users/' . $id;
if (!is_dir($dir) && !mkdir($dir, 0755, true)) { api_error(500, 'mkdir_fail'); }

// remove any existing selfie.* to avoid stale extension mismatch
foreach (glob($dir . '/selfie.*') as $old) { if (is_file($old)) @unlink($old); }

$dest = $dir . '/selfie.' . $ext;

$img = @imagecreatefromstring(file_get_contents($f['tmp_name']));
if (!$img) { api_error(400, 'decode_fail'); }

// normalize to max 1024px on longest side
$w = imagesx($img); $h = imagesy($img);
$scale = min(1024 / max($w, $h), 1.0);
$nw = (int)floor($w * $scale); $nh = (int)floor($h * $scale);
$can = imagecreatetruecolor($nw, $nh);

// preserve transparency for PNG/WebP
if (in_array($ext, ['png','webp'], true)) {
  imagealphablending($can, false);
  imagesavealpha($can, true);
  $transparent = imagecolorallocatealpha($can, 0, 0, 0, 127);
  imagefilledrectangle($can, 0, 0, $nw, $nh, $transparent);
}

imagecopyresampled($can, $img, 0, 0, 0, 0, $nw, $nh, $w, $h);

$ok = false;
if ($ext === 'png') {
  $ok = imagepng($can, $dest);
} elseif ($ext === 'webp') {
  // quality 85
  $ok = function_exists('imagewebp') ? imagewebp($can, $dest, 85) : false;
} else {
  $ok = imagejpeg($can, $dest, 85);
}

imagedestroy($img);
imagedestroy($can);

if (!$ok) { api_error(500, 'save_fail'); }

// store relative path under site/assets
$rel = 'assets/users/' . $id . '/selfie.' . $ext;
$st = $pdo->prepare('UPDATE users SET photo_path = ?, photo_consent = 1 WHERE id = ?');
$st->execute([$rel, $id]);

if (!empty($_POST['redirect'])) {
  header('Location: ../admin/photos.php?ok=1');
  exit;
}

header('Content-Type: application/json; charset=utf-8');
http_response_code(200);
echo json_encode(['ok' => true]);


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/ai_send_approved.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));

require_once __DIR__ . '/util.php';
require_once __DIR__ . '/lib/admin_auth.php';
require_once __DIR__ . '/lib/outbound.php';
require_once __DIR__ . '/lib/settings.php';
require_once __DIR__ . '/../app/Security/Csrf.php';

require_admin();
$csrf = $_SERVER['HTTP_X_CSRF'] ?? ($_POST['csrf'] ?? '');
if (session_status() !== PHP_SESSION_ACTIVE) session_start();
if (!\App\Security\Csrf::validate((string)$csrf)) { http_response_code(403); echo json_encode(['ok'=>false,'error'=>'invalid_csrf']); exit; }
$pdo = pdo();

$week = isset($_POST['week']) ? (string)$_POST['week'] : '';
$where = 'approved_by IS NOT NULL AND sent_at IS NULL';
$params = [];
if ($week !== '') { $where .= ' AND week = :w'; $params[':w'] = $week; }

$st = $pdo->prepare("SELECT m.id, m.user_id, m.type, u.name, u.phone_e164 AS to_phone, m.content
                      FROM ai_messages m LEFT JOIN users u ON u.id=m.user_id
                      WHERE $where ORDER BY m.created_at ASC");
$st->execute($params);
$rows = $st->fetchAll(PDO::FETCH_ASSOC);

$sent = []; $errors=[]; $skipped=[];
// Global and category flags
$globalOn = setting_get('ai.enabled', '1') === '1';
$nudgeOn  = setting_get('ai.nudge.enabled', '1') === '1';
$recapOn  = setting_get('ai.recap.enabled', '1') === '1';
$awardOn  = setting_get('ai.award.enabled', '1') === '1';
if (!$globalOn) {
  error_log('[ai] skipped category=all reason=ai.disabled');
  echo json_encode(['ok'=>true,'sent_ids'=>[],'error_ids'=>[],'skipped'=>true,'reason'=>'ai.disabled']);
  return;
}
foreach ($rows as $r) {
  $id = (int)$r['id'];
  $type = (string)($r['type'] ?? '');
  $to = (string)($r['to_phone'] ?? '');
  $body = (string)($r['content'] ?? '');
  // Per-category enforcement
  if ($type === 'nudge' && !$nudgeOn) { $skipped[] = $id; error_log('[ai] skipped category=nudge reason=nudge.disabled id='.$id); continue; }
  if ($type === 'recap' && !$recapOn) { $skipped[] = $id; error_log('[ai] skipped category=recap reason=recap.disabled id='.$id); continue; }
  if ($type === 'award' && !$awardOn) { $skipped[] = $id; error_log('[ai] skipped category=award reason=award.disabled id='.$id); continue; }
  if ($to === '' || $body === '') { $errors[] = $id; continue; }
  try {
    $res = send_outbound_sms($to, $body);
    $sid = $res['sid'] ?? null;
    $upd = $pdo->prepare('UPDATE ai_messages SET sent_at = datetime(\'now\'), provider = COALESCE(provider,\'openrouter\') WHERE id = :id');
    $upd->execute([':id' => $id]);
    $sent[] = $id;
    usleep(200000); // 200ms
  } catch (Throwable $e) {
    $errors[] = $id;
  }
}
echo json_encode(['ok'=>true, 'sent_ids'=>$sent, 'error_ids'=>$errors, 'skipped_ids'=>$skipped]);


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/csrf_token.php =====

<?php
declare(strict_types=1);

header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../vendor/autoload.php';
\App\Core\Env::bootstrap(dirname(__DIR__));
require_once __DIR__ . '/../app/Security/Csrf.php';

if (session_status() !== PHP_SESSION_ACTIVE) session_start();
$t = \App\Security\Csrf::token();
echo json_encode(['token' => $t], JSON_UNESCAPED_SLASHES);



# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/lib/dates.php =====

<?php
require_once __DIR__.'/env.php';

function now_in_tz(){
  $tz=new DateTimeZone(env('WALK_TZ','America/Denver'));
  return new DateTime('now',$tz);
}

function map_day_to_col($s){
  $m=strtolower(substr($s,0,3));
  return ['mon'=>'monday','tue'=>'tuesday','wed'=>'wednesday','thu'=>'thursday','fri'=>'friday','sat'=>'saturday'][$m]??null;
}

function resolve_target_day(DateTime $now,$overrideDay){
  if($overrideDay){$c=map_day_to_col($overrideDay);return $c?:null;}
  $hour=intval($now->format('H'));
  $t=clone $now;
  if($hour<12)$t->modify('-1 day');
  $w=intval($t->format('w')); // 0 Sun..6 Sat
  if($w===0)return 'saturday';
  return ['monday','tuesday','wednesday','thursday','friday','saturday'][$w-1]??null;
}

function resolve_active_week(PDO $pdo){
  $r=$pdo->query("SELECT week FROM weeks WHERE finalized=0 ORDER BY week DESC LIMIT 1")->fetch(PDO::FETCH_ASSOC);
  return $r['week']??null;
}

/**
 * Expand a week's step data (monday-saturday columns) into individual daily dates.
 * 
 * @param string $weekStart ISO date YYYY-MM-DD (the Monday)
 * @param array $daySteps Assoc array with keys: monday, tuesday, wednesday, thursday, friday, saturday (values can be null)
 * @return array Assoc array ['YYYY-MM-DD' => steps, ...] for 6 days (Mon-Sat)
 */
function expand_week_to_daily_dates(string $weekStart, array $daySteps): array {
  $result = [];
  $days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
  
  try {
    $tz = new DateTimeZone(env('WALK_TZ', 'America/Denver'));
    $date = new DateTime($weekStart, $tz);
    
    foreach ($days as $day) {
      $dateStr = $date->format('Y-m-d');
      $steps = isset($daySteps[$day]) && $daySteps[$day] !== null ? (int)$daySteps[$day] : 0;
      $result[$dateStr] = $steps;
      $date->modify('+1 day');
    }
  } catch (Exception $e) {
    error_log('expand_week_to_daily_dates failed: ' . $e->getMessage());
  }
  
  return $result;
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/lib/entries.php =====

<?php
function is_valid_daycol($c){return in_array($c,['monday','tuesday','wednesday','thursday','friday','saturday'],true);}

/**
 * upsert_steps
 * Insert or update a single day's steps for a person in a week.
 *
 * Behavior:
 * - dayCol must be a valid weekday column.
 * - $steps may be null or a non-negative integer.
 * - We intentionally write the day's numeric value and rely on DB triggers
 *   to set the corresponding *_reported_at timestamp only the first time
 *   a positive value is observed (see api/migrate.php triggers).
 */
function upsert_steps(PDO $pdo,$week,$name,$dayCol,$steps){
  if(!is_valid_daycol($dayCol)) throw new RuntimeException('bad day');

  // Normalize steps: allow null or integer >= 0
  if ($steps === null) {
    $val = null;
  } else {
    $val = (int)$steps;
    if ($val < 0) throw new RuntimeException('invalid steps');
  }

  $sql = "INSERT INTO entries(week,name,$dayCol) VALUES(:w,:n,:s)
          ON CONFLICT(week,name) DO UPDATE SET $dayCol=excluded.$dayCol, updated_at=(datetime('now'))";
  $st = $pdo->prepare($sql);
  $st->bindValue(':w', $week);
  $st->bindValue(':n', $name);
  if ($val === null) {
    $st->bindValue(':s', null, PDO::PARAM_NULL);
  } else {
    $st->bindValue(':s', $val, PDO::PARAM_INT);
  }
  $st->execute();
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/lib/settings.php =====

<?php
declare(strict_types=1);

require_once __DIR__ . '/config.php';

/**
 * Lightweight settings helper with per-request cache and legacy key mapping.
 * Uses the `settings` table with schema: (key TEXT PRIMARY KEY, value TEXT, updated_at TEXT)
 */

function settings_pdo(): PDO {
  return cfg_pdo();
}

function settings_ensure_schema(PDO $pdo): void {
  static $done = false; if ($done) return; $done = true;
  $pdo->exec("CREATE TABLE IF NOT EXISTS settings (key TEXT PRIMARY KEY, value TEXT)");
  // Add updated_at column if missing
  try {
    $cols = $pdo->query("PRAGMA table_info(settings)")->fetchAll(PDO::FETCH_ASSOC);
    $names = array_map(fn($c)=>$c['name']??'', $cols);
    if (!in_array('updated_at', $names, true)) {
      $pdo->exec("ALTER TABLE settings ADD COLUMN updated_at TEXT");
    }
  } catch (Throwable $e) { /* ignore */ }
}

function settings_seed_defaults(PDO $pdo): void {
  // Defaults: all ON
  $defaults = [
    'ai.enabled' => '1',
    'ai.nudge.enabled' => '1',
    'ai.recap.enabled' => '1',
    'ai.award.enabled' => '1',
    'ai.image.provider' => 'openrouter',
  ];
  foreach ($defaults as $k => $v) {
    $st = $pdo->prepare("INSERT OR IGNORE INTO settings(key,value,updated_at) VALUES(:k,:v,datetime('now'))");
    try { $st->execute([':k'=>$k, ':v'=>$v]); } catch (Throwable $e) { /* ignore */ }
  }
}

function setting_get(string $key, $default=null) {
  static $cache = null; if ($cache === null) $cache = [];
  if (array_key_exists($key, $cache)) return $cache[$key];
  $pdo = settings_pdo();
  settings_ensure_schema($pdo);
  $st = $pdo->prepare('SELECT value FROM settings WHERE key = :k LIMIT 1');
  $st->execute([':k' => $key]);
  $val = $st->fetchColumn();
  if ($val === false) { $cache[$key] = $default; return $default; }
  $cache[$key] = $val;
  return $val;
}

function setting_set(string $key, $value): void {
  static $cache = null; if ($cache === null) $cache = [];
  $pdo = settings_pdo();
  settings_ensure_schema($pdo);
  $st = $pdo->prepare("INSERT INTO settings(key,value,updated_at) VALUES(:k,:v,datetime('now'))
                       ON CONFLICT(key) DO UPDATE SET value=excluded.value, updated_at=datetime('now')");
  $st->execute([':k'=>$key, ':v'=>(string)$value]);
  $cache[$key] = (string)$value;
  // No legacy key sync; new keys are canonical.
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/lib/awards.php =====

<?php
declare(strict_types=1);

require_once __DIR__ . '/dates.php';
require_once __DIR__ . '/settings.php';

/**
 * Parse comma-separated milestone string into sorted unique int array.
 *
 * @param string $s Comma-separated integers e.g. "100000,250000"
 * @return int[] Sorted unique positive integers
 */
function parse_milestones_string(string $s): array {
    $parts = array_filter(array_map('trim', explode(',', $s)), fn($x) => $x !== '');
    $nums = [];
    foreach ($parts as $p) {
        $n = (int)$p;
        if ($n > 0) $nums[] = $n;
    }
    $nums = array_values(array_unique($nums));
    sort($nums, SORT_NUMERIC);
    return $nums;
}

/**
 * Get lifetime awards for a user with computed earned dates.
 * Uses cache table user_awards_cache for performance (write-through).
 * 
 * @param PDO $pdo Database connection
 * @param int $userId User ID
 * @return array List of award objects with earned status and dates
 */
function get_lifetime_awards(PDO $pdo, int $userId): array {
    $thresholds = parse_milestones_string(setting_get('milestones.lifetime_steps', '100000,250000,500000,750000,1000000'));
    $awards = [];
    
    // Get user name from user ID
    $userStmt = $pdo->prepare("SELECT name FROM users WHERE id = :uid");
    $userStmt->execute([':uid' => $userId]);
    $userName = $userStmt->fetchColumn();
    
    if (!$userName) {
        return []; // User not found
    }
    
    // Get user's total steps
    $totalStmt = $pdo->prepare("
        SELECT COALESCE(SUM(COALESCE(monday,0) + COALESCE(tuesday,0) + COALESCE(wednesday,0) + 
                            COALESCE(thursday,0) + COALESCE(friday,0) + COALESCE(saturday,0)), 0) AS total
        FROM entries
        WHERE name = :name
    ");
    $totalStmt->execute([':name' => $userName]);
    $totalSteps = (int)$totalStmt->fetchColumn();
    
    // Get image paths from ai_awards table
    $imageStmt = $pdo->prepare("
        SELECT milestone_value, image_path 
        FROM ai_awards 
        WHERE user_id = :uid AND kind = 'lifetime_steps' AND milestone_value IN (100000, 250000, 500000, 750000, 1000000)
    ");
    $imageStmt->execute([':uid' => $userId]);
    $imagePaths = [];
    while ($row = $imageStmt->fetch(PDO::FETCH_ASSOC)) {
        if (!empty($row['image_path'])) {
            // Prefer the most recent award file on disk for this milestone (handles .webp vs .svg)
            // Use find_award_image() to locate the newest matching file in the awards directory.
            $imagePaths[(int)$row['milestone_value']] = find_award_image($userId, (int)$row['milestone_value']);
        }
    }
    
    foreach ($thresholds as $threshold) {
        $key = "lifetime_{$threshold}";
        $earned = $totalSteps >= $threshold;
        
        // Get image path from ai_awards table or use fallback
        if (!empty($imagePaths[$threshold])) {
            $imageUrl = $imagePaths[$threshold];
        } else {
            // Try to find an existing award image on disk before falling back to the generic no-photo
            $imageUrl = find_award_image($userId, $threshold);
        }
        $thumbUrl = $imageUrl; // Use same image for thumb (no separate thumbs directory)
        
        $award = [
            'key' => $key,
            'threshold' => $threshold,
            'earned' => $earned,
            'awarded_at' => null,
            'image_url' => $imageUrl,
            'thumb_url' => $thumbUrl,
            'title' => format_threshold($threshold)
        ];
        
        if ($earned) {
            // Check cache first
            $cacheStmt = $pdo->prepare("
                SELECT awarded_at FROM user_awards_cache 
                WHERE user_id = :uid AND award_key = :key
            ");
            $cacheStmt->execute([':uid' => $userId, ':key' => $key]);
            $cachedDate = $cacheStmt->fetchColumn();
            
            if ($cachedDate !== false) {
                $award['awarded_at'] = $cachedDate;
            } else {
                // Compute and cache
                $awardedDate = compute_awarded_date($pdo, $userId, $threshold);
                if ($awardedDate !== null) {
                    $award['awarded_at'] = $awardedDate;
                    
                    // Write to cache
                    try {
                        $insertStmt = $pdo->prepare("
                            INSERT OR REPLACE INTO user_awards_cache (user_id, award_key, threshold, awarded_at)
                            VALUES (:uid, :key, :threshold, :date)
                        ");
                        $insertStmt->execute([
                            ':uid' => $userId,
                            ':key' => $key,
                            ':threshold' => $threshold,
                            ':date' => $awardedDate
                        ]);
                    } catch (Exception $e) {
                        error_log("Failed to cache award date: " . $e->getMessage());
                    }
                }
            }
        }
        
        $awards[] = $award;
    }
    
    return $awards;
}

/**
 * Compute the date when a user first reached a step threshold.
 * 
 * @param PDO $pdo Database connection
 * @param int $userId User ID
 * @param int $threshold Step threshold
 * @return string|null ISO date YYYY-MM-DD or null if not reached
 */
function compute_awarded_date(PDO $pdo, int $userId, int $threshold): ?string {
    // Get user name
    $userStmt = $pdo->prepare("SELECT name FROM users WHERE id = :uid");
    $userStmt->execute([':uid' => $userId]);
    $userName = $userStmt->fetchColumn();
    
    if (!$userName) {
        return null;
    }
    
    // Get all entries for user with week start dates, ordered chronologically
    $stmt = $pdo->prepare("
        SELECT e.monday, e.tuesday, e.wednesday, e.thursday, e.friday, e.saturday, w.starts_on
        FROM entries e
        JOIN weeks w ON e.week = w.week
        WHERE e.name = :name
        ORDER BY w.starts_on ASC
    ");
    $stmt->execute([':name' => $userName]);
    $entries = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    if (empty($entries)) {
        return null;
    }
    
    // Build cumulative daily steps
    $dailySteps = [];
    foreach ($entries as $entry) {
        $weekStart = $entry['starts_on'];
        
        // Skip entries without a valid week start date
        if (empty($weekStart)) {
            continue;
        }
        
        $daySteps = [
            'monday' => $entry['monday'],
            'tuesday' => $entry['tuesday'],
            'wednesday' => $entry['wednesday'],
            'thursday' => $entry['thursday'],
            'friday' => $entry['friday'],
            'saturday' => $entry['saturday']
        ];
        
        $expanded = expand_week_to_daily_dates($weekStart, $daySteps);
        foreach ($expanded as $date => $steps) {
            $dailySteps[$date] = $steps;
        }
    }
    
    // Sort by date and compute cumulative
    ksort($dailySteps);
    $cumulative = 0;
    foreach ($dailySteps as $date => $steps) {
        $cumulative += $steps;
        if ($cumulative >= $threshold) {
            return $date;
        }
    }
    
    return null;
}

/**
 * Find the most recent award image for a user and threshold.
 * Award images are named like: lifetime-steps-100000-20251010.svg or .webp
 * This function considers both .webp and .svg candidates and returns the newest file
 * by modification time so regenerated webp files win over older svg files.
 * 
 * @param int $userId User ID
 * @param int $threshold Step threshold
 * @return string Relative path to image or fallback
 */
function find_award_image(int $userId, int $threshold): string {
    $awardsDir = __DIR__ . '/../../site/assets/awards/' . $userId;
    
    // Check if directory exists
    if (!is_dir($awardsDir)) {
        return 'assets/admin/no-photo.svg';
    }
    
    $patterns = [
        "lifetime-steps-{$threshold}-*.webp",
        "lifetime-steps-{$threshold}-*.svg"
    ];
    
    $candidates = [];
    foreach ($patterns as $p) {
        $matches = glob($awardsDir . '/' . $p);
        if (!empty($matches)) {
            foreach ($matches as $f) {
                // Use file modification time as the tiebreaker; fall back to 0 if unavailable
                $mtime = file_exists($f) ? filemtime($f) : 0;
                $candidates[$f] = $mtime;
            }
        }
    }
    
    if (empty($candidates)) {
        return 'assets/admin/no-photo.svg';
    }
    
    // Sort candidates by modification time, newest first
    arsort($candidates);
    $bestFile = array_key_first($candidates);
    
    // Return relative path from site directory
    return 'assets/awards/' . $userId . '/' . basename($bestFile);
}

/**
 * Format a threshold number into a readable title.
 * 
 * @param int $threshold Step count
 * @return string Formatted title like "100,000 Steps"
 */
function format_threshold(int $threshold): string {
    return number_format($threshold) . ' Steps';
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/lib/outbound.php =====

<?php
declare(strict_types=1);

require_once __DIR__ . '/config.php';

function send_outbound_sms(string $toE164, string $body): array {
  $sid = env('TWILIO_ACCOUNT_SID','');
  $tok = env('TWILIO_AUTH_TOKEN','');
  $from = env('TWILIO_FROM','');
  if ($sid==='' || $tok==='' || $from==='') {
    throw new RuntimeException('twilio env missing');
  }
  $url = "https://api.twilio.com/2010-04-01/Accounts/{$sid}/Messages.json";
  $post = http_build_query(['From'=>$from,'To'=>$toE164,'Body'=>$body]);
  $ch = curl_init($url);
  curl_setopt_array($ch, [
    CURLOPT_POST => true,
    CURLOPT_POSTFIELDS => $post,
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_USERPWD => $sid . ':' . $tok,
    CURLOPT_TIMEOUT => 20,
  ]);
  $resp = curl_exec($ch);
  $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $err  = curl_error($ch);
  curl_close($ch);
  if ($resp === false || $code >= 400) {
    throw new RuntimeException('twilio_failed code=' . $code . ' err=' . $err . ' resp=' . (string)$resp);
  }
  $json = json_decode($resp, true);
  return ['ok'=>true, 'sid'=> $json['sid'] ?? null, 'http_code' => $code];
}



# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/lib/award_labels.php =====

<?php
declare(strict_types=1);

/**
 * Maps award kind + milestone to a friendly label.
 * - Example: lifetime_steps 100000 => "100k Club"
 * - Fallback: ucfirst words for unknown kinds.
 */
function award_label(string $kind, int $milestone): string {
  $k = strtolower(trim($kind));
  if ($k === 'lifetime_steps') {
    // Common lifetime step milestones
    $map = [
      100000 => '100k Club',
      250000 => 'Quarter Million',
      500000 => 'Half Million',
      1000000 => 'Million Steps',
    ];
    if (isset($map[$milestone])) return $map[$milestone];
    // Generic for other values
    if ($milestone >= 1000) {
      $knum = number_format((int)round($milestone/1000)) . 'k';
      return $knum . ' Steps';
    }
    return number_format($milestone) . ' Steps';
  }
  if ($k === 'attendance_weeks') {
    $map = [
      25 => '25 Weeks Club',
      50 => '50 Weeks Club',
      100 => 'Century Weeks Club',
    ];
    if (isset($map[$milestone])) return $map[$milestone];
    return number_format($milestone) . ' Weeks';
  }
  // Default: title-cased kind
  $base = ucwords(str_replace('_', ' ', $k));
  return trim($base);
}



# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/lib/env.php =====

<?php
function env($k,$def=null){$v=getenv($k);return($v===false||$v==='')?$def:$v;}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/lib/admin_auth.php =====

<?php
declare(strict_types=1);

function require_admin(): void {
  // Read creds from env or .env file if available
  $user = getenv('ADMIN_USER') ?: '';
  $pass = getenv('ADMIN_PASS') ?: '';

  // If no creds configured, allow all (dev-friendly)
  if ($user === '' && $pass === '') return;

  $gotUser = $_SERVER['PHP_AUTH_USER'] ?? '';
  $gotPass = $_SERVER['PHP_AUTH_PW']   ?? '';

  // If Apache/Nginx didn’t pass auth, try HTTP_AUTHORIZATION fallback
  if ($gotUser === '' && isset($_SERVER['HTTP_AUTHORIZATION'])) {
    if (stripos($_SERVER['HTTP_AUTHORIZATION'], 'Basic ') === 0) {
      $decoded = base64_decode(substr($_SERVER['HTTP_AUTHORIZATION'], 6));
      if ($decoded !== false && strpos($decoded, ':') !== false) {
        [$gotUser, $gotPass] = explode(':', $decoded, 2);
        // populate PHP_AUTH_* so application code can read them
        $_SERVER['PHP_AUTH_USER'] = $gotUser;
        $_SERVER['PHP_AUTH_PW']   = $gotPass;
      }
    }
  }

  if (!hash_equals((string)$user, (string)$gotUser) || !hash_equals((string)$pass, (string)$gotPass)) {
    header('Content-Type: application/json; charset=utf-8');
    header('WWW-Authenticate: Basic realm="KW Admin"');
    http_response_code(401);
    echo json_encode(['error' => 'unauthorized']);
    exit;
  }
}

if (!function_exists('require_admin_username')) {
  function require_admin_username(): string {
    require_admin();
    return $_SERVER['PHP_AUTH_USER'] ?? 'admin';
  }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/lib/ai_stub.php =====

<?php
declare(strict_types=1);

/**
 * Simulate an AI response (no external API calls).
 * - Logs input/output to api/logs/ai_stub.log with ISO8601 timestamp
 * - Returns a simple formatted string
 */
function simulate_ai_response(string $message, string $user_name): string {
  $out = "Simulated AI: {$user_name} sent '" . str_replace(["\r","\n"], ' ', $message) . "'";
  $line = '[' . date('c') . "] user=" . $user_name . " msg=" . str_replace(["\r","\n"], ' ', $message) . " -> " . $out . "\n";
  // Write under data/logs which is writable by www-data
  $dir = dirname(__DIR__, 2) . '/data/logs';
  if (!is_dir($dir)) { @mkdir($dir, 0775, true); }
  @file_put_contents($dir . '/ai_stub.log', $line, FILE_APPEND);
  return $out;
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/lib/config.php =====

<?php
declare(strict_types=1);

/**
 * Helper functions for global settings
 * - Uses existing PDO connection (pdo() from api/util.php if available),
 *   falling back to App\Config\DB::pdo() when pdo() is not present.
 */

if (!function_exists('cfg_pdo')) {
  function cfg_pdo(): PDO {
    if (function_exists('pdo')) {
      return pdo();
    }
    // Fallback to autoloaded DB if util.php not included
    require_once __DIR__ . '/../../vendor/autoload.php';
    \App\Core\Env::bootstrap(dirname(__DIR__, 2));
    return \App\Config\DB::pdo();
  }
}

// Lightweight env reader that checks $_ENV, getenv, then .env files if present.
if (!function_exists('env')) {
  function env(string $k, $default=null) {
    if (isset($_ENV[$k])) return $_ENV[$k];
    $g = getenv($k);
    if ($g !== false) return $g;
    // Fallback: attempt to read from project .env files (best-effort, no parse library)
    $root = dirname(__DIR__, 2);
    foreach (['.env.local', '.env'] as $file) {
      $path = $root . '/' . $file;
      if (is_file($path)) {
        $lines = @file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) ?: [];
        foreach ($lines as $line) {
          if (strpos($line, '=') === false) continue;
          [$key, $val] = explode('=', $line, 2);
          if ($key === $k) {
            // Strip surrounding quotes if present
            $val = trim($val);
            if ((str_starts_with($val, '"') && str_ends_with($val, '"')) ||
                (str_starts_with($val, "'") && str_ends_with($val, "'"))) {
              $val = substr($val, 1, -1);
            }
            return $val;
          }
        }
      }
    }
    return $default;
  }
}

if (!function_exists('openrouter_api_key')) {
  function openrouter_api_key(): string {
    $key = env('OPENROUTER_API_KEY', '');
    if ($key === '') throw new RuntimeException('OpenRouter API key missing');
    return $key;
  }
}

if (!function_exists('openrouter_model')) {
  function openrouter_model(): string {
    // DB setting takes precedence if present
    $dbVal = function_exists('get_setting') ? get_setting('openrouter_model') : null;
    if ($dbVal && $dbVal !== '') return $dbVal;
    return (string)env('OPENROUTER_MODEL', 'anthropic/claude-3.5-sonnet');
  }
}

if (!function_exists('get_setting')) {
  function get_setting(string $key): ?string {
    try {
      $pdo = cfg_pdo();
      $st = $pdo->prepare('SELECT value FROM settings WHERE key = :k LIMIT 1');
      $st->execute([':k' => $key]);
      $val = $st->fetchColumn();
      return ($val === false) ? null : (string)$val;
    } catch (Throwable $e) {
      error_log('get_setting failed: ' . $e->getMessage());
      return null;
    }
  }
}

if (!function_exists('set_setting')) {
  function set_setting(string $key, string $value): void {
    try {
      $pdo = cfg_pdo();
      $st = $pdo->prepare("INSERT INTO settings(key,value) VALUES(:k,:v)
                           ON CONFLICT(key) DO UPDATE SET value=excluded.value");
      $st->execute([':k' => $key, ':v' => $value]);
    } catch (Throwable $e) {
      error_log('set_setting failed: ' . $e->getMessage());
    }
  }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/lib/ai_sms.php =====

<?php
declare(strict_types=1);

require_once __DIR__ . '/config.php';
require_once __DIR__ . '/openrouter.php';

function build_ai_sms_messages(string $userName, string $incoming, array $context=[]): array {
  $system = "You generate one short SMS reply for a family step challenge tracker. Keep under 240 characters. No links. No emojis. Be clear. If steps are included, acknowledge and confirm logging rules: before noon counts for yesterday, after noon counts for today. If message is not steps, nudge politely to send a number or 'Tue 12345'.";
  if (!empty($context['week_label'])) {
    $system .= " Current week: " . $context['week_label'] . ".";
  }
  $user = "From {$userName}: " . $incoming;
  return [
    ['role' => 'system', 'content' => $system],
    ['role' => 'user', 'content' => $user],
  ];
}

function generate_ai_sms_reply(string $userName, string $incoming, array $context=[]): array {
  $model = openrouter_model();
  $messages = build_ai_sms_messages($userName, $incoming, $context);
  $json = or_chat_complete($model, $messages, 0.4, 120);
  $text = trim($json['choices'][0]['message']['content'] ?? '');
  // Safety cleanups
  $text = preg_replace('/\s+/', ' ', $text);
  // Strip URLs
  $text = preg_replace('~https?://\S+~', '', $text);
  if (strlen($text) > 240) $text = substr($text, 0, 240);

  // Optional usage/cost extraction (best-effort)
  $cost = null;
  if (isset($json['usage'])) {
    // Some providers include token counts; cost computation depends on model pricing (omitted here)
    $cost = null;
  }

  // Log generation meta for auditing
  $dir = dirname(__DIR__, 2) . '/data/logs/ai';
  if (!is_dir($dir)) { @mkdir($dir, 0775, true); }
  @file_put_contents($dir . '/ai_generation.log', '['.date('c')."] model=".$model." user=".$userName." msg=".str_replace(["\r","\n"], ' ', $incoming)." -> " . str_replace(["\r","\n"], ' ', $text) . "\n", FILE_APPEND);

  return ['content' => $text, 'raw' => $json, 'cost_usd' => $cost, 'model' => $model];
}



# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/lib/phone.php =====

<?php
function to_e164($raw){
  $d=preg_replace('/\D+/','',$raw??'');
  if($d==='')return null;
  if(strlen($d)===11 && $d[0]==='1')$d=substr($d,1);
  if(strlen($d)===10)return '+1'.$d;
  if($raw && $raw[0]==='+')return '+'.$d;
  return null;
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/lib/openrouter.php =====

<?php
declare(strict_types=1);

require_once __DIR__ . '/config.php';

function or_chat_complete(string $model, array $messages, ?float $temp=0.5, ?int $max_tokens=160): array {
  $apiKey = openrouter_api_key();
  $body = [
    'model' => $model,
    'messages' => $messages,
    'temperature' => $temp,
    'max_tokens' => $max_tokens,
  ];
  $ch = curl_init('https://openrouter.ai/api/v1/chat/completions');
  curl_setopt_array($ch, [
    CURLOPT_POST => true,
    CURLOPT_HTTPHEADER => [
      'Content-Type: application/json',
      'Authorization: Bearer ' . $apiKey,
      'HTTP-Referer: https://mikebking.com',
      'X-Title: King Walk Week',
    ],
    CURLOPT_POSTFIELDS => json_encode($body),
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_TIMEOUT => 20,
  ]);
  $res = curl_exec($ch);
  $http = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $err = curl_error($ch);
  curl_close($ch);
  if ($res === false || $http >= 400) {
    throw new RuntimeException('OpenRouter error: http=' . $http . ' err=' . $err);
  }
  $json = json_decode($res, true);
  if (!isset($json['choices'][0]['message']['content'])) {
    throw new RuntimeException('OpenRouter response missing content');
  }
  return $json;
}



# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/lib/tx.php =====

<?php
require_once __DIR__ . '/../db.php';

/**
 * Executes $fn($pdo) in a retrying IMMEDIATE transaction.
 *
 * Usage:
 *   with_txn_retry(function($pdo) {
 *     // do quick DB writes here
 *   });
 */
function with_txn_retry(callable $fn, int $retries = 5, int $sleepMs = 200) {
  $pdo = pdo();
  for ($i = 0; $i <= $retries; $i++) {
    try {
      $pdo->exec('BEGIN IMMEDIATE;');
      $res = $fn($pdo);
      $pdo->exec('COMMIT;');
      return $res;
    } catch (Throwable $e) {
      try { $pdo->exec('ROLLBACK;'); } catch (Throwable $_) {}
      if ($i === $retries) throw $e;
      usleep($sleepMs * 1000);
    }
  }
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/lib/status_callback.php =====

<?php
// File: api/status_callback.php
// Receives Twilio status callbacks for outbound/inbound messages.
// Expects application/x-www-form-urlencoded POST.
// Verifies X-Twilio-Signature if TWILIO_AUTH_TOKEN is set.
// Logs events into SQLite: data/walkweek.sqlite (table DDL below).

declare(strict_types=1);

// ----- config -----
$dbFile = __DIR__ . '/../data/walkweek.sqlite';
$authToken = getenv('TWILIO_AUTH_TOKEN') ?: ''; // set in web server env

// ----- helpers -----
function http_response(int $code, string $body = ''): void {
    http_response_code($code);
    if ($body !== '') header('Content-Type: text/plain; charset=utf-8');
    echo $body;
    exit;
}

require_once __DIR__ . '/../common_sig.php';

function verify_twilio_signature(string $authToken): bool {
    // If no token configured, skip verification (not recommended for prod).
    if ($authToken === '') return true;

    $signature = $_SERVER['HTTP_X_TWILIO_SIGNATURE'] ?? '';

    // Allow in test mode or trusted local addrs when no header present
    if (twilio_should_skip() && $signature === '') return true;

    $info = twilio_verify($_POST, $signature, $authToken);
    if (getenv('TWILIO_SIG_DEBUG') === '1') {
        error_log('SIG url=' . $info['url'] . ' match=' . (int)$info['match'] . ' hdr=' . $info['header'] . ' exp=' . $info['expected'] . ' post=' . json_encode($_POST, JSON_UNESCAPED_SLASHES));
    }

    // Constant-time compare result included in $info['match']
    return $info['match'];
}

// ----- verify method -----
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response(405, 'Method Not Allowed');
}

// ----- verify signature -----
if (!verify_twilio_signature($authToken)) {
    http_response(403, 'Invalid signature');
}

// ----- collect fields (Twilio names) -----
$nowUtc = (new DateTimeImmutable('now', new DateTimeZone('UTC')))->format('c');

$record = [
    'message_sid'     => $_POST['MessageSid']     ?? $_POST['SmsSid'] ?? null,
    'message_status'  => $_POST['MessageStatus']  ?? $_POST['SmsStatus'] ?? null,
    'to_number'       => $_POST['To']             ?? null,
    'from_number'     => $_POST['From']           ?? null,
    'error_code'      => $_POST['ErrorCode']      ?? null,
    'error_message'   => $_POST['ErrorMessage']   ?? null,
    'messaging_service_sid' => $_POST['MessagingServiceSid'] ?? null,
    'account_sid'     => $_POST['AccountSid']     ?? null,
    'api_version'     => $_POST['ApiVersion']     ?? null,
    'raw_payload'     => json_encode($_POST, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE),
    'received_at_utc' => $nowUtc,
];

// ----- store to SQLite -----
try {
    $pdo = new PDO('sqlite:' . $dbFile, null, null, [
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
    ]);
    $pdo->exec('PRAGMA foreign_keys = ON');

    // Create table if missing
    $pdo->exec("
        CREATE TABLE IF NOT EXISTS message_status (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            message_sid TEXT UNIQUE,
            message_status TEXT,
            to_number TEXT,
            from_number TEXT,
            error_code TEXT,
            error_message TEXT,
            messaging_service_sid TEXT,
            account_sid TEXT,
            api_version TEXT,
            raw_payload TEXT,
            received_at_utc TEXT
        );
        CREATE INDEX IF NOT EXISTS idx_message_status_sid ON message_status(message_sid);
        CREATE INDEX IF NOT EXISTS idx_message_status_status ON message_status(message_status);
    ");

    // Upsert by message_sid
    $stmt = $pdo->prepare("
        INSERT INTO message_status (
            message_sid, message_status, to_number, from_number, error_code, error_message,
            messaging_service_sid, account_sid, api_version, raw_payload, received_at_utc
        ) VALUES (
            :message_sid, :message_status, :to_number, :from_number, :error_code, :error_message,
            :messaging_service_sid, :account_sid, :api_version, :raw_payload, :received_at_utc
        )
        ON CONFLICT(message_sid) DO UPDATE SET
            message_status=excluded.message_status,
            to_number=excluded.to_number,
            from_number=excluded.from_number,
            error_code=excluded.error_code,
            error_message=excluded.error_message,
            messaging_service_sid=excluded.messaging_service_sid,
            account_sid=excluded.account_sid,
            api_version=excluded.api_version,
            raw_payload=excluded.raw_payload,
            received_at_utc=excluded.received_at_utc
    ");
    $stmt->execute($record);
} catch (Throwable $e) {
    // Fail closed but acknowledge to Twilio to avoid retries storms
    error_log('status_callback error: ' . $e->getMessage());
    http_response(200); // acknowledge anyway
}

// Twilio expects 200 with no body
http_response(200);


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/lib/twilio.php =====

<?php
function verify_twilio_signature($authToken,$url,$post,$headerSig){
  if(!$authToken) return true;
  $data = $url;
  ksort($post);
  foreach($post as $k => $v){ $data .= $k . $v; }
  $sig = base64_encode(hash_hmac('sha1', $data, $authToken, true));
  return hash_equals($sig, $headerSig ?? '');
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/api/lib/ai_images.php =====

<?php
declare(strict_types=1);

require_once __DIR__ . '/settings.php';
require_once __DIR__ . '/config.php';
require_once __DIR__ . '/award_labels.php';

/**
 * AI Award Image Generation helpers
 * - Respects settings: ai.enabled, ai.award.enabled
 * - Provider abstraction with local fallback (SVG + optional GD WebP)
 * - Writes files to site/assets/awards/{user_id}/
 * - Returns paths suitable for site pages: assets/awards/{user_id}/...
 */

/**
 * Whether image generation is allowed by settings.
 */
function ai_image_can_generate(): bool {
  // Read fresh from DB to avoid stale in-process caches
  $pdo = settings_pdo();
  settings_ensure_schema($pdo);
  $st = $pdo->prepare('SELECT key, value FROM settings WHERE key IN ("ai.enabled","ai.award.enabled")');
  $st->execute();
  $flags = ['ai.enabled'=>'1','ai.award.enabled'=>'1'];
  foreach ($st->fetchAll(PDO::FETCH_ASSOC) as $r) {
    $k = (string)($r['key'] ?? ''); $v = (string)($r['value'] ?? '');
    if ($k !== '') $flags[$k] = $v;
  }
  if (($flags['ai.enabled'] ?? '1') !== '1') return false;
  if (($flags['ai.award.enabled'] ?? '1') !== '1') return false;
  // Provider presence is optional because we have a local fallback.
  return true;
}

/**
 * Generate or reuse an award image.
 *
 * Input (opts):
 * - user_id (int) Required: used for storage path
 * - user_name (string) Required: used in prompt/text
 * - award_kind (string) Required: e.g., lifetime_steps
 * - milestone_value (int) Required
 * - style (string) Optional: badge|medal|ribbon (default badge)
 * - force (bool) Optional: when true, bypass 24h reuse
 *
 * Returns:
 * - ['ok'=>true, 'path'=>'assets/awards/{uid}/....webp', 'meta'=>['prompt'=>..., 'provider'=>..., 'model'=>..., 'cost_usd'=>null]]
 * - ['ok'=>true, 'skipped'=>true, 'reason'=>'ai.disabled'|'award.disabled'|'not_configured']
 * - ['ok'=>false, 'error'=>'provider_failed']
 */
function ai_image_generate(array $opts): array {
  $uid = (int)($opts['user_id'] ?? 0);
  $userName = trim((string)($opts['user_name'] ?? ''));
  $kind = trim((string)($opts['award_kind'] ?? ''));
  $milestone = (int)($opts['milestone_value'] ?? 0);
  $style = (string)($opts['style'] ?? 'badge');
  $force = (bool)($opts['force'] ?? false);

  if (!ai_image_can_generate()) {
    $ai = (string)setting_get('ai.enabled', '1');
    $aw = (string)setting_get('ai.award.enabled', '1');
    $reason = ($ai !== '1') ? 'ai.disabled' : (($aw !== '1') ? 'award.disabled' : 'not_configured');
    ai_image_log_event($uid, $userName, $kind, $milestone, 'skipped', $reason, 'fallback', null, null, null, null);
    return ['ok'=>true, 'skipped'=>true, 'reason'=>$reason];
  }

  if ($uid <= 0 || $userName === '' || $kind === '' || $milestone <= 0) {
    return ['ok'=>false, 'error'=>'bad_input'];
  }

  // 24h idempotency: reuse the latest recent file if present unless force
  if (!$force) {
    $recent = ai_image_recent_existing($uid, $kind, $milestone, 24*3600);
    if ($recent !== null) {
      $meta = [
        'prompt' => null,
        'provider' => 'reuse',
        'model' => null,
        'cost_usd' => null,
      ];
      ai_image_log_event($uid, $userName, $kind, $milestone, 'ok', 'reused_recent', 'reuse', null, null, $recent['abs'], $recent['rel']);
      return ['ok'=>true, 'path'=>$recent['url'], 'meta'=>$meta];
    }
  }

  $label = award_label($kind, $milestone);
  
  // Detect lifetime awards and use enhanced prompt
  $isLifetime = (stripos($kind, 'lifetime') !== false) || ($milestone >= 100000);
  if ($isLifetime && isset($opts['user'])) {
    $prompt = build_lifetime_award_prompt($opts['user'], $label, $milestone);
  } else {
    $prompt = build_award_prompt($userName, $label, $milestone, $style);
  }
  
  $provider = strtolower((string)setting_get('ai.image.provider', 'local'));
  $model = (string)setting_get('ai.image.model', '');

  $date = (new DateTime('now', new DateTimeZone('UTC')))->format('Ymd');
  $safeKind = ai_image_slug($kind);
  $fileBase = $safeKind . '-' . $milestone . '-' . $date;
  $dirAbs = dirname(__DIR__, 2) . '/site/assets/awards/' . $uid;
  $dirRel = 'assets/awards/' . $uid;
  if (!is_dir($dirAbs)) { @mkdir($dirAbs, 0775, true); }

  // Try provider if configured (currently stubbed for future expansion)
  $meta = ['prompt'=>$prompt, 'provider'=>$provider, 'model'=>$model ?: null, 'cost_usd'=>null];

  try {
    if ($provider !== 'local' && $model !== '' && ai_image_has_provider()) {
      $prov = ai_image_provider_generate($prompt, ['model'=>$model,'timeout'=>18,'aspect_ratio'=>'1:1']);
      if (($prov['ok'] ?? false) === true && isset($prov['image_bytes'])) {
        $bytes = $prov['image_bytes'];
        $mime  = (string)($prov['mime'] ?? 'image/png');
        if (isset($prov['cost_usd'])) $meta['cost_usd'] = (float)$prov['cost_usd'];
        $ext = 'png';
        if (stripos($mime, 'jpeg') !== false) $ext = 'jpg';
        if (stripos($mime, 'webp') !== false) $ext = 'webp';
        // Prefer webp if possible
        if (function_exists('imagecreatefromstring') && function_exists('imagewebp')) {
          $im = @imagecreatefromstring($bytes);
          if ($im !== false) {
            $outAbs = $dirAbs . '/' . $fileBase . '.webp';
            if (@imagewebp($im, $outAbs, 88)) {
              imagedestroy($im);
              $url = $dirRel . '/' . $fileBase . '.webp';
              ai_image_log_event($uid, $userName, $kind, $milestone, 'ok', 'provider', $provider, $model, $outAbs, $url, $meta['cost_usd']);
              return ['ok'=>true, 'path'=>$url, 'meta'=>$meta];
            }
            imagedestroy($im);
          }
        }
        // Fallback: save original bytes using detected extension
        $outAbs = $dirAbs . '/' . $fileBase . '.' . $ext;
        $ok = @file_put_contents($outAbs, $bytes) !== false;
        if ($ok) {
          $url = $dirRel . '/' . $fileBase . '.' . $ext;
          ai_image_log_event($uid, $userName, $kind, $milestone, 'ok', 'provider', $provider, $model, $outAbs, $url, $meta['cost_usd']);
          return ['ok'=>true, 'path'=>$url, 'meta'=>$meta];
        }
        // fallthrough to local
      } else {
        // provider failed; log and fall back
        ai_image_log_event($uid, $userName, $kind, $milestone, 'error', 'provider_failed', $provider, $model, null, null);
      }
    }
  } catch (Throwable $e) {
    // Never expose provider errors; log only and fall back
    ai_image_log_event($uid, $userName, $kind, $milestone, 'error', 'provider_exception', $provider, $model, null, null);
  }

  // Local fallback: write SVG + optional GD raster (WebP)
  $svg = ai_image_svg_badge($userName, $label, $milestone, $style);
  $svgAbs = $dirAbs . '/' . $fileBase . '.svg';
  $okSvg = @file_put_contents($svgAbs, $svg) !== false;

  $url = $dirRel . '/' . $fileBase . '.svg';
  $outAbs = $svgAbs;

  // If GD is present, create a simple rasterized WebP/PNG badge (text + bg)
  if (function_exists('imagecreatetruecolor') && function_exists('imagewebp')) {
    $imgAbs = $dirAbs . '/' . $fileBase . '.webp';
    if (ai_image_write_gd_badge($imgAbs, $userName, $label)) {
      $url = $dirRel . '/' . $fileBase . '.webp';
      $outAbs = $imgAbs;
    }
  }

  ai_image_log_event($uid, $userName, $kind, $milestone, $okSvg ? 'ok' : 'error', $okSvg ? 'fallback' : 'write_failed', 'fallback', null, $outAbs, $url);
  if (!$okSvg) return ['ok'=>false, 'error'=>'provider_failed'];
  return ['ok'=>true, 'path'=>$url, 'meta'=>$meta];
}

// -------------------- internals --------------------

function ai_image_has_provider(): bool {
  // Provider enabled only when API key and model exist
  try {
    $prov = strtolower((string)setting_get('ai.image.provider', 'local'));
    if ($prov === 'local') return false;
    $key = env('OPENROUTER_API_KEY', '');
    $model = (string)setting_get('ai.image.model', '');
    return ($key !== '' && $model !== '');
  } catch (Throwable $e) { return false; }
}

/**
 * Attempt provider image generation via OpenRouter if available.
 * Returns ['ok'=>true,'image_bytes'=>string] or ['ok'=>false].
 * Currently a stub (no stable image API guaranteed) — returns ok=false.
 */
function ai_image_provider_generate(string $prompt, array $params): array {
  // Uses OpenRouter chat completions with modalities ["image","text"].
  $model = (string)($params['model'] ?? setting_get('ai.image.model', ''));
  $aspect = (string)($params['aspect_ratio'] ?? '1:1');
  $timeout = (int)($params['timeout'] ?? 18);
  $apiKey = env('OPENROUTER_API_KEY', '');
  if ($apiKey === '' || $model === '') return ['ok'=>false, 'error'=>'not_configured'];

  $body = [
    'model' => $model,
    'messages' => [ [ 'role' => 'user', 'content' => $prompt ] ],
    'modalities' => ['image','text'],
    'image_config' => [ 'aspect_ratio' => $aspect ],
  ];

  $ch = curl_init('https://openrouter.ai/api/v1/chat/completions');
  curl_setopt_array($ch, [
    CURLOPT_POST => true,
    CURLOPT_HTTPHEADER => [
      'Content-Type: application/json',
      'Authorization: Bearer ' . $apiKey,
      'HTTP-Referer: https://mikebking.com',
      'X-Title: King Walk Week',
    ],
    CURLOPT_POSTFIELDS => json_encode($body),
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_TIMEOUT => max(5, min($timeout, 20)),
  ]);
  $res = curl_exec($ch);
  $http = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $err = curl_error($ch);
  curl_close($ch);

  // Debug: persist provider HTTP response and error info for diagnosis
  $debugDir = dirname(__DIR__,2) . '/data/logs/ai';
  if (!is_dir($debugDir)) { @mkdir($debugDir, 0775, true); }
  $resLen = is_string($res) ? strlen($res) : 0;
  $dbgMsg = sprintf("[%s] provider_debug model=%s http=%d err=%s res_len=%d\n", date('c'), $model, $http, $err ?: '', $resLen);
  @file_put_contents($debugDir . '/provider_debug.log', $dbgMsg, FILE_APPEND);
  if (is_string($res) && $resLen > 0) {
    @file_put_contents($debugDir . '/provider_debug.log', substr($res, 0, 20000) . "\n\n", FILE_APPEND);
  }

  if ($res === false || $http >= 400) {
    return ['ok'=>false, 'error'=>'http_' . $http, 'err'=>$err ?: ''];
  }
  $json = json_decode($res, true);
  if (!is_array($json) || !isset($json['choices'][0]['message'])) {
    @file_put_contents($debugDir . '/provider_debug.log', date('c') . " bad_response: " . substr((string)$res,0,2000) . "\n\n", FILE_APPEND);
    return ['ok'=>false, 'error'=>'bad_response'];
  }
  $message = $json['choices'][0]['message'];

  // Support multiple OpenRouter response shapes:
  // 1) structured images array: message.images[0].image_url.url
  // 2) textual content containing a data: URL or a JSON blob with image_data_url
  $dataUrl = null;
  if (isset($message['images'][0]['image_url']['url'])) {
    $dataUrl = (string)$message['images'][0]['image_url']['url'];
  } elseif (isset($message['content']) && is_string($message['content'])) {
    $content = $message['content'];
    @file_put_contents($debugDir . '/provider_debug.log', date('c') . " message_content: " . substr($content,0,2000) . "\n\n", FILE_APPEND);

    // Try to find a data: URL inline in the content
    if (preg_match('~data:[^\\s\\'\"\\)]+~', $content, $m)) {
      $dataUrl = $m[0];
    } else {
      // Try to decode JSON embedded in content (strip code fences/backticks)
      $trimmed = trim($content, "` \n\r\t");
      $maybe = json_decode($trimmed, true);
      if (is_array($maybe) && isset($maybe['image_data_url'])) {
        $dataUrl = (string)$maybe['image_data_url'];
      }
    }
  }

  if ($dataUrl === null) {
    @file_put_contents($debugDir . '/provider_debug.log', date('c') . " no_images: " . substr((string)$res,0,2000) . "\n\n", FILE_APPEND);
    return ['ok'=>false, 'error'=>'no_images'];
  }

  $parsed = ai_image_parse_data_url($dataUrl);
  if ($parsed === null) {
    @file_put_contents($debugDir . '/provider_debug.log', date('c') . " decode_failed: " . substr((string)$dataUrl,0,500) . "\n\n", FILE_APPEND);
    return ['ok'=>false, 'error'=>'decode_failed'];
  }
  $out = [ 'ok'=>true, 'image_bytes'=>$parsed['bytes'], 'mime'=>$parsed['mime'] ];
  // Optional cost metadata if present
  if (isset($json['usage']['total_cost'])) $out['cost_usd'] = (float)$json['usage']['total_cost'];
  return $out;
}

function ai_image_parse_data_url(string $url): ?array {
  if (strpos($url, 'data:') !== 0) return null;
  // Format: data:<mime>;base64,<base64>
  $semi = strpos($url, ';');
  $comma = strpos($url, ',');
  if ($semi === false || $comma === false) return null;
  $mime = substr($url, 5, $semi - 5);
  $b64 = substr($url, $comma + 1);
  $bytes = base64_decode($b64, true);
  if ($bytes === false) return null;
  return ['mime'=>$mime, 'bytes'=>$bytes];
}

function ai_image_slug(string $s): string {
  $s = strtolower($s);
  $s = preg_replace('~[^a-z0-9]+~', '-', $s);
  return trim($s, '-');
}

function build_award_prompt(string $userName, string $awardLabel, int $milestone, string $style): string {
  $style = in_array($style, ['badge','medal','ribbon'], true) ? $style : 'badge';
  return sprintf(
    'Create a flat, minimalist %s icon for %s achieving %s (%s). Use a dark blue background, crisp edges, and readable text. No faces. Square 512x512.',
    $style,
    $userName,
    $awardLabel,
    number_format($milestone)
  );
}

/**
 * Build enhanced prompt for lifetime step awards based on user interests.
 * Randomly selects ONE interest from comma-separated list.
 */
function build_lifetime_award_prompt(array $user, string $awardLabel, int $milestone): string {
  $userName = (string)($user['name'] ?? 'Walker');
  $interests = trim((string)($user['interests'] ?? ''));
  
  // Parse interests and randomly select one
  if ($interests !== '') {
    $interestList = array_map('trim', explode(',', $interests));
    $interestList = array_filter($interestList); // Remove empty entries
    if (count($interestList) > 0) {
      $interestText = $interestList[array_rand($interestList)];
    } else {
      $interestText = 'modern geometric design with symbols of perseverance';
    }
  } else {
    $interestText = 'modern geometric design with symbols of perseverance';
  }
  
  // Milestone-specific style hints
  $styleHint = match(true) {
    $milestone >= 500000 => 'cosmic energy, nebula background, mythic feel',
    $milestone >= 200000 => 'platinum glow, aurora sky, elegant symmetry',
    default => 'gold medal motif, radiant gradients, joyful sparks'
  };
  
  return sprintf(
    "Design a breathtaking digital award image celebrating a lifetime walking achievement. 
     %s has reached %s lifetime steps (%s). 
     Create a highly detailed, imaginative emblem that visually represents their personality and interest: %s. 
     Use luminous color, depth, and storytelling elements. 
     Capture the feeling of epic accomplishment, motion, and personal triumph. 
     Composition: centered emblem, cinematic lighting, subtle text 'Lifetime %s Steps'. 
     No faces or photo realism. Square 1024x1024 ratio. 
     Style: digital painting + vector hybrid, vivid and collectible. Style hint: %s.",
    $userName,
    number_format($milestone),
    $awardLabel,
    $interestText,
    number_format($milestone),
    $styleHint
  );
}

/**
 * Reuse recent image within window for same user/kind/milestone.
 * Returns array with ['abs'=>..., 'rel'=>..., 'url'=>...] or null.
 */
function ai_image_recent_existing(int $uid, string $kind, int $milestone, int $windowSec): ?array {
  $dirAbs = dirname(__DIR__, 2) . '/site/assets/awards/' . $uid;
  $dirRel = 'assets/awards/' . $uid;
  if (!is_dir($dirAbs)) return null;
  $safeKind = ai_image_slug($kind);
  $files = @scandir($dirAbs) ?: [];
  $latest = null; $latestMTime = 0; $latestUrl = null; $latestRel = null;
  foreach ($files as $f) {
    if ($f === '.' || $f === '..') continue;
    if (preg_match('~^' . preg_quote($safeKind, '~') . '-' . preg_quote((string)$milestone, '~') . '-\d{8}\.(?:webp|svg|png|jpg)$~i', $f)) {
      $path = $dirAbs . '/' . $f;
      $mt = @filemtime($path) ?: 0;
      if ($mt > $latestMTime) { $latestMTime = $mt; $latest = $path; $latestRel = 'awards/' . $uid . '/' . $f; $latestUrl = $dirRel . '/' . $f; }
    }
  }
  if ($latest && (time() - $latestMTime) < $windowSec) {
    return ['abs'=>$latest, 'rel'=>$latestRel, 'url'=>$latestUrl];
  }
  return null;
}

function ai_image_svg_badge(string $userName, string $label, int $milestone, string $style): string {
  $title = htmlspecialchars($label, ENT_QUOTES, 'UTF-8');
  $user = htmlspecialchars($userName, ENT_QUOTES, 'UTF-8');
  $miles = number_format($milestone);
  $sub = $user !== '' ? $user : 'Walk Week';
  
  // Milestone-specific color schemes for lifetime awards
  if ($milestone >= 500000) {
    // Cosmic: deep purple to blue
    $gradStart = '#1a0a3e';
    $gradEnd = '#2a1a5e';
    $circleColor = '#4a2a9e';
    $circleStroke = '#6a4abe';
  } elseif ($milestone >= 200000) {
    // Platinum: silver-blue to teal
    $gradStart = '#0a1a2a';
    $gradEnd = '#1a2a4a';
    $circleColor = '#2a4a7a';
    $circleStroke = '#4a6a9a';
  } elseif ($milestone >= 100000) {
    // Gold: warm gold to blue
    $gradStart = '#1a1408';
    $gradEnd = '#2a2418';
    $circleColor = '#4a4428';
    $circleStroke = '#6a6448';
  } else {
    // Default: dark blue
    $gradStart = '#0b1020';
    $gradEnd = '#111936';
    $circleColor = '#1b2a7a';
    $circleStroke = '#2c3a7a';
  }
  
  return <<<SVG
<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512">
  <defs>
    <linearGradient id="g" x1="0" y1="0" x2="1" y2="1">
      <stop offset="0%" stop-color="{$gradStart}"/>
      <stop offset="100%" stop-color="{$gradEnd}"/>
    </linearGradient>
  </defs>
  <rect width="512" height="512" fill="url(#g)"/>
  <circle cx="256" cy="180" r="100" fill="{$circleColor}" stroke="{$circleStroke}" stroke-width="6"/>
  <text x="256" y="180" font-family="system-ui, -apple-system, Segoe UI, Roboto, Arial" font-size="28" text-anchor="middle" fill="#e6ecff">{$title}</text>
  <text x="256" y="220" font-family="system-ui, -apple-system, Segoe UI, Roboto, Arial" font-size="16" text-anchor="middle" fill="#9aa9e6">{$miles}</text>
  <rect x="96" y="300" width="320" height="60" rx="12" fill="#17214f" stroke="#2c3a7a" stroke-width="4"/>
  <text x="256" y="337" font-family="system-ui, -apple-system, Segoe UI, Roboto, Arial" font-size="20" font-weight="700" text-anchor="middle" fill="#e6ecff">{$sub}</text>
  <text x="256" y="365" font-family="system-ui, -apple-system, Segoe UI, Roboto, Arial" font-size="12" text-anchor="middle" fill="#9aa9e6">Walk Week Award</text>
</svg>
SVG;
}

/**
 * Simple GD render to WebP: 512x512, dark bg, center text.
 */
function ai_image_write_gd_badge(string $outAbs, string $userName, string $label): bool {
  try {
    $w = 512; $h = 512; $img = imagecreatetruecolor($w, $h);
    if (!$img) return false;
    // Background
    $bg = imagecolorallocate($img, 11, 16, 32); // #0b1020
    imagefilledrectangle($img, 0, 0, $w, $h, $bg);
    // Accent circle
    $accent = imagecolorallocate($img, 27, 42, 122); // #1b2a7a
    imagefilledellipse($img, (int)($w/2), 180, 200, 200, $accent);
    // Text colors
    $white = imagecolorallocate($img, 230, 236, 255);
    $muted = imagecolorallocate($img, 154, 169, 230);

    // Draw text (use built-in font)
    $title = $label;
    $sub = $userName !== '' ? $userName : 'Walk Week';
    $f = 5; // built-in font size
    $titleW = imagefontwidth($f) * strlen($title);
    $xTitle = (int)(($w - $titleW) / 2);
    imagestring($img, $f, max(4, $xTitle), 170, $title, $white);
    $subW = imagefontwidth(4) * strlen($sub);
    $xSub = (int)(($w - $subW) / 2);
    imagestring($img, 4, max(4, $xSub), 340, $sub, $muted);

    $ok = imagewebp($img, $outAbs, 88);
    imagedestroy($img);
    return (bool)$ok;
  } catch (Throwable $e) {
    return false;
  }
}

function ai_image_log_event(int $uid, string $userName, string $kind, int $milestone, string $status, string $reason, ?string $provider, ?string $model, ?string $absPath, ?string $urlPath, $cost=null): void {
  $dir = dirname(__DIR__, 2) . '/data/logs/ai';
  if (!is_dir($dir)) { @mkdir($dir, 0775, true); }
  $log = $dir . '/award_images.log';
  $ts = date('c');
  $prov = $provider ?: 'fallback';
  $msg = sprintf('[%s] user=%d:%s kind=%s milestone=%d provider=%s path=%s cost=%s status=%s reason=%s',
    $ts, $uid, $userName, $kind, $milestone, $prov, ($urlPath ?? ''), ($cost===null?'null':(string)$cost), $status, $reason);
  @file_put_contents($log, $msg . "\n", FILE_APPEND);
}


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/templates/admin/entries.php =====

<?php /** @var array $weeks */ /** @var array $entries */ /** @var array $users */ /** @var string $csrfToken */ /** @var string $curWeek */ ?>
<h1>KW Admin: Entries</h1>
<input type="hidden" id="csrf" value="<?= htmlspecialchars($csrfToken) ?>">
<section>
  <label>Week:</label>
  <select id="weekSelect" onchange="onWeekChange()">
    <?php foreach ($weeks as $w): ?>
      <option value="<?= htmlspecialchars($w['week']) ?>" data-finalized="<?= (int)($w['finalized'] ?? 0) ?>" <?= ($w['week'] === ($curWeek ?? '') ? 'selected' : '') ?>>
        <?= htmlspecialchars($w['label']) ?><?= !empty($w['finalized']) ? ' (finalized)' : '' ?>
      </option>
    <?php endforeach; ?>
  </select>

  <button id="addActive" class="btn">Add all active to week</button>
  <button id="finalize" class="btn warn">Finalize week</button>
  <button id="saveAll" class="btn">Save changes</button>
</section>

<div id="grid" class="entries-wrap">
  <table class="entries-table" id="entriesTable">
    <thead>
      <tr>
        <th class="col-name">Name</th>
        <th class="col-day">Mon</th><th class="col-day">Tue</th><th class="col-day">Wed</th><th class="col-day">Thu</th><th class="col-day">Fri</th><th class="col-day">Sat</th><th class="col-day">Sun</th>
        <th class="col-tag">Tag</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <?php foreach ($entries as $e): ?>
        <tr data-id="<?= (int)$e['id'] ?>" data-locked="<?= (int)($e['locked'] ?? 0) ?>">
          <td class="col-name name-cell">
            <span class="name-text"><?= htmlspecialchars($e['name']) ?></span>
            <input type="hidden" name="id" value="<?= (int)$e['id'] ?>">
          </td>
          <?php foreach (['monday','tuesday','wednesday','thursday','friday','saturday','sunday'] as $d): ?>
            <td class="col-day"><input type="number" min="0" name="<?= $d ?>" value="<?= htmlspecialchars((string)($e[$d] ?? '')) ?>"></td>
          <?php endforeach; ?>
          <td class="col-tag"><input name="tag" value="<?= htmlspecialchars((string)($e['tag'] ?? '')) ?>"></td>
          <td><button class="btn warn delete-row">Delete</button></td>
        </tr>
      <?php endforeach; ?>

      <!-- New row template -->
      <tr id="newRow">
        <td class="col-name"><input name="name" placeholder="Name"></td>
        <?php foreach (['monday','tuesday','wednesday','thursday','friday','saturday','sunday'] as $d): ?>
          <td class="col-day"><input type="number" min="0" name="<?= $d ?>" placeholder="0"></td>
        <?php endforeach; ?>
        <td class="col-tag"><input name="tag" placeholder="Pregnant, Injured, ..."></td>
        <td><button class="btn" id="addRowBtn">Add</button></td>
      </tr>
    </tbody>
  </table>
</div>

<script>
const CSRF = document.getElementById('csrf').value;
function apiPost(path, data){
  return fetch(path, {
    method: 'POST',
    headers: {'Content-Type':'application/json','X-CSRF': CSRF},
    body: JSON.stringify(data)
  });
}

function currentWeek(){ return document.getElementById('weekSelect').value; }
function currentWeekFinalized(){
  const opt = document.getElementById('weekSelect').selectedOptions[0];
  return opt && opt.dataset && opt.dataset.finalized === '1';
}

document.getElementById('addActive').addEventListener('click', async ()=>{
  const week = currentWeek();
  if (!week) return alert('Select a week');
  await apiPost('/admin/entries/add-active', {week});
  location.reload();
});

document.getElementById('finalize').addEventListener('click', async ()=>{
  const week = currentWeek();
  if (!week) return alert('Select a week');
  if (!confirm('Finalize this week? This will lock entries.')) return;
  await apiPost('/admin/entries/finalize', {week});
  location.reload();
});

document.getElementById('addRowBtn').addEventListener('click', async (e)=>{
  e.preventDefault();
  if (currentWeekFinalized()) return alert('Week is finalized; cannot add rows.');
  const tr = document.getElementById('newRow');
  const name = tr.querySelector('input[name="name"]').value.trim();
  if (!name) return alert('Name required');
  const data = { week: currentWeek(), name, mon: tr.querySelector('input[name="monday"]').value, tue: tr.querySelector('input[name="tuesday"]').value, wed: tr.querySelector('input[name="wednesday"]').value, thu: tr.querySelector('input[name="thursday"]').value, fri: tr.querySelector('input[name="friday"]').value, sat: tr.querySelector('input[name="saturday"]').value, sun: tr.querySelector('input[name="sunday"]').value, tag: tr.querySelector('input[name="tag"]').value };
  const res = await apiPost('/admin/entries/save', data);
  if (!res.ok) return alert('Add failed');
  location.reload();
});

document.getElementById('saveAll').addEventListener('click', async ()=>{
  if (currentWeekFinalized()) return alert('Week is finalized; cannot save changes.');
  const rows = Array.from(document.querySelectorAll('#entriesTable tbody tr')).filter(r => r.id !== 'newRow');
  const entries = [];
  for (const tr of rows) {
    const id = tr.dataset.id ? parseInt(tr.dataset.id,10) : null;
    const locked = tr.dataset.locked === '1';
    if (locked) continue;
    const obj = { week: currentWeek() };
    if (id) obj.id = id;
    obj.mon = tr.querySelector('input[name="monday"]')?.value ?? null;
    obj.tue = tr.querySelector('input[name="tuesday"]')?.value ?? null;
    obj.wed = tr.querySelector('input[name="wednesday"]')?.value ?? null;
    obj.thu = tr.querySelector('input[name="thursday"]')?.value ?? null;
    obj.fri = tr.querySelector('input[name="friday"]')?.value ?? null;
    obj.sat = tr.querySelector('input[name="saturday"]')?.value ?? null;
    obj.sun = tr.querySelector('input[name="sunday"]')?.value ?? null;
    obj.tag = tr.querySelector('input[name="tag"]')?.value ?? null;
    entries.push(obj);
  }
  const res = await apiPost('/admin/entries/save', {entries});
  if (!res.ok) {
    const txt = await res.text();
    alert('Save failed: ' + (txt||res.statusText));
    return;
  }
  const j = await res.json();
  if (j.error) return alert('Save failed: ' + j.error);
  alert('Saved');
  location.reload();
});

// delete row
document.querySelectorAll('.delete-row').forEach(btn=>{
  btn.addEventListener('click', async (e)=>{
    const tr = e.target.closest('tr');
    const id = tr.dataset.id;
    if (!id) { tr.remove(); return; }
    if (!confirm('Delete entry?')) return;
    const res = await apiPost('/admin/entries/save', {action:'delete', id: parseInt(id,10)});
    if (!res.ok) return alert('Delete failed');
    location.reload();
  });
});

function onWeekChange(){
  const w = currentWeek();
  const url = new URL(window.location.href);
  url.searchParams.set('week', w);
  window.location.href = url.toString();
}

// Disable inputs when week finalized or row locked
(function disableLocked(){
  if (currentWeekFinalized()) {
    document.querySelectorAll('#entriesTable input, #entriesTable button#addRowBtn, #addRowBtn, #saveAll').forEach(n=>{
      n.disabled = true;
    });
  } else {
    document.querySelectorAll('#entriesTable tr[data-locked="1"] input, #entriesTable tr[data-locked="1"] .delete-row').forEach(n=>{
      n.disabled = true;
    });
  }
})();
</script>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/templates/admin/users.php =====

<?php /** @var array $users */ /** @var string $csrfToken */ ?>
<h1>KW Admin: Users</h1>
<input type="hidden" id="csrf" value="<?= htmlspecialchars($csrfToken) ?>">
<div>
  <button id="newUserBtn" class="btn">New user</button>
</div>

<table id="usersTable">
  <thead><tr><th></th><th>Name</th><th>Active</th><th>Tag</th><th>Actions</th></tr></thead>
  <tbody>
    <?php foreach ($users as $u): ?>
      <tr data-id="<?= (int)$u['id'] ?>">
        <td><img src="/public/assets/images/users/<?= (int)$u['id'] ?>/selfie.jpg" style="width:32px;height:32px;border-radius:4px" onerror="this.style.display='none'"></td>
        <td class="name"><?= htmlspecialchars($u['name']) ?></td>
        <td class="active"><?= (int)($u['is_active'] ?? 0) ? 'Yes' : 'No' ?></td>
        <td class="tag"><?= htmlspecialchars($u['tag'] ?? '') ?></td>
        <td>
          <button class="btn edit">Edit</button>
          <button class="btn warn delete">Delete</button>
        </td>
      </tr>
    <?php endforeach; ?>
  </tbody>
</table>

<div id="userForm" style="display:none">
  <h3 id="formTitle">Edit User</h3>
  <form id="uForm">
    <input type="hidden" name="id" id="u_id">
    <label>Name: <input name="name" id="u_name" required></label><br>
    <label>Tag: <input name="tag" id="u_tag"></label><br>
    <label>Sex: <input name="sex" id="u_sex"></label><br>
    <label>Age: <input name="age" id="u_age" type="number" min="0"></label><br>
    <label>Active: <input type="checkbox" name="is_active" id="u_active"></label><br>
    <button class="btn" id="saveUser">Save</button>
    <button class="btn" id="cancelUser">Cancel</button>
  </form>
</div>

<script>
const CSRF = document.getElementById('csrf').value;
function apiPost(path, data){ return fetch(path, {method:'POST',headers:{'Content-Type':'application/json','X-CSRF':CSRF},body:JSON.stringify(data)}); }

document.getElementById('newUserBtn').addEventListener('click', ()=> {
  document.getElementById('userForm').style.display = 'block';
  document.getElementById('formTitle').textContent = 'New user';
  document.getElementById('uForm').reset();
  document.getElementById('u_id').value = '';
});

document.querySelectorAll('#usersTable .edit').forEach(btn=>{
  btn.addEventListener('click', (e)=>{
    const tr = e.target.closest('tr');
    const id = tr.dataset.id;
    document.getElementById('userForm').style.display = 'block';
    document.getElementById('formTitle').textContent = 'Edit user';
    document.getElementById('u_id').value = id;
    document.getElementById('u_name').value = tr.querySelector('.name').textContent.trim();
    document.getElementById('u_tag').value = tr.querySelector('.tag').textContent.trim();
    document.getElementById('u_active').checked = tr.querySelector('.active').textContent.trim() === 'Yes';
  });
});

document.querySelectorAll('#usersTable .delete').forEach(btn=>{
  btn.addEventListener('click', async (e)=>{
    if (!confirm('Delete user?')) return;
    const id = e.target.closest('tr').dataset.id;
    const res = await apiPost('/admin/users/save', {action:'delete', id});
    if (!res.ok) return alert('Delete failed');
    location.reload();
  });
});

document.getElementById('cancelUser').addEventListener('click',(e)=>{ e.preventDefault(); document.getElementById('userForm').style.display='none'; });

document.getElementById('saveUser').addEventListener('click', async (e)=>{
  e.preventDefault();
  const id = document.getElementById('u_id').value;
  const payload = { user: {
    id: id ? parseInt(id,10) : null,
    name: document.getElementById('u_name').value,
    tag: document.getElementById('u_tag').value,
    sex: document.getElementById('u_sex').value,
    age: document.getElementById('u_age').value,
    is_active: document.getElementById('u_active').checked ? 1 : 0
  } };
  const res = await apiPost('/admin/users/save', payload);
  if (!res.ok) return alert('Save failed');
  const j = await res.json();
  if (j.error) return alert('Save failed: ' + j.error);
  location.reload();
});
</script>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/templates/admin/ai.php =====

<?php
$csrf = \App\Security\Csrf::token();
?>
<!doctype html><meta charset="utf-8"><title>AI Admin</title>
<div>
  <button id="refresh">Refresh</button>
  <input id="week" placeholder="YYYY-W##">
  <button id="send">Send approved for week</button>
  <div id="sendStatus" style="margin-top:8px;color:#222"></div>
  <ul id="items"></ul>
</div>
<script>
/* Inject CSRF hidden input (for fetch requests) if not already present */
if (!document.getElementById('csrf')) {
  const _inp = document.createElement('input');
  _inp.type = 'hidden';
  _inp.id = 'csrf';
  _inp.value = <?= json_encode($csrf) ?>;
  document.body.appendChild(_inp);
}

/* POST JSON helper that includes CSRF header */
async function postJSON(url, payload) {
  const res = await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF': document.getElementById('csrf').value
    },
    body: JSON.stringify(payload)
  });
  if (!res.ok) throw new Error(await res.text());
  return res.json();
}

function mkBtn(text, cls) {
  const b = document.createElement('button');
  b.textContent = text;
  if (cls) b.className = cls;
  return b;
}

async function postForm(url, formData) {
  const res = await fetch(url, { method: 'POST', body: formData });
  let txt;
  try { txt = await res.text(); } catch(e){ txt = ''; }
  let json = null;
  try { json = JSON.parse(txt); } catch(e){ /* not json */ }
  return { ok: res.ok, status: res.status, text: txt, json };
}

async function load() {
  const r = await fetch('/api/ai/list');
  const j = await r.json();
  const ul = document.getElementById('items');
  ul.innerHTML = '';
  if (!j.items || !j.items.length) {
    ul.innerHTML = '<li>No pending messages</li>';
    return;
  }
  j.items.forEach(it => {
    const li = document.createElement('li');
    li.style.marginBottom = '8px';
    const meta = document.createElement('div');
    meta.style.fontSize = '0.9em';
    meta.style.color = '#444';
    meta.textContent = `#${it.id} ${it.created_at ?? ''} ${it.user_id ? ('user:'+it.user_id) : ''}`;
    const body = document.createElement('div');
    body.textContent = it.content ?? it.body ?? '';
    body.style.margin = '4px 0';
    const controls = document.createElement('div');
    controls.style.display = 'flex';
    controls.style.gap = '6px';
    controls.style.alignItems = 'center';

    const approveBtn = mkBtn('Approve', 'approve');
    const rejectBtn = mkBtn('Reject', 'reject');
    const deleteBtn = mkBtn('Delete', 'delete');
    const status = document.createElement('span');
    status.style.marginLeft = '8px';
    status.style.color = '#006400';

    approveBtn.onclick = async () => {
      approveBtn.disabled = true; rejectBtn.disabled = true; deleteBtn.disabled = true;
      status.textContent = 'approving...';
      try {
        const json = await postJSON('/admin/ai/approve', { id: it.id, approved: true });
        if (json && json.ok) {
          status.textContent = 'approved';
          // reload list to remove approved item
          await load();
        } else {
          status.style.color = 'crimson';
          status.textContent = `approve failed: ${json?.error ?? 'unknown'}`;
          approveBtn.disabled = false; rejectBtn.disabled = false; deleteBtn.disabled = false;
        }
      } catch (e) {
        status.style.color = 'crimson';
        status.textContent = 'approve failed: ' + e.message;
        approveBtn.disabled = false; rejectBtn.disabled = false; deleteBtn.disabled = false;
      }
    };

    // Use legacy delete endpoint for both Reject and Delete actions.
    // Ensure CSRF is included; server-side file will be updated to validate CSRF.
    async function doDelete(actionName) {
      approveBtn.disabled = true; rejectBtn.disabled = true; deleteBtn.disabled = true;
      status.style.color = '#444';
      status.textContent = actionName + '...';
      try {
        const json = await postJSON('/admin/ai/delete', { id: it.id });
        if (json && json.ok) {
          status.style.color = '#006400';
          status.textContent = actionName + ' OK';
          await load();
        } else {
          status.style.color = 'crimson';
          status.textContent = `${actionName} failed: ${json?.error ?? 'unknown'}`;
          approveBtn.disabled = false; rejectBtn.disabled = false; deleteBtn.disabled = false;
        }
      } catch (e) {
        status.style.color = 'crimson';
        status.textContent = `${actionName} failed: ${e.message}`;
        approveBtn.disabled = false; rejectBtn.disabled = false; deleteBtn.disabled = false;
      }
    }

    rejectBtn.onclick = () => doDelete('rejected');
    deleteBtn.onclick = () => doDelete('deleted');

    controls.appendChild(approveBtn);
    controls.appendChild(rejectBtn);
    controls.appendChild(deleteBtn);
    controls.appendChild(status);

    li.appendChild(meta);
    li.appendChild(body);
    li.appendChild(controls);
    ul.appendChild(li);
  });
}

document.getElementById('refresh').onclick = load;

document.getElementById('send').onclick = async () => {
  const weekVal = document.getElementById('week').value.trim();
  const sendStatus = document.getElementById('sendStatus');
  sendStatus.style.color = '#444';
  sendStatus.textContent = 'sending...';
  try {
    const json = await postJSON('/admin/ai/send-approved', { week: weekVal });
    if (json && json.ok) {
      sendStatus.style.color = '#006400';
      sendStatus.textContent = `Sent ${json.count ?? 0} messages.`;
    } else {
      sendStatus.style.color = 'crimson';
      sendStatus.textContent = `Send failed: ${json?.error ?? 'unknown'}`;
    }
  } catch (e) {
    sendStatus.style.color = 'crimson';
    sendStatus.textContent = `Send failed: ${e.message}`;
  }
  // refresh list after send to reflect sent_at
  await load();
};

load();
</script>


# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/data/weeks/manifest.json =====

{
  "weeks": [
    {
      "label": "Current Week",
      "file": "/kings_walk_week.csv"
    },
    {
      "label": "Aug 12–17",
      "file": "2025-08-17.csv"
    }
  ]
}

# ===== FILE: /Users/michaelking/Documents/projects/king-walk-week/routes/web.php =====

<?php
use App\Core\Router;
use App\Controllers\AdminController;

/** @var Router $router */
$router->add('GET', '/', fn() => 'OK');
$router->add('GET', '/admin/ai', [new AdminController(), 'ai']); // kept for compatibility

// AI MVC routes removed; using file-based /api/*.php endpoints instead.

// Admin UI: entries and users
$admin = new \App\Controllers\AdminController();
$router->add('GET', '/admin/entries', [$admin, 'entries']);
$router->add('POST', '/admin/entries/save', [$admin, 'saveEntries']);
$router->add('POST', '/admin/entries/finalize', [$admin, 'finalizeWeek']);
$router->add('POST', '/admin/entries/add-active', [$admin, 'addAllActiveToWeek']);

$adminUsers = new \App\Controllers\AdminUsersController();
$router->add('GET', '/admin/users', [$adminUsers, 'index']);
$router->add('POST', '/admin/users/save', [$adminUsers, 'save']);

return $router;

